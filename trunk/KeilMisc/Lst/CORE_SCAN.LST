C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_SCAN
OBJECT MODULE PLACED IN Code\CORE\CORE_SCAN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_SCAN.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_SCN.C - code to handle local keyboard scanning.
   3           *
   4           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of Insyde Software Corporation.
  10           *---------------------------------------------------------------------------*/
  11          
  12          #include <CORE_INCLUDE.H>
  13          #include <OEM_INCLUDE.H>
  14          
  15          void CapDelay(void)
  16          {
  17   1          WNCKR = 0x00;               // Delay 15.26 us
  18   1          //WNCKR = 0x00;               // Delay 15.26 us
  19   1      }
  20          
  21          /* ----------------------------------------------------------------------------
  22           * FUNCTION:   scan_keys
  23           *
  24           * Scan key matrix once.
  25           *
  26           * Return: value != 0, scan activity detected, scan again later.
  27           *         value  = 0, no scan activity detected.
  28           * ------------------------------------------------------------------------- */
  29          BYTE scan_keys(void)
  30          {
  31   1              BYTE result;
  32   1              result = FALSE;
  33   1      
  34   1          scan.saf_make = 0;
  35   1          scan.saf_break = 0;
  36   1          scan.saf_keys = 0;
  37   1      
  38   1              if (typematic.byte)
  39   1              {
  40   2              check_tm(typematic);    // Check typematic.
  41   2              }
  42   1      
  43   1              if (new_keyh.byte)              // Exist Debounce key?
  44   1              {                                               // Yes, bounding.
  45   2              scan.saf_make = 1;      // Set debounce make bit.
  46   2              debounce_key();
  47   2              result = TRUE;
  48   2              }
  49   1      
  50   1          if (!result)                                // Otherwise, scan all.
  51   1          {
  52   2              for (ITempB03=0;ITempB03<16;ITempB03++)
  53   2              {
  54   3                      Write_Strobe(ITempB03);
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 2   

  55   3                              CapDelay();
  56   3                      ITempB02 = KSI;         // Read in KI 0 - 7 sense line data. */
  57   3                  ITempB02 = (~ITempB02) ^ bscan_matrix[ITempB03];
  58   3                  if (ITempB02 != 0)
  59   3                      {
  60   4                      check_scan(ITempB02, ITempB03);
  61   4                      }
  62   3      
  63   3                  if (bscan_matrix[ITempB03])
  64   3                      {                                                       // Here, if current still active.
  65   4                      scan.saf_keys = 1;      // Set keys active bits. Check all key release.
  66   4                  }
  67   3                              KSOL=0xFF;
  68   3                              KSOH1=0xFF;
  69   3                              KSOH2 = 0xFF;
  70   3              }
  71   2                                                                              // If ghost exist, make key clear.
  72   2              if (new_keyl.field.ghost == 1)
  73   2              {
  74   3                  new_keyl.field.ghost = 0;   // Ghost flag is set. Clear it.
  75   3                  ITempB01 = new_keyl.byte & 7;
  76   3                  if (ITempB01 == 0)
  77   3                  {
  78   4                      ITempB01 = Byte_Mask((BYTE) (new_keyh.field.input));
  79   4                      ITempB01 = ITempB01 & diode_key;
  80   4                  }
  81   3      
  82   3                  if (ITempB01 == 0)
  83   3                  {
  84   4                      new_keyh.byte = 0;      // Clear new key.
  85   4                      new_keyl.byte = 0;
  86   4                  }
  87   3              }
  88   2          }
  89   1      
  90   1              return((BYTE) (scan.saf_make + scan.saf_break + scan.saf_keys));
  91   1      }
  92          
  93          /* ----------------------------------------------------------------------------
  94           * FUNCTION: Write_Strobe
  95           *
  96           * Writes the scan matrix KSO[15:0] lines based on Scan Line bit number.
  97           *
  98           * KSO[15:0] will be all floats or open except for the bit corresponding to
  99           * the Scan Line number.  This bit will be low to be detected by the sense
 100           * line input port later.
 101           *
 102           * Config.Msk_Strobe_H and Config.Msk_Strobe_L specify which of the 16 bits on
 103           * the port are used for the scanner.  (1 = Scanner, 0 = Other OEM function).
 104           * This allows port pins which are not used for the scanner output lines to be
 105           * used for something else.
 106           *
 107           * Input: Scan line number.
 108           * ------------------------------------------------------------------------- */
 109          void Write_Strobe(BYTE scan_line_num)
 110          {
 111   1              if (scan_line_num<8)
 112   1              {
 113   2              KSOL=~(0x01<<scan_line_num);
 114   2              KSOH1=0xFF;
 115   2              }
 116   1              else
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 3   

 117   1              {
 118   2              KSOL=0xFF;
 119   2                      KSOH1=~(0x01<<(scan_line_num-0x08));
 120   2              }
 121   1      
 122   1              if(ExtendMatrix)
 123   1              {
 124   2                      KSOH2 = 0xFF;
 125   2                      Hook_SetGPIOScanPinH();
 126   2              }
 127   1      }
 128          
 129          /* ----------------------------------------------------------------------------
 130           * FUNCTION: check_scan
 131           *
 132           * Input:
 133           *     changes = Any bit set indicates there is a difference in state from
 134           *         last KSI to this KSI.
 135           *     scan_address = Address of strobe line that was low when changes was
 136           *         computed.
 137           *
 138           * NOTE:  For the shift and bit test of "changes" to work, "changes" MUST be
 139           * unsigned.  (Right shifting an unsigned quantity fills vacated bits with
 140           * zeros.  Right shifting a signed quantity will fill vacated bits with sign
 141           * bits on some machines and zero bits on others.)
 142           * ------------------------------------------------------------------------- */
 143          static void check_scan(BYTE changes, BYTE scan_address)
 144          {
 145   1          BYTE flag;
 146   1          BYTE change_make_key;
 147   1          BYTE bit_num;
 148   1      
 149   1              flag = FALSE;                                   // Simple Matrix.
 150   1              if (new_keyl.field.ghost == 1)
 151   1              {
 152   2              flag = TRUE;
 153   2              }
 154   1              else
 155   1              {   /* Find 0 -> 1 's. */
 156   2                      change_make_key = changes & ~bscan_matrix[scan_address];
 157   2              if (change_make_key == 0)
 158   2                      {
 159   3                      flag = FALSE;
 160   3              }
 161   2                      else if (find_paths(change_make_key, scan_address))
 162   2                      {
 163   3                      flag = TRUE;    /* TRUE if ghost keys. */
 164   3              }
 165   2              }
 166   1      
 167   1              if (flag)
 168   1              {   /* Ghost exists. */
 169   2                      new_keyl.field.ghost = 1;  /* Set ghost flag. */
 170   2              /* Only look at 1 -> 0 transition & diode key always no ghost. */
 171   2              changes &= bscan_matrix[scan_address] | diode_key;
 172   2              }
 173   1      
 174   1          bit_num = 0;
 175   1          while (changes != 0)
 176   1          {
 177   2              if (changes & 0x01)     /* Look at changes 1 bit at a time. */
 178   2                      {
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 4   

 179   3                  cscfnd(bit_num, scan_address);
 180   3              }
 181   2              bit_num++;
 182   2              changes = changes >> 1; /* Shift bit out (and a zero bit in) to check next bit. */
 183   2          }
 184   1      }
 185          
 186          /* ----------------------------------------------------------------------------
 187           * FUNCTION:   cscfnd
 188           *
 189           * Find changed bit.  This subroutine is called for each bit in this KSI that
 190           * is different from last KSI.
 191           * ------------------------------------------------------------------------- */
 192          static void cscfnd(BYTE bit_num, BYTE scan_address)
 193          {
 194   1          if (bscan_matrix[scan_address] & Byte_Mask(bit_num))
 195   1          {
 196   2              if (scan.saf_break == 0)
 197   2                      {
 198   3                  scan.saf_break = 1;
 199   3                  setup_debounce(bit_num, scan_address, BREAK_EVENT);
 200   3              }
 201   2          }
 202   1          else
 203   1          {
 204   2              if (scan.saf_make == 0)
 205   2                      {
 206   3                  scan.saf_make = 1;
 207   3                  setup_debounce(bit_num, scan_address, MAKE_EVENT);
 208   3              }
 209   2          }
 210   1      }
 211          
 212          /* ----------------------------------------------------------------------------
 213           * FUNCTION:   setup_debounce
 214           *
 215           * Input:
 216           *     scan_address = number of bit of KO.
 217           *     bit_num = number of bit that changed from last KI to this KI for KO.
 218           *     event = contact event (MAKE_EVENT or BREAK_EVENT).
 219           * ------------------------------------------------------------------------- */
 220          static void setup_debounce(BYTE bit_num, BYTE scan_address, BYTE event)
 221          {
 222   1          new_keyh.field.output = scan_address;
 223   1          new_keyh.field.input = bit_num;
 224   1          new_keyh.field.debounce_status = 1;
 225   1          new_keyl.field.state = 0;  /* Debounce has not counted out. */
 226   1          new_keyl.field.same = 0;   /* Key activity indication. */
 227   1      
 228   1          if (event == MAKE_EVENT)
 229   1          {   /* For MAKE key (key pressed). */
 230   2              new_keyl.field.trans = 0;
 231   2              new_keyl.field.count = Ext_Cb2.field.Break_Count; /* Shouldn't this be Make_Count? */
 232   2          }
 233   1          else
 234   1          {   /* For BREAK key (key released). */
 235   2              new_keyl.field.trans = 1;
 236   2              new_keyl.field.count = Ext_Cb2.field.Make_Count; /* Shouldn't this be Break_Count? */
 237   2          }
 238   1      }
 239          
 240          /* ----------------------------------------------------------------------------
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 5   

 241           * FUNCTION: find_paths
 242           *
 243           * Input:  DOWN_STATE  scan_address
 244           *         change_make_key
 245           *
 246           * Return: FALSE if no paths found, Otherwise returns TRUE.
 247           * ------------------------------------------------------------------------- */
 248          static FLAG find_paths(BYTE change_make_key, BYTE scan_address)
 249          {
 250   1          FLAG paths_found, done;
 251   1          BYTE paths, temp, bits;
 252   1          BYTE first_address;
 253   1      
 254   1          /* For the shift and bit test to work, "bits" MUST be unsigned.  (Right
 255   1             shifting an unsigned quantity fills vacated bits with zeros.  Right
 256   1             shifting a signed quantity will fill vacated bits with sign bits on some
 257   1             machines and zero bits on others.) */
 258   1          done = FALSE;
 259   1          paths_found = FALSE;
 260   1          first_address = scan_address;
 261   1      
 262   1          change_make_key &= ~(diode_key); /* Ignore diode key. */
 263   1          /* change_make_key = bKO_BITS. */
 264   1      
 265   1          if (change_make_key == 0)
 266   1              {
 267   2              done = TRUE; /* paths_found == FALSE */
 268   2          }
 269   1      
 270   1          if (!done)
 271   1          {
 272   2              paths = bscan_matrix[scan_address] | change_make_key;
 273   2              paths &= ~(diode_key);  /* Ignore diode key. */
 274   2              /* paths = bKO_PATHS. */
 275   2              if (paths == 0)
 276   2                      {
 277   3                  done = TRUE;  /* paths_found == FALSE */
 278   3              }
 279   2          }
 280   1      
 281   1          while (!done)
 282   1          {
 283   2              scan_address++;
 284   2      
 285   2              if (scan_address >= MAX_SCAN_LINES)
 286   2              //if(scan_address >= STANDARD_SCAN_LINES)
 287   2                      {
 288   3                  scan_address = 0;   /* Wrap around */
 289   3              }
 290   2      
 291   2              if (scan_address == first_address)
 292   2                      {
 293   3                  done = TRUE;        /* No scan lines left.  paths_found == FALSE */
 294   3              }
 295   2      
 296   2              if (!done)
 297   2              {   /* Check Path */
 298   3                  temp  = bscan_matrix[scan_address]; /* Any paths? */
 299   3                  temp &= ~(diode_key);               /* Ignore diode key */
 300   3      
 301   3                  if (temp != 0)
 302   3                              {    /* Paths found */
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 6   

 303   4                      temp &= paths;  /* Do paths line up? */
 304   4                  }
 305   3      
 306   3                  if (temp != 0)
 307   3                  {   /* Paths line up */
 308   4                      if (change_make_key != temp)  /* Only 1 bit set? */
 309   4                      {   /* No, ghost exists. */
 310   5                          paths_found = TRUE;
 311   5                          done = TRUE;
 312   5                      }
 313   4      
 314   4                      if (!done)
 315   4                      {   /* The following checks if more than one bit is set to 1.
 316   5                                      Because "bits" is unsigned, each shift moves the bit
 317   5                                      under test out and a 0 bit in.  When the first 1 bit is
 318   5                                       found, if "bits" == 0, this indicates that there is only
 319   5                                      one bit set. */
 320   5                          bits = paths;  /* Only 1 bit set? */
 321   5                          temp = FALSE;
 322   5      
 323   5                          do
 324   5                          {
 325   6                              if (bits & 0x01)
 326   6                                                      {
 327   7                                  temp = TRUE;
 328   7                              }
 329   6      
 330   6                              /* Shift bit out (and a zero bit in) to check next bit. */
 331   6                              bits = bits >> 1;
 332   6                          } while (temp == FALSE);
 333   5      
 334   5                          if (bits != 0)
 335   5                          {   /* No, more than 1 bit set. */
 336   6                              paths_found = TRUE;
 337   6                              done = TRUE;
 338   6                          }
 339   5                      } /* if (!done) */
 340   4                  } /* if (temp != 0) */
 341   3              } /* if (!done) */
 342   2          } /* while (!done) */
 343   1      
 344   1         return (paths_found);
 345   1      }
 346          
 347          /* ----------------------------------------------------------------------------
 348           * FUNCTION: debounce_key
 349           * ------------------------------------------------------------------------- */
 350          static void debounce_key(void)
 351          {
 352   1          scan.scan_line = new_keyh.field.output;
 353   1          Write_Strobe(scan.scan_line);
 354   1              CapDelay();
 355   1          ITempB01 = Read_Scan_Lines();
 356   1          ITempB01 = ~ITempB01;
 357   1      
 358   1          ITempB02 = Byte_Mask((BYTE) (new_keyh.field.input));
 359   1          ITempB02 = ITempB02 & ITempB01;
 360   1      
 361   1          if (ITempB02 != 0)
 362   1          {
 363   2              if (new_keyl.field.trans == 0)
 364   2                      {
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 7   

 365   3                  new_keyl.field.same = 1;    // last key detected as a MAKE,  same = 1.
 366   3              }
 367   2              else
 368   2                      {
 369   3                  new_keyl.field.same = 0;    // last key detected as a BREAK, same = 0.
 370   3              }
 371   2          }
 372   1          else
 373   1          {
 374   2              if (new_keyl.field.trans == 0)
 375   2                      {
 376   3                  new_keyl.field.same = 0;    // last key detected as a MAKE,  same = 0.
 377   3              }
 378   2              else
 379   2                      {
 380   3                  new_keyl.field.same = 1;    // last key detected as a BREAK, same = 1.
 381   3              }
 382   2          }
 383   1      #if 0           // 0201 change keyboard debounce time to 5ms
                  if (new_keyl.field.state == 0)
                  {
                      if (new_keyl.field.count != 0)
                      {
                          new_keyl.field.count--;
                      }
                      else
                      {
                          if (new_keyl.field.same == 0)
                          {
                              new_keyh.byte = 0;      // Debounce failed, so claer all data
                              new_keyl.byte = 0;
                          }
                          else
                          {
                              new_keyl.field.state = 1;
                          }
                      }
                  }
                  else
              #endif
 405   1          {
 406   2              if (new_keyl.field.same == 0)
 407   2              {
 408   3                  new_keyh.byte = 0;  // Debounce failed.
 409   3                  new_keyl.byte = 0;
 410   3              }
 411   2              else
 412   2              {
 413   3                      change_valid();         // Debounce OK
 414   3              }
 415   2          }
 416   1      }
 417          
 418          /* ----------------------------------------------------------------
 419           * FUNCTION: Read_Scan_Lines - Read KSI[7:0] of the scan matrix
 420           *
 421           * Return: Data from sense lines that are enabled.
 422           *         The lines that are disabled return 1s.
 423           *
 424           * C prototype: BYTE Read_Scan_Lines();
 425           * ---------------------------------------------------------------- */
 426          BYTE Read_Scan_Lines(void)
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 8   

 427          {
 428   1              return (KSI);
 429   1      }
 430          
 431          /* ---------------------------------------------------------------
 432           * FUNCTION: change_valid
 433           * --------------------------------------------------------------- */
 434          static void change_valid(void)
 435          {
 436   1          ITempB04 = Byte_Mask((BYTE) (new_keyh.field.input));
 437   1          ITempB03 = bscan_matrix[new_keyh.field.output];
 438   1          ITempB03 = ITempB03 ^ ITempB04;
 439   1          bscan_matrix[new_keyh.field.output] = ITempB03;
 440   1      
 441   1              ITempB05 = BREAK_EVENT;                 // Ready for BREAK indication.
 442   1          if ((ITempB04 & ITempB03) != 0)
 443   1          {
 444   2              ITempB05 = MAKE_EVENT;
 445   2              typematic.byte = new_keyh.byte; // Set New Typematic Key.
 446   2              scan.TMscale = TM_SCALE;
 447   2              bTMcount = bTMdelay;
 448   2      
 449   2                      etkeytypematic.byte = 0x00;
 450   2          }
 451   1      
 452   1          Send_Scan2(new_keyh, ITempB05);
 453   1          new_keyh.byte = 0;
 454   1          new_keyl.byte = 0;
 455   1      }
 456          
 457          /* ----------------------------------------------------------------------------
 458           * FUNCTION: check_tm - Handle typematic function.
 459           *
 460           * Input: Typematic key
 461           * ------------------------------------------------------------------------- */
 462          static void check_tm(union KEY key)
 463          {
 464   1              ITempB02 = FALSE;
 465   1          ITempB01 = Byte_Mask((BYTE) (key.field.input));
 466   1          ITempB01 = ITempB01 & bscan_matrix[key.field.output];
 467   1      
 468   1          if (ITempB01 == 0)                  // Release Typematic key?
 469   1          {
 470   2              typematic.byte = 0;             // Clear Typematic.
 471   2              ITempB02 = TRUE;
 472   2          }
 473   1      
 474   1          if (!ITempB02)
 475   1          {
 476   2              scan.TMscale--;                 // Count down Prescale.
 477   2              if (scan.TMscale != 0)
 478   2                      {
 479   3                  ITempB02 = TRUE;
 480   3              }
 481   2          }
 482   1      
 483   1          if (!ITempB02)
 484   1          {
 485   2              scan.TMscale = TM_SCALE;// Reload prescale counter.
 486   2              bTMcount--;             // Count down TMcount.
 487   2              if (bTMcount != 0)
 488   2                      {
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 9   

 489   3                  ITempB02 = TRUE;
 490   3              }
 491   2          }
 492   1      
 493   1          if (!ITempB02)
 494   1          {
 495   2              bTMcount = bTMrepeat;   // Reload TMcount.
 496   2              Send_Scan2(key, REPEAT_EVENT);
 497   2          }
 498   1      }
 499          
 500          /* ----------------------------------------------------------------
 501           * FUNCTION: Scan_Init - Initialize internal keyboard (scanner)
 502           * ---------------------------------------------------------------- */
 503          void Scan_Init(void)                                    // Lower all KSO lines for scan matrix
 504          {
 505   1              KSOL=0x00;
 506   1              KSOH1=0x00;
 507   1      
 508   1              if(ExtendMatrix)                                // The function of extend keys
 509   1              {
 510   2                      KSOH2=0x00;
 511   2      
 512   2                      Hook_SetGPIOScanPinCtrl();
 513   2                      Hook_SetGPIOScanPinL();
 514   2              }
 515   1      }
 516          
 517          /* ----------------------------------------------------------------
 518           * FUNCTION: Enable_Any_Key_Irq
 519           *
 520           * Setup for any key from scanner to generate an interrupt.
 521           *
 522           * Lower the "strobe" lines so that when any key is pressed at least one input
 523           * line will go low.  Any bits (out of the possible 16) that are not used for
 524           * the internal keyboard (scanner) are left alone.  This is done using
 525           * Config.Msk_Strobe_H and Config.Msk_Strobe_L.
 526           *
 527           * Then, if the internal keyboard (scanner) is enabled, allow the interrupt to
 528           * occur when a key is pressed on the scanner.
 529           * -------------------------------------------------------------- */
 530          void Enable_Any_Key_Irq(void)   // Lower all KSO lines for scan matrix
 531          {
 532   1              KSOL=0x00;
 533   1              KSOH1=0x00;
 534   1      
 535   1              if (ExtendMatrix)
 536   1              {
 537   2                      KSOH2=0x00;
 538   2                      Hook_SetGPIOScanPinL();
 539   2              }
 540   1              SET_MASK(IER1,Int_KB);      // enable KSI interrupt
 541   1      }
 542          
 543          /* ----------------------------------------------------------------------------
 544           * FUNCTION:   Start_Scan_Transmission
 545           *
 546           * Lock out other devices so scanner can transmit data to Host, and start
 547           * Timer B with event "SEND_ENABLE".  When the "RESPONSE_TIME" has expired,
 548           * the Timer B interrupt handler will post a "SEND" service request to be
 549           * dispatched by the main service loop.  At that time the data will be sent to
 550           * the Host via the "SEND" service handler.
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 10  

 551           * ------------------------------------------------------------------------- */
 552          void Start_Scan_Transmission(void)
 553          {
 554   1          //Load_Timer_B();
 555   1          //Timer_B.fbit.SEND_ENABLE = 1;
 556   1          SetServiceSendFlag();
 557   1      }
 558          
 559          /* ----------------------------------------------------------------------------
 560           * FUNCTION:   Check_Scan_Transmission
 561           *
 562           * See if the scanner keyboard data transmission (to Host) should be allowed.
 563           *
 564           * Return: Transmission status indication.  TRUE if ok to transmit.
 565           * ------------------------------------------------------------------------- */
 566          FLAG Check_Scan_Transmission(void)
 567          {
 568   1          FLAG allow_transmission = FALSE;
 569   1      
 570   1          if ((Int_Var.Scan_Lock == 0) && (Flag.SCAN_INH == 0))
 571   1          {           /* Scanner transmission is locked and inhibited. */
 572   2      
 573   2              if (scan.kbf_head != scan.kbf_tail)
 574   2                      {
 575   3                  allow_transmission = TRUE;  /* Allow transmission */
 576   3              }
 577   2          }
 578   1      
 579   1          return (allow_transmission);
 580   1      }
 581          
 582          /* ----------------------------------------------------------------
 583           * FUNCTION: Get_Kbd_Type
 584           *
 585           * Returns the type of the internal keyboard.
 586           *
 587           * Returns: 0 = U.S. keyboard, 1 = Japanese keyboard.
 588           * -------------------------------------------------------------- */
 589          FLAG Get_Kbd_Type(void)
 590          {                                               // Check keyboard type here
 591   1                                                      // Returns: 0 = U.S. keyboard, 1 = Japanese keyboard.
 592   1              if(1)                           // check type here
 593   1              {
 594   2                      return(0);      // U.S. keyboard.
 595   2              }
 596   1              else
 597   1              {
 598   2                      return(1);              // Japanese keyboard
 599   2              }
 600   1      }
 601          
 602          /* ----------------------------------------------------------------------------
 603           * FUNCTION: Lock_Scan
 604           *
 605           * Lock out the scanner via "Scan_Lock" and clear pending scanner "SEND"
 606           * events.
 607           * ------------------------------------------------------------------------- */
 608          void Lock_Scan(void)
 609          {
 610   1          Int_Var.Scan_Lock = 1;
 611   1          //Timer_B.fbit.SEND_ENABLE = 0;
 612   1      }
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 11  

 613          
 614          /* ----------------------------------------------------------------------------
 615           * FUNCTION: Init_Kbd - Scanner Keyboard Initialization.
 616           * ------------------------------------------------------------------------- */
 617          void Unlock_Scan(void)
 618          {
 619   1              Int_Var.Scan_Lock = 0;
 620   1      }
 621          
 622          void CheckKSO1617Support(void)
 623          {
 624   1              ExtendScanPin = 0x00;
 625   1      
 626   1              if((KSO16CtrlReg&0xFB)==0x00)
 627   1              {
 628   2                      ExtendScanPin++;
 629   2              }
 630   1      
 631   1              if((KSO17CtrlReg&0xFB)==0x00)
 632   1              {
 633   2                      ExtendScanPin++;
 634   2              }
 635   1      
 636   1              if(ExtendScanPin!=0x00)
 637   1              {
 638   2                      ExtendMatrix = 1;
 639   2              }
 640   1              else
 641   1              {
 642   2                      ExtendMatrix = 0;
 643   2              }
 644   1      //msmart test
 645   1              GPCRC3 = ALT + PULL_UP ;
 646   1              GPCRC5 = ALT +PULL_UP;
 647   1      }
 648          
 649          /* ----------------------------------------------------------------------------
 650           * FUNCTION: Init_Kbd - Scanner Keyboard Initialization.
 651           * ------------------------------------------------------------------------- */
 652          void Init_Kbd(void)
 653          {
 654   1      //msmart test   CheckKSO1617Support();
 655   1      
 656   1          Scan_Init();
 657   1      
 658   1          Hook_Setup_Scanner_Pntr();
 659   1          Setup_Diode_Key();
 660   1      
 661   1          new_keyh.byte = 0;
 662   1          new_keyl.byte = 0;
 663   1      
 664   1          ClearExtendKeys();  // for extend keys
 665   1      
 666   1          Clear_Fn_Keys();
 667   1          Clear_Key();        /* Clear key matrix/buffer */
 668   1          Clear_Typematic();
 669   1      
 670   1          Enable_Any_Key_Irq();
 671   1      
 672   1          FN_Key_Break = 0x00;        // Clear FN_Key_Break
 673   1          FN_Key_Break_HS = 0x00;
 674   1          table_entry_bk = 0x00;
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 12  

 675   1      
 676   1          #if KB_FnStickKey
                  FnStickKey = 0;
                  #endif
 679   1      }
 680          
 681          /* ----------------------------------------------------------------------------
 682           * FUNCTION:   Setup_Diode_Key
 683           * ------------------------------------------------------------------------- */
 684          void Setup_Diode_Key(void)
 685          {
 686   1              if(1)
 687   1              {
 688   2              //if (Ext_Cb3_DISABLE_NKEY) { /* Simple matrix (NO diodes) */
 689   2              diode_key = 0x00;
 690   2          }
 691   1          else
 692   1              {                      /* N-key (diodes in keyboard) */
 693   2              diode_key = 0xFF;
 694   2          }
 695   1      }
 696          
 697          
 698          /* ----------------------------------------------------------------------------
 699           * FUNCTION: Clear_Key - Clear local keyboard buffer and related variables.
 700           * ------------------------------------------------------------------------- */
 701          void Clear_Key(void)
 702          {
 703   1          BYTE i;
 704   1          //WORD msk_strobe;
 705   1      
 706   1          for(i = 0; i < MAX_SCAN_LINES; i++) // Clear scan matrix.
 707   1          {
 708   2              bscan_matrix[i] = 0;
 709   2          }
 710   1      
 711   1          for(i = 0; i < KBF_SIZE; i++)               // Clear key buffer.
 712   1          {
 713   2              bKEY_BUFF[i] = 0;
 714   2          }
 715   1      
 716   1          scan.kbf_head = 0;
 717   1          scan.kbf_tail = 0;
 718   1          typematic.byte = 0;
 719   1          scan.saf_make = 0;
 720   1          scan.saf_break = 0;
 721   1          scan.saf_keys = 0;
 722   1          scan.scan_line = 0;
 723   1      }
 724          
 725          
 726          /* ----------------------------------------------------------------------------
 727           * FUNCTION: Clear_Typematic - Set default typematic delay and clear type-matic action.
 728           * ------------------------------------------------------------------------- */
 729          void Clear_Typematic(void)
 730          {
 731   1          typematic.byte = 0;
 732   1          bTMdelay = TM_DELAY;
 733   1          bTMrepeat = TM_REPEAT;
 734   1      }
 735          
 736          /* ----------------------------------------------------------------------------
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 13  

 737           * FUNCTION: Set_Typematic - Set the typematic rate.
 738           *
 739           * Input: typematic rate
 740           *        Bit[4:0] Typematic repeat interval
 741           *        Bit[6:5] Delay time
 742           * ------------------------------------------------------------------------- */
 743          //const BYTE code repeat_tbl[] =
 744          //{
 745          //     3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  9, 10, 11, 12, 13, 14,
 746          //    15, 16, 18, 20, 22, 24, 25, 27, 30, 33, 37, 41, 44, 48, 52, 55
 747          //};
 748          //const BYTE code delay_tbl[] = {27, 55, 83, 111};
 749          
 750          const BYTE code repeat_tbl[] =
 751          {
 752              3,  4,  4,  5,  5,  5,  6,  6,  7,  7,  8, 9, 10, 11, 11, 12,
 753              13, 15, 16, 18, 20, 21, 23, 25, 27, 30, 33, 37, 40, 43, 47, 50
 754          };
 755          const BYTE code delay_tbl[] = {25, 50, 75, 100};
 756          
 757          void Set_Typematic(WORD type_rate)
 758          {
 759   1          Save_Typematic = type_rate;   /* Save for suspend/resume. */
 760   1      
 761   1          /* Bit 4 - 0 typematic repeat interval index. */
 762   1          bTMrepeat = repeat_tbl[type_rate & 0x1F];
 763   1      
 764   1          /* Bit 6 - 5 delay time index. */
 765   1          bTMdelay = delay_tbl[(type_rate >> 5) & 0x03];
 766   1      }
 767          
 768          
 769          /* ----------------------------------------------------------------------------
 770           * FUNCTION: Handle_Scan - Service the local keyboard in response to a key press.
 771           * ------------------------------------------------------------------------- */
 772          void service_scan(void)
 773          {
 774   1              BYTE scan_activity;
 775   1      
 776   1          if (Timer_A.fbit.TMR_SCAN == 0)
 777   1          {
 778   2              Timer_A.fbit.TMR_SCAN = 1;      // Activate scan timer.
 779   2          }
 780   1              //MARTINY013:add start
 781   1                 if (IS_MASK_SET(pDevStatus1,b2DisableKB))
 782   1                      {
 783   2                         F_Service_KEY = 0;   
 784   2                         return;
 785   2                      }
 786   1                 if(!Read_LID_SW_IN())  //HEGANGS030:Disable key wake in pad mode
 787   1                 {
 788   2                         F_Service_KEY = 0;   
 789   2                         return;
 790   2                      }
 791   1      //MARTINY013:add end
 792   1      
 793   1              if(ExtendMatrix)                                // extend keys
 794   1              {
 795   2                      scan_activity = scan_keys()|bScanExtendKeys();
 796   2              }
 797   1              else
 798   1              {
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 14  

 799   2                      scan_activity = scan_keys();// Scan keyboard matrix one time.
 800   2              }
 801   1      
 802   1              if (scan_activity)                              // There is scan activity.
 803   1             {
 804   2                      //if (SystemIsS3)//72JERRY067:Add judge LID state when KB wake up system in S3
 805   2                      if (SystemIsS3&&(Read_LID_SW_IN())&&(Read_LID_PAD()))//72JERRY067:Add judge LID state when KB wake up sy
             -stem in S3
 806   2                      {
 807   3                              //if ( DSxPowState != SYSTEM_DSxOK )
 808   3                              //{
 809   3                              //      if(!Read_YOGA_ID())
 810   3                                      {
 811   4                                              if (KB_S3Dly > 10)
 812   4                                              {
 813   5                                                      PWSeqStep = 1;
 814   5                                                      PowSeqDelay = 1;
 815   5                                                      RamDebug(0x30);         //T045A
 816   5                                                      SysPowState=SYSTEM_S3_S0;
 817   5                                              }
 818   4                                              KB_S3Dly++;
 819   4                                      }
 820   3                              //}
 821   3                      }
 822   2              }
 823   1          else                                                        // No scan activity
 824   1          {
 825   2                      KB_S3Dly = 0;
 826   2              Timer_A.fbit.TMR_SCAN = 0;  // Disable the scan timer.
 827   2              F_Service_KEY = 0;              // Clear any pending service request.
 828   2              Enable_Any_Key_Irq();       // Enable Any Key interrupt.
 829   2              FN_Key_Break = 0x00;        // Clear FN_Key_Break
 830   2              FN_Key_Break_HS = 0x00;
 831   2              table_entry_bk = 0x00;
 832   2          }
 833   1      
 834   1          if (Timer_B.fbit.SEND_ENABLE == 0)  // 1 = Device send request (Request already set)
 835   1          {
 836   2                      if (Check_Scan_Transmission())  // Data available
 837   2                      {
 838   3                      Start_Scan_Transmission();      // Start new transmission
 839   3              }
 840   2          }
 841   1      }
 842          
 843          
 844          /*****************************************************************************/
 845          /********** SCANNER KEY BUFFER ROUTINES **************************************/
 846          /*****************************************************************************/
 847          
 848          /* ----------------------------------------------------------------------------
 849           * FUNCTION:   Get_Buffer
 850           *
 851           * Get data byte from keyboard buffer (if not empty) and update "scan.kbf_head"
 852           * with new index into keyboard buffer.
 853           *
 854           * Return: Data from buffer (WORD of all 1's if buffer is empty).
 855           * ------------------------------------------------------------------------- */
 856          //WORD Get_Buffer(void)
 857          BYTE Get_Buffer(void)
 858          {
 859   1          //WORD buffer_data;
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 15  

 860   1          BYTE buffer_data;
 861   1      
 862   1          if (scan.kbf_head != scan.kbf_tail)
 863   1          {
 864   2              //buffer_data = (WORD) bKEY_BUFF[scan.kbf_head++];
 865   2                      buffer_data = bKEY_BUFF[scan.kbf_head++];
 866   2              if (scan.kbf_head >= KBF_SIZE)
 867   2                      {
 868   3                  scan.kbf_head = 0;
 869   3              }
 870   2          }
 871   1          else
 872   1          {   /* Buffer is empty. */
 873   2              buffer_data = 0xFF;
 874   2          }
 875   1          return (buffer_data);
 876   1      }
 877          
 878          /* ----------------------------------------------------------------------------
 879           * FUNCTION:   Buffer_Mark - Mark local keyboard buffer tail.
 880           * ------------------------------------------------------------------------- */
 881          void Buffer_Mark(void)
 882          {
 883   1          scan.kbf_mark = scan.kbf_tail;   /* Copy scan.kbf_tail to scan.kbf_mark. */
 884   1      }
 885          
 886          /* ----------------------------------------------------------------------------
 887           * FUNCTION:   Buffer_Key
 888           *
 889           * Input:  Row/Column (0iii,oooo) to put in buffer.
 890           * Return: TRUE operation successful, FALSE unsuccessful.
 891           * ------------------------------------------------------------------------- */
 892          FLAG Buffer_Key(BYTE row_column)
 893          {
 894   1          FLAG ready = TRUE;  /* Ready for successful operation */
 895   1      
 896   1          bKEY_BUFF[scan.kbf_tail] = row_column;  /* Store Data to Buffer Tail */
 897   1          scan.kbf_tail++;                        /* Increment Buffer Tail (pointer) */
 898   1      
 899   1          if (scan.kbf_tail >= KBF_SIZE)
 900   1              {
 901   2              scan.kbf_tail = 0;  /* Wrap pointer if too large. */
 902   2          }
 903   1      
 904   1          /* Check Overflow */
 905   1          if (scan.kbf_tail == scan.kbf_head)
 906   1          {   /* Overflow */
 907   2              scan.kbf_tail = scan.kbf_mark;  /* Restore buffer marker. */
 908   2              bKEY_BUFF[scan.kbf_tail] = 0;   /* Set OverFlow Mark. */
 909   2              ready = FALSE;                  /* Overflow Indication !!! */
 910   2          }
 911   1      
 912   1          return (ready);
 913   1      }
 914          
 915          
 916          /* ----------------------------------------------------------------------------
 917           * FUNCTION:   Buffer_String
 918           *
 919           * Places a string in the local keyboard buffer (without a terminating NULL).
 920           * Call Buffer_Key to place data in key buffer.
 921           *
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 16  

 922           * Input:  Pointer to null terminated string.
 923           * Return: 0x80 if buffer overflow error, else 0.
 924           * ------------------------------------------------------------------------- */
 925          BYTE Buffer_String(const BYTE *pntr)
 926          {
 927   1          register BYTE error = 0;
 928   1      
 929   1          while ((*pntr != 0) && (error == 0))
 930   1          {
 931   2              if (Buffer_Key(*pntr++) == 0) {
 932   3                  error = 0x80;   /* Indicate Overflow */
 933   3              }
 934   2          }
 935   1      
 936   1          return (error);
 937   1      }
 938          
 939          //*****************************************************************
 940          // The functions of extend keys
 941          //*****************************************************************
 942          //-----------------------------------------------------------------
 943          // The function of Scaning extend keys
 944          //-----------------------------------------------------------------
 945          BYTE bScanExtendKeys(void)
 946          {
 947   1              ITempB06 = FALSE;
 948   1              extendscan.saf_break = 0;
 949   1              extendscan.saf_make= 0;
 950   1              extendscan.saf_keys= 0;
 951   1      
 952   1              if (etkeytypematic.byte)
 953   1              {
 954   2              CheckEtKeystm(etkeytypematic);  // Check typematic.
 955   2              }
 956   1      
 957   1              if (new_extendkey.byte)
 958   1              {                                                               // Yes, bounding.
 959   2              extendscan.saf_make = 1;
 960   2              DebounceExtendkey();
 961   2              ITempB06 = TRUE;
 962   2              }
 963   1      
 964   1              if(ITempB06 == FALSE)
 965   1              {
 966   2              for (ITempB01=0;ITempB01<ExtendScanPin;ITempB01++)
 967   2              {
 968   3                              SetExtendScanLines(ITempB01);
 969   3                              CapDelay();                                     //msmart
 970   3                              CapDelay();                                     //msmart
 971   3                              CapDelay();                                     //msmart
 972   3                              ITempB02 = KSI;
 973   3                              ITempB02 = (~ITempB02)^bscan_matrix[ITempB01+STANDARD_SCAN_LINES];
 974   3                  if (ITempB02 != 0)
 975   3                      {
 976   4                                      CheckExtendKeys(ITempB02,(ITempB01+STANDARD_SCAN_LINES));
 977   4                      }
 978   3      
 979   3                  if (bscan_matrix[ITempB01+STANDARD_SCAN_LINES])
 980   3                      {                                                               // Here, if current still active.
 981   4                      extendscan.saf_keys = 1;        // Set keys active bits. Check all key release.
 982   4                  }
 983   3              }
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 17  

 984   2              }
 985   1      
 986   1              if (extendstatus.field.ghost == 1)
 987   1              {
 988   2              extendstatus.field.ghost = 0;   // Ghost flag is set.
 989   2              ITempB01 = extendstatus.byte & 7;
 990   2                      if (ITempB01 == 0)
 991   2              {
 992   3                      ITempB01 = Byte_Mask((BYTE)(new_extendkey.field.input));
 993   3                      ITempB01 = ITempB01 & diode_key;
 994   3                      }
 995   2              if (ITempB01 == 0)
 996   2              {
 997   3                      new_extendkey.byte = 0;         // Clear new key.
 998   3                      extendstatus.byte = 0;
 999   3              }
1000   2              }
1001   1      
1002   1              return((BYTE) (extendscan.saf_make + extendscan.saf_break + extendscan.saf_keys));
1003   1      }
1004          
1005          //-----------------------------------------------------------------
1006          // The function of Setting extend scan lines
1007          //-----------------------------------------------------------------
1008          void SetExtendScanLines(BYTE scan_line)
1009          {
1010   1              if(scan_line<0x02)
1011   1              {
1012   2                      KSOL = 0xFF;
1013   2                      KSOH1 = 0xFF;
1014   2                      KSOH2 = ~(0x01<<scan_line);
1015   2                      Hook_SetGPIOScanPinH();
1016   2              }
1017   1              else
1018   1              {
1019   2                      KSOL = 0xFF;
1020   2                      KSOH1 = 0xFF;
1021   2                      KSOH2 = 0xFF;
1022   2                      Hook_SetGPIOScanPinL();
1023   2              }
1024   1              CapDelay();  // WY 2012.11.28
1025   1      }
1026          
1027          //-----------------------------------------------------------------
1028          // The function of Setting extend scan lines
1029          //-----------------------------------------------------------------
1030          void CheckExtendKeys(KSI_bit_num, scan_address)
1031          {
1032   1          BYTE flag;
1033   1          BYTE change_make_key;
1034   1      
1035   1              flag = FALSE;
1036   1              if (extendstatus.field.ghost == 1)
1037   1              {
1038   2              flag = TRUE;
1039   2              }
1040   1              else
1041   1              {                                                       // Find 0 -> 1 's.
1042   2                      change_make_key = KSI_bit_num & ~bscan_matrix[scan_address];
1043   2              if (change_make_key == 0)
1044   2                      {
1045   3                      flag = FALSE;
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 18  

1046   3              }
1047   2              else if (find_paths(change_make_key, scan_address))
1048   2                      {
1049   3                      flag = TRUE;                            // TRUE if ghost keys.
1050   3              }
1051   2              }
1052   1      
1053   1              if (flag)
1054   1              {                                                               // Ghost exists.
1055   2              extendstatus.field.ghost = 1;   // Set ghost flag.
1056   2              KSI_bit_num &= bscan_matrix[scan_address] | diode_key;
1057   2              }
1058   1      
1059   1              ITempB03 = 0x00;
1060   1          while (KSI_bit_num != 0)
1061   1          {
1062   2              if (KSI_bit_num & 0x01)
1063   2                      {
1064   3                      if (bscan_matrix[scan_address] & Byte_Mask(ITempB03))
1065   3                              {
1066   4                              if (extendscan.saf_break == 0)
1067   4                                      {
1068   5                              extendscan.saf_break = 1;
1069   5                                              ExtendKeyDebounce(ITempB03, scan_address, BREAK_EVENT);
1070   5                              }
1071   4                      }
1072   3                      else
1073   3                      {
1074   4                              if (extendscan.saf_make == 0)
1075   4                                      {
1076   5                              extendscan.saf_make = 1;
1077   5                                              ExtendKeyDebounce(ITempB03, scan_address, MAKE_EVENT);
1078   5                              }
1079   4                      }
1080   3              }
1081   2              ITempB03++;
1082   2              KSI_bit_num = KSI_bit_num >> 1; /* Shift bit out (and a zero bit in) to check next bit. */
1083   2          }
1084   1      }
1085          
1086          //-----------------------------------------------------------------
1087          // The function of extend keys debounce
1088          //-----------------------------------------------------------------
1089          void ExtendKeyDebounce(BYTE KSI_bit_num, BYTE scan_address, BYTE event)
1090          {
1091   1          new_extendkey.field.output = scan_address-STANDARD_SCAN_LINES;
1092   1          new_extendkey.field.input = KSI_bit_num;
1093   1          new_extendkey.field.debounce_status = 1;
1094   1          extendstatus.field.state = 0;  // Debounce has not counted out. */
1095   1          extendstatus.field.same = 0;   // Key activity indication. */
1096   1      
1097   1          if (event == MAKE_EVENT)
1098   1          {
1099   2              extendstatus.field.trans = 0;
1100   2              extendstatus.field.count = 1;//Ext_Cb2.field.Break_Count;
1101   2          }
1102   1          else
1103   1          {
1104   2              extendstatus.field.trans = 1;
1105   2              extendstatus.field.count = 1;//Ext_Cb2.field.Make_Count;
1106   2          }
1107   1      }
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 19  

1108          
1109          
1110          void DebounceExtendkey(void)
1111          {
1112   1              SetExtendScanLines(new_extendkey.field.output);
1113   1              ITempB04 = Read_Scan_Lines();
1114   1              ITempB04 = ~ITempB04;
1115   1              ITempB05 = Byte_Mask((BYTE)(new_extendkey.field.input));
1116   1              ITempB05 = ITempB05 & ITempB04;
1117   1      
1118   1              if (ITempB05 != 0)
1119   1          {
1120   2              if (extendstatus.field.trans == 0)      // key make
1121   2                      {
1122   3                  extendstatus.field.same = 1;        // last key detected as a MAKE, same = 1.
1123   3              }
1124   2              else
1125   2                      {
1126   3                  extendstatus.field.same = 0;    // last key detected as a BREAK, same = 0.
1127   3              }
1128   2          }
1129   1          else
1130   1          {
1131   2              if (extendstatus.field.trans == 0)
1132   2                      {
1133   3                  extendstatus.field.same = 0;    // last key detected as a MAKE, same = 0.
1134   3              }
1135   2              else
1136   2                      {
1137   3                  extendstatus.field.same = 1;    // last key detected as a BREAK, same = 1.
1138   3              }
1139   2          }
1140   1      
1141   1          if (extendstatus.field.state == 0)  // 1 means debounce counted out.
1142   1          {
1143   2              if (extendstatus.field.count != 0)
1144   2              {
1145   3                  extendstatus.field.count--;
1146   3              }
1147   2              else
1148   2              {
1149   3                  if (extendstatus.field.same == 0)
1150   3                  {
1151   4                      new_extendkey.byte = 0; // Debounce failed, so claer all data
1152   4                      extendstatus.byte = 0;
1153   4                  }
1154   3                  else
1155   3                  {
1156   4                      extendstatus.field.state = 1;
1157   4                  }
1158   3              }
1159   2          }
1160   1          else
1161   1          {
1162   2              if (extendstatus.field.same == 0)
1163   2              {
1164   3                  new_extendkey.byte = 0;     /* Debounce failed. */
1165   3                  extendstatus.byte = 0;
1166   3              }
1167   2              else
1168   2              {
1169   3                      CheckExtendKeyValid();
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 20  

1170   3              }
1171   2          }
1172   1      }
1173          
1174          
1175          //-----------------------------------------------------------------
1176          // The function of checking extend key valid
1177          //-----------------------------------------------------------------
1178          void CheckExtendKeyValid(void)
1179          {
1180   1          ITempB02 = Byte_Mask((BYTE) (new_extendkey.field.input));
1181   1          ITempB01 = bscan_matrix[(new_extendkey.field.output + STANDARD_SCAN_LINES)];
1182   1          ITempB01 = ITempB01 ^ ITempB02;
1183   1          bscan_matrix[(new_extendkey.field.output + STANDARD_SCAN_LINES)] = ITempB01;
1184   1      
1185   1              ITempB03 = BREAK_EVENT;
1186   1          if ((ITempB02 & ITempB01) != 0)
1187   1          {
1188   2              ITempB03 = MAKE_EVENT;
1189   2              etkeytypematic.byte = new_extendkey.byte;
1190   2              extendscan.TMscale = TM_SCALE;
1191   2              bTMcount = bTMdelay;
1192   2      
1193   2                      typematic.byte = 0x00;
1194   2          }
1195   1      
1196   1          Send_EtScan2(new_extendkey, ITempB03);
1197   1          new_extendkey.byte = 0;
1198   1          extendstatus.byte = 0;
1199   1      }
1200          
1201          //-----------------------------------------------------------------
1202          // The function of
1203          //-----------------------------------------------------------------
1204          void Send_EtScan2(union KEY key, BYTE event)
1205          {
1206   1              if(IS_MASK_SET(UtilityFlag,KBDebug))
1207   1              {
1208   2                      if(KeyScanACK==KU_ACK_Start)
1209   2                      {
1210   3                              if(event==MAKE_EVENT)
1211   3                              {
1212   4                                      KeyScanKSI = key.field.input;
1213   4                                      KeyScanKSO = key.field.output;
1214   4                                      KeyScanACK = KU_ACK_FullKeyboard;
1215   4                              }
1216   3                      }
1217   2              }
1218   1              else
1219   1              {
1220   2              ITempB02 = (key.field.input * 3) + key.field.output;
1221   2              #if SUPPORT_KB_RAM_TABLE
1222   2                      ITempB01 = *(Extendkey_RAM_Pntr + ITempB02);
1223   2                      #else
                              ITempB01 = *(Extendkey_Table_Pntr + ITempB02);
                              #endif
1226   2      
1227   2                      Et_Hook_keyboard(key.field.input, key.field.output);
1228   2              Send_Key(ITempB01, event);
1229   2              }
1230   1      }
1231          
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 21  

1232          //-----------------------------------------------------------------
1233          // The function of clearing extend keys
1234          //-----------------------------------------------------------------
1235          void ClearExtendKeys(void)
1236          {
1237   1              new_extendkey.byte = 0;
1238   1              extendstatus.byte = 0;
1239   1              etkeytypematic.byte = 0;
1240   1      }
1241          
1242          //-----------------------------------------------------------------
1243          // The function of checking extend keys Typematic
1244          //-----------------------------------------------------------------
1245          void CheckEtKeystm(union KEY key)
1246          {
1247   1              ITempB02 = FALSE;
1248   1          ITempB01 = Byte_Mask((BYTE) (key.field.input));
1249   1          ITempB01 = ITempB01 & bscan_matrix[key.field.output+STANDARD_SCAN_LINES];
1250   1      
1251   1          if (ITempB01 == 0)
1252   1          {
1253   2              etkeytypematic.byte = 0;
1254   2              ITempB02 = TRUE;
1255   2          }
1256   1      
1257   1          if (!ITempB02)
1258   1          {
1259   2              extendscan.TMscale--;
1260   2              if (extendscan.TMscale != 0)
1261   2                      {
1262   3                  ITempB02 = TRUE;
1263   3              }
1264   2          }
1265   1      
1266   1          if (!ITempB02)
1267   1          {
1268   2              extendscan.TMscale = TM_SCALE;
1269   2              bTMcount--;
1270   2              if (bTMcount != 0)
1271   2                      {
1272   3                  ITempB02 = TRUE;
1273   3              }
1274   2          }
1275   1      
1276   1          if (!ITempB02)
1277   1          {
1278   2              bTMcount = bTMrepeat;
1279   2              Send_EtScan2(key,REPEAT_EVENT);
1280   2          }
1281   1      }
1282          void S4S5_KeyWake(BYTE  ONEKEY_TYPE)//HEGANGS021:one key wake
1283          {
1284   1              if(Read_YOGA_ID())
1285   1              {
1286   2                      return;
1287   2              }
1288   1              if(IS_MASK_SET(ACPI_HOTKEY, b6Cmd_NoShut))//HEGANGS046:Modify the 5VALW power off if the charge in batter
             -y Mode is disable
1289   1              {
1290   2                      return;
1291   2              }
1292   1              if(IS_MASK_CLEAR(OEMControl,b2ONEKEY_ENABLE))//HEGANGS025: Modify onekey battery function
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 22  

1293   1              {
1294   2                      return;
1295   2              }
1296   1              switch (SysPowState)
1297   1              {
1298   2                      case SYSTEM_S4 :
1299   2                      case SYSTEM_DSX:
1300   2                      case SYSTEM_S5 :
1301   2                      if(!Read_AC_IN()||IS_MASK_SET(ACOFF_SOURCE, BATTLEARN))
1302   2                      {                               
1303   3                              BatSMbusFailCount = 0;
1304   3                              if(!bRWSMBus(SMbusChB, SMbusRW, SmBat_Addr, C_RSOC, &BAT1PERCL,SMBus_NoPEC))
1305   3                              {
1306   4                                      BatSMbusFailCount++;    
1307   4                                      while(BatSMbusFailCount <=4) 
1308   4                                      {               
1309   5                                              if(!bRWSMBus(SMbusChB, SMbusRW, SmBat_Addr, C_RSOC, &BAT1PERCL,SMBus_NoPEC))
1310   5                                              {
1311   6                                                      BatSMbusFailCount++;                                                                             
1312   6                                              }
1313   5                                              else
1314   5                                              {
1315   6                                                      BatSMbusFailCount=0;
1316   6                                                      break;
1317   6                                              }
1318   5                                      }
1319   4                               
1320   4                              }
1321   3                              if(BatSMbusFailCount>=4) 
1322   3                              break;
1323   3      
1324   3                              if (BAT1PERCL < 0x02)  //T064: change 0x05 to 0x00 G23:modify battery capacity point from 0 to 1 for fl
             -iker.
1325   3                              {
1326   4                                      SET_MASK(nBatteryStatL,CMBS_LOWBATT);
1327   4                                      if(!ONEKEY_TYPE)
1328   4                                      LOWBATT_3TIMES = 100;           // set 5 sec
1329   4                                      break;
1330   4                              }
1331   3                      
1332   3                      }
1333   2                      if(IS_MASK_SET(SysStatus2, b3EC8S_Reset))
1334   2                      {
1335   3                              break;
1336   3                      }
1337   2                      PWSeqStep = 1;
1338   2                      PowSeqDelay = 0x00;
1339   2                      uNovoVPCCount = 0;
1340   2                      ONEKEY_FLAG =ONEKEY_TYPE;
1341   2                      ONEKEY_TEMP_FLAG=ONEKEY_TYPE;//HEGANGS025: Modify onekey battery function
1342   2                      RamDebug(0x56);
1343   2                      SysPowState=SYSTEM_S5_S0;
1344   2                      break;
1345   2              }
1346   1              return;
1347   1      
1348   1      }
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 23  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00FD (BEGIN)
0000         L?0254:
0000         L?0255:
0000 AF00        E     MOV     R7,new_keyh
0002         L?0256:
0002 EF                MOV     A,R7
0003         L?0257:
0003 5407              ANL     A,#07H
0005 FF                MOV     R7,A
0006 7401              MOV     A,#01H
0008 C8                XCH     A,R0
0009 EF                MOV     A,R7
000A C8                XCH     A,R0
000B 08                INC     R0
000C 22                RET     
000D         L?0258:
000D 7800        E     MOV     R0,#LOW ?Send_Scan2?BYTE
000F 7C00        E     MOV     R4,#HIGH ?Send_Scan2?BYTE
0011 7D01              MOV     R5,#01H
0013         L?0259:
0013 7E00              MOV     R6,#00H
0015 7F01              MOV     R7,#01H
0017 020000      E     LJMP    ?C?COPY
001A         L?0261:
001A EF                MOV     A,R7
001B C4                SWAP    A
001C 540F              ANL     A,#0FH
001E FE                MOV     R6,A
001F EF                MOV     A,R7
0020 540F              ANL     A,#0FH
0022 FF                MOV     R7,A
0023 EE                MOV     A,R6
0024 14                DEC     A
0025         L?0262:
0025 540F              ANL     A,#0FH
0027 C4                SWAP    A
0028 54F0              ANL     A,#0F0H
002A 4F                ORL     A,R7
002B 22                RET     
002C         L?0263:
002C         L?0264:
002C 900000      E     MOV     DPTR,#KSOL
002F 74FF              MOV     A,#0FFH
0031 F0                MOVX    @DPTR,A
0032 900000      E     MOV     DPTR,#KSOH1
0035 F0                MOVX    @DPTR,A
0036 22                RET     
0037         L?0265:
0037 540F              ANL     A,#0FH
0039 2400        E     ADD     A,#LOW bKEY_BUFF
003B         L?0266:
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        E     ADDC    A,#HIGH bKEY_BUFF
0040 F583              MOV     DPH,A
0042 22                RET     
0043         L?0267:
0043 E500        E     MOV     A,scan+02H
0045 54EF              ANL     A,#0EFH
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 24  

0047 F500        E     MOV     scan+02H,A
0049 54DF              ANL     A,#0DFH
004B F500        E     MOV     scan+02H,A
004D 54BF              ANL     A,#0BFH
004F F500        E     MOV     scan+02H,A
0051 22                RET     
0052         L?0268:
0052 AF00        E     MOV     R7,new_keyl
0054         L?0269:
0054 EF                MOV     A,R7
0055 13                RRC     A
0056 13                RRC     A
0057 13                RRC     A
0058 541F              ANL     A,#01FH
005A 22                RET     
005B         L?0270:
005B C4                SWAP    A
005C 5401              ANL     A,#01H
005E 2F                ADD     A,R7
005F FF                MOV     R7,A
0060 EE                MOV     A,R6
0061 C4                SWAP    A
0062 13                RRC     A
0063 13                RRC     A
0064 5401              ANL     A,#01H
0066 2F                ADD     A,R7
0067 FF                MOV     R7,A
0068 22                RET     
0069         L?0271:
0069 E4                CLR     A
006A 900000      E     MOV     DPTR,#FN_Key_Break
006D F0                MOVX    @DPTR,A
006E 900000      E     MOV     DPTR,#FN_Key_Break_HS
0071 F0                MOVX    @DPTR,A
0072 900000      E     MOV     DPTR,#table_entry_bk
0075 F0                MOVX    @DPTR,A
0076 22                RET     
0077         L?0272:
0077 A3                INC     DPTR
0078         L?0273:
0078 E0                MOVX    A,@DPTR
0079 FD                MOV     R5,A
007A 2400        E     ADD     A,#LOW bscan_matrix
007C F8                MOV     R0,A
007D E6                MOV     A,@R0
007E 22                RET     
007F         L?0274:
007F 2F                ADD     A,R7
0080 F8                MOV     R0,A
0081 E6                MOV     A,@R0
0082 FF                MOV     R7,A
0083 E500        E     MOV     A,ITempB02
0085 F4                CPL     A
0086 6F                XRL     A,R7
0087 F500        E     MOV     ITempB02,A
0089 E500        E     MOV     A,ITempB02
008B 22                RET     
008C         L?0275:
008C AF00        E     MOV     R7,new_keyh
008E EF                MOV     A,R7
008F         L?0276:
008F C4                SWAP    A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 25  

0090 540F              ANL     A,#0FH
0092 2400        E     ADD     A,#LOW bscan_matrix
0094 F8                MOV     R0,A
0095 22                RET     
0096         L?0277:
0096 E4                CLR     A
0097         L?0278:
0097 900000      E     MOV     DPTR,#KSOL
009A F0                MOVX    @DPTR,A
009B 900000      E     MOV     DPTR,#KSOH1
009E 22                RET     
009F         L?0279:
009F AF00        E     MOV     R7,new_extendkey
00A1 EF                MOV     A,R7
00A2         L?0280:
00A2 C4                SWAP    A
00A3 540F              ANL     A,#0FH
00A5 2400        E     ADD     A,#LOW bscan_matrix+010H
00A7 F8                MOV     R0,A
00A8 22                RET     
00A9         L?0281:
00A9 540F              ANL     A,#0FH
00AB C4                SWAP    A
00AC 54F0              ANL     A,#0F0H
00AE FE                MOV     R6,A
00AF ED                MOV     A,R5
00B0 540F              ANL     A,#0FH
00B2 4E                ORL     A,R6
00B3 22                RET     
00B4         L?0282:
00B4 120000      R     LCALL   CapDelay
00B7 900000      E     MOV     DPTR,#KSI
00BA E0                MOVX    A,@DPTR
00BB F500        E     MOV     ITempB02,A
00BD 22                RET     
00BE         L?0283:
00BE         L?0284:
00BE 7401              MOV     A,#01H
00C0 C8                XCH     A,R0
00C1 EF                MOV     A,R7
00C2 C8                XCH     A,R0
00C3 08                INC     R0
00C4 22                RET     
00C5         L?0285:
00C5 900000      E     MOV     DPTR,#bTMdelay
00C8 E0                MOVX    A,@DPTR
00C9 900000      E     MOV     DPTR,#bTMcount
00CC F0                MOVX    @DPTR,A
00CD E4                CLR     A
00CE 22                RET     
00CF         L?0286:
00CF         L?0287:
00CF AE00        E     MOV     R6,scan
00D1 EE                MOV     A,R6
00D2 C4                SWAP    A
00D3 540F              ANL     A,#0FH
00D5 22                RET     
00D6         L?0288:
00D6         L?0289:
00D6 900000      R     MOV     DPTR,#key
00D9 E0                MOVX    A,@DPTR
00DA 5407              ANL     A,#07H
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 26  

00DC 22                RET     
             ; FUNCTION Com00FD (END)

             ; FUNCTION CapDelay (BEGIN)
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#WNCKR
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 19
0005 22                RET     
             ; FUNCTION CapDelay (END)

             ; FUNCTION scan_keys (BEGIN)
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 32
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#result
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
0005 120000      R     LCALL   L?0267
                                           ; SOURCE LINE # 38
0008 E500        E     MOV     A,typematic
000A 6012              JZ      ?C0002
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
000C 7800        R     MOV     R0,#LOW ?check_tm?BYTE
000E 7C00        R     MOV     R4,#HIGH ?check_tm?BYTE
0010 7D01              MOV     R5,#01H
0012 7B00              MOV     R3,#00H
0014 7A00        E     MOV     R2,#HIGH typematic
0016 7900        E     MOV     R1,#LOW typematic
0018 120000      R     LCALL   L?0259
001B 120000      R     LCALL   check_tm
                                           ; SOURCE LINE # 41
001E         ?C0002:
                                           ; SOURCE LINE # 43
001E E500        E     MOV     A,new_keyh
0020 600F              JZ      ?C0003
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0022 E500        E     MOV     A,scan+02H
0024 4410              ORL     A,#010H
0026 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 46
0028 120000      R     LCALL   debounce_key
                                           ; SOURCE LINE # 47
002B 900000      R     MOV     DPTR,#result
002E 7401              MOV     A,#01H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 48
0031         ?C0003:
                                           ; SOURCE LINE # 50
0031 900000      R     MOV     DPTR,#result
0034 E0                MOVX    A,@DPTR
0035 7069              JNZ     ?C0004
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 27  

0037 F500        E     MOV     ITempB03,A
0039         ?C0005:
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0039 AF00        E     MOV     R7,ITempB03
003B 120000      R     LCALL   _Write_Strobe
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
003E 120000      R     LCALL   L?0282
                                           ; SOURCE LINE # 57
0041 AF00        E     MOV     R7,ITempB03
0043 7400        E     MOV     A,#LOW bscan_matrix
                                           ; SOURCE LINE # 58
0045 120000      R     LCALL   L?0274
0048 6007              JZ      ?C0008
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
004A AD00        E     MOV     R5,ITempB03
004C AF00        E     MOV     R7,ITempB02
004E 120000      R     LCALL   _check_scan
                                           ; SOURCE LINE # 61
0051         ?C0008:
                                           ; SOURCE LINE # 63
0051 AF00        E     MOV     R7,ITempB03
0053 7400        E     MOV     A,#LOW bscan_matrix
0055 2F                ADD     A,R7
0056 F8                MOV     R0,A
0057 E6                MOV     A,@R0
0058 6006              JZ      ?C0009
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
005A E500        E     MOV     A,scan+02H
005C 4440              ORL     A,#040H
005E F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 66
0060         ?C0009:
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
0060 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 69
0063 900000      E     MOV     DPTR,#KSOH2
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0067 0500        E     INC     ITempB03
0069 E500        E     MOV     A,ITempB03
006B C3                CLR     C
006C 9410              SUBB    A,#010H
006E 40C9              JC      ?C0005
0070         ?C0006:
                                           ; SOURCE LINE # 72
0070 120000      R     LCALL   L?0268
0073 30E02A            JNB     ACC.0,?C0004
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
0076 AF00        E     MOV     R7,new_keyl
0078 EF                MOV     A,R7
0079 54F7              ANL     A,#0F7H
007B F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 75
007D E500        E     MOV     A,new_keyl
007F 5407              ANL     A,#07H
0081 F500        E     MOV     ITempB01,A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 28  

                                           ; SOURCE LINE # 76
0083 E500        E     MOV     A,ITempB01
0085 7011              JNZ     ?C0011
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
0087 120000      R     LCALL   L?0254
008A 8002              SJMP    ?C0214
008C         ?C0213:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0214:
008E D8FC              DJNZ    R0,?C0213
0090 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 79
0092 900000      E     MOV     DPTR,#diode_key
0095 E0                MOVX    A,@DPTR
0096 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 80
0098         ?C0011:
                                           ; SOURCE LINE # 82
0098 E500        E     MOV     A,ITempB01
009A 7004              JNZ     ?C0004
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
009C F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 85
009E F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
00A0         ?C0004:
                                           ; SOURCE LINE # 90
00A0 AF00        E     MOV     R7,scan+02H
00A2 EF                MOV     A,R7
00A3 C4                SWAP    A
00A4 13                RRC     A
00A5 5401              ANL     A,#01H
00A7 FF                MOV     R7,A
00A8 AE00        E     MOV     R6,scan+02H
00AA EE                MOV     A,R6
00AB AE00        E     MOV     R6,scan+02H
00AD 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 91
00B0         ?C0013:
00B0 22                RET     
             ; FUNCTION scan_keys (END)

             ; FUNCTION _Write_Strobe (BEGIN)
                                           ; SOURCE LINE # 109
;---- Variable 'scan_line_num' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9408              SUBB    A,#08H
0004 5012              JNC     ?C0014
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
0006 120000      R     LCALL   L?0283
0009 8002              SJMP    ?C0216
000B         ?C0215:
000B C3                CLR     C
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 29  

000C 33                RLC     A
000D         ?C0216:
000D D8FC              DJNZ    R0,?C0215
000F F4                CPL     A
                                           ; SOURCE LINE # 114
0010 120000      R     LCALL   L?0278
0013 74FF              MOV     A,#0FFH
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0016 8018              SJMP    ?C0015
0018         ?C0014:
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0018 900000      E     MOV     DPTR,#KSOL
001B 74FF              MOV     A,#0FFH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
001E EF                MOV     A,R7
001F 24F8              ADD     A,#0F8H
0021 FF                MOV     R7,A
0022 120000      R     LCALL   L?0283
0025 8002              SJMP    ?C0218
0027         ?C0217:
0027 C3                CLR     C
0028 33                RLC     A
0029         ?C0218:
0029 D8FC              DJNZ    R0,?C0217
002B F4                CPL     A
002C 900000      E     MOV     DPTR,#KSOH1
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0030         ?C0015:
                                           ; SOURCE LINE # 122
0030 300009      E     JNB     ExtendMatrix,?C0017
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
0033 900000      E     MOV     DPTR,#KSOH2
0036 74FF              MOV     A,#0FFH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
0039 120000      E     LCALL   Hook_SetGPIOScanPinH
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
003C         ?C0017:
003C 22                RET     
             ; FUNCTION _Write_Strobe (END)

             ; FUNCTION _check_scan (BEGIN)
                                           ; SOURCE LINE # 143
0000 900000      R     MOV     DPTR,#changes
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 149
0008 E4                CLR     A
0009 A3                INC     DPTR
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
000B 120000      R     LCALL   L?0268
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 30  

000E 30E002            JNB     ACC.0,?C0018
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0011 801F              SJMP    ?C0242
0013         ?C0018:
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0013 900000      R     MOV     DPTR,#scan_address
0016 120000      R     LCALL   L?0273
0019 F4                CPL     A
001A FF                MOV     R7,A
001B 900000      R     MOV     DPTR,#changes
001E E0                MOVX    A,@DPTR
001F 5F                ANL     A,R7
0020 FF                MOV     R7,A
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 157
0021 7006              JNZ     ?C0020
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
0023 900000      R     MOV     DPTR,#flag
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0027 800C              SJMP    ?C0019
0029         ?C0020:
                                           ; SOURCE LINE # 161
0029 120000      R     LCALL   _find_paths
002C EF                MOV     A,R7
002D 6006              JZ      ?C0019
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
002F 900000      R     MOV     DPTR,#flag
0032         ?C0242:
0032 7401              MOV     A,#01H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0035         ?C0019:
                                           ; SOURCE LINE # 167
0035 900000      R     MOV     DPTR,#flag
0038 E0                MOVX    A,@DPTR
0039 601F              JZ      ?C0023
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
003B AF00        E     MOV     R7,new_keyl
003D EF                MOV     A,R7
003E 4408              ORL     A,#08H
0040 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 171
0042 900000      R     MOV     DPTR,#changes
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 2400        E     ADD     A,#LOW bscan_matrix
004B F8                MOV     R0,A
004C E6                MOV     A,@R0
004D FE                MOV     R6,A
004E 900000      E     MOV     DPTR,#diode_key
0051 E0                MOVX    A,@DPTR
0052 4E                ORL     A,R6
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 31  

0053 FE                MOV     R6,A
0054 EF                MOV     A,R7
0055 5E                ANL     A,R6
0056 900000      R     MOV     DPTR,#changes
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
005A         ?C0023:
                                           ; SOURCE LINE # 174
005A E4                CLR     A
005B 900000      R     MOV     DPTR,#bit_num
005E F0                MOVX    @DPTR,A
005F         ?C0024:
                                           ; SOURCE LINE # 175
005F 900000      R     MOV     DPTR,#changes
0062 E0                MOVX    A,@DPTR
0063 601F              JZ      ?C0027
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0065 30E00D            JNB     ACC.0,?C0026
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0068 900000      R     MOV     DPTR,#bit_num
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#scan_address
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 120000      R     LCALL   _cscfnd
                                           ; SOURCE LINE # 180
0075         ?C0026:
                                           ; SOURCE LINE # 181
0075 900000      R     MOV     DPTR,#bit_num
0078 E0                MOVX    A,@DPTR
0079 04                INC     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
007B 900000      R     MOV     DPTR,#changes
007E E0                MOVX    A,@DPTR
007F C3                CLR     C
0080 13                RRC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0082 80DB              SJMP    ?C0024
                                           ; SOURCE LINE # 184
0084         ?C0027:
0084 22                RET     
             ; FUNCTION _check_scan (END)

             ; FUNCTION _cscfnd (BEGIN)
                                           ; SOURCE LINE # 192
0000 900000      R     MOV     DPTR,#bit_num
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0008 120000      R     LCALL   L?0273
000B FB                MOV     R3,A
000C 7A00              MOV     R2,#00H
000E 900000      R     MOV     DPTR,#bit_num
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 32  

0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 7401              MOV     A,#01H
0015 7E00              MOV     R6,#00H
0017 C8                XCH     A,R0
0018 EC                MOV     A,R4
0019 C8                XCH     A,R0
001A 08                INC     R0
001B 8005              SJMP    ?C0220
001D         ?C0219:
001D C3                CLR     C
001E 33                RLC     A
001F CE                XCH     A,R6
0020 33                RLC     A
0021 CE                XCH     A,R6
0022         ?C0220:
0022 D8F9              DJNZ    R0,?C0219
0024 FF                MOV     R7,A
0025 EE                MOV     A,R6
0026 5A                ANL     A,R2
0027 FE                MOV     R6,A
0028 EF                MOV     A,R7
0029 5B                ANL     A,R3
002A 4E                ORL     A,R6
002B 6016              JZ      ?C0028
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
002D AF00        E     MOV     R7,scan+02H
002F EF                MOV     A,R7
0030 C4                SWAP    A
0031 13                RRC     A
0032 5407              ANL     A,#07H
0034 20E027            JB      ACC.0,?C0032
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0037 EF                MOV     A,R7
0038 4420              ORL     A,#020H
003A F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 199
003C CF                XCH     A,R7
003D EC                MOV     A,R4
003E CF                XCH     A,R7
003F 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0041 8018              SJMP    ?C0243
0043         ?C0028:
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0043 AF00        E     MOV     R7,scan+02H
0045 EF                MOV     A,R7
0046 C4                SWAP    A
0047 540F              ANL     A,#0FH
0049 20E012            JB      ACC.0,?C0032
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
004C EF                MOV     A,R7
004D 4410              ORL     A,#010H
004F F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 207
0051 900000      R     MOV     DPTR,#bit_num
0054 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 33  

0055 FF                MOV     R7,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FD                MOV     R5,A
0059 E4                CLR     A
005A FB                MOV     R3,A
005B         ?C0243:
005B 120000      R     LCALL   _setup_debounce
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
005E         ?C0032:
005E 22                RET     
             ; FUNCTION _cscfnd (END)

             ; FUNCTION _setup_debounce (BEGIN)
                                           ; SOURCE LINE # 220
;---- Variable 'bit_num' assigned to Register 'R7' ----
;---- Variable 'event' assigned to Register 'R3' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0000 ED                MOV     A,R5
0001 AD00        E     MOV     R5,new_keyh
0003 120000      R     LCALL   L?0281
0006 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 223
0008 EF                MOV     A,R7
0009 5407              ANL     A,#07H
000B FF                MOV     R7,A
000C AE00        E     MOV     R6,new_keyh
000E EE                MOV     A,R6
000F 54F8              ANL     A,#0F8H
0011 4F                ORL     A,R7
0012 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 224
0014 AF00        E     MOV     R7,new_keyh
0016 EF                MOV     A,R7
0017 4408              ORL     A,#08H
0019 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 225
001B AF00        E     MOV     R7,new_keyl
001D EF                MOV     A,R7
001E 54FE              ANL     A,#0FEH
0020 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 226
0022 AF00        E     MOV     R7,new_keyl
0024 EF                MOV     A,R7
0025 54EF              ANL     A,#0EFH
0027 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 228
0029 EB                MOV     A,R3
002A AF00        E     MOV     R7,new_keyl
002C 700F              JNZ     ?C0033
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
002E EF                MOV     A,R7
002F 54FD              ANL     A,#0FDH
0031 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 231
0033 7800        E     MOV     R0,#LOW Ext_Cb2
0035 E6                MOV     A,@R0
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 34  

0036 540E              ANL     A,#0EH
0038 C4                SWAP    A
0039 54F0              ANL     A,#0F0H
                                           ; SOURCE LINE # 232
003B 800A              SJMP    ?C0244
003D         ?C0033:
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
003D EF                MOV     A,R7
003E 4402              ORL     A,#02H
0040 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 236
0042 7800        E     MOV     R0,#LOW Ext_Cb2
0044 E6                MOV     A,@R0
0045 54E0              ANL     A,#0E0H
0047         ?C0244:
0047 FF                MOV     R7,A
0048 AE00        E     MOV     R6,new_keyl
004A EE                MOV     A,R6
004B 541F              ANL     A,#01FH
004D 4F                ORL     A,R7
004E F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0050         ?C0035:
0050 22                RET     
             ; FUNCTION _setup_debounce (END)

             ; FUNCTION _find_paths (BEGIN)
                                           ; SOURCE LINE # 248
;---- Variable 'temp' assigned to Register 'R6' ----
;---- Variable 'paths' assigned to Register 'R4' ----
;---- Variable 'bits' assigned to Register 'R1' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 258
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#done
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0005 900000      R     MOV     DPTR,#paths_found
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
0009 900000      R     MOV     DPTR,#first_address
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
000E 900000      E     MOV     DPTR,#diode_key
0011 E0                MOVX    A,@DPTR
0012 F4                CPL     A
0013 5F                ANL     A,R7
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 265
0015 7005              JNZ     ?C0036
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0017 900000      R     MOV     DPTR,#done
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
001C         ?C0036:
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 35  

                                           ; SOURCE LINE # 270
001C 900000      R     MOV     DPTR,#done
001F E0                MOVX    A,@DPTR
0020 7015              JNZ     ?C0039
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
0022 7400        E     MOV     A,#LOW bscan_matrix
0024 2D                ADD     A,R5
0025 F8                MOV     R0,A
0026 E6                MOV     A,@R0
0027 4F                ORL     A,R7
0028 FC                MOV     R4,A
                                           ; SOURCE LINE # 273
0029 900000      E     MOV     DPTR,#diode_key
002C E0                MOVX    A,@DPTR
002D F4                CPL     A
002E 5C                ANL     A,R4
002F FC                MOV     R4,A
                                           ; SOURCE LINE # 275
0030 7005              JNZ     ?C0039
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
0032 900000      R     MOV     DPTR,#done
0035 04                INC     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0037         ?C0039:
                                           ; SOURCE LINE # 281
0037 900000      R     MOV     DPTR,#done
003A E0                MOVX    A,@DPTR
003B 705E              JNZ     ?C0040
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
003D 0D                INC     R5
                                           ; SOURCE LINE # 285
003E ED                MOV     A,R5
003F C3                CLR     C
0040 9413              SUBB    A,#013H
0042 4002              JC      ?C0041
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0044 E4                CLR     A
0045 FD                MOV     R5,A
                                           ; SOURCE LINE # 289
0046         ?C0041:
                                           ; SOURCE LINE # 291
0046 900000      R     MOV     DPTR,#first_address
0049 E0                MOVX    A,@DPTR
004A 6D                XRL     A,R5
004B 7005              JNZ     ?C0042
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
004D 900000      R     MOV     DPTR,#done
0050 04                INC     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0052         ?C0042:
                                           ; SOURCE LINE # 296
0052 900000      R     MOV     DPTR,#done
0055 E0                MOVX    A,@DPTR
0056 70DF              JNZ     ?C0039
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 36  

                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0058 7400        E     MOV     A,#LOW bscan_matrix
005A 2D                ADD     A,R5
005B F8                MOV     R0,A
005C E6                MOV     A,@R0
005D FE                MOV     R6,A
                                           ; SOURCE LINE # 299
005E 900000      E     MOV     DPTR,#diode_key
0061 E0                MOVX    A,@DPTR
0062 F4                CPL     A
0063 5E                ANL     A,R6
0064 FE                MOV     R6,A
                                           ; SOURCE LINE # 301
0065 6002              JZ      ?C0044
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
0067 5C                ANL     A,R4
0068 FE                MOV     R6,A
                                           ; SOURCE LINE # 304
0069         ?C0044:
                                           ; SOURCE LINE # 306
0069 EE                MOV     A,R6
006A 60CB              JZ      ?C0039
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
006C 6F                XRL     A,R7
006D 6008              JZ      ?C0046
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
006F 900000      R     MOV     DPTR,#paths_found
0072 7401              MOV     A,#01H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
0075 A3                INC     DPTR
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0077         ?C0046:
                                           ; SOURCE LINE # 314
0077 900000      R     MOV     DPTR,#done
007A E0                MOVX    A,@DPTR
007B 70BA              JNZ     ?C0039
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 320
007D C9                XCH     A,R1
007E EC                MOV     A,R4
007F C9                XCH     A,R1
                                           ; SOURCE LINE # 321
0080 FE                MOV     R6,A
0081         ?C0050:
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0081 E9                MOV     A,R1
0082 30E002            JNB     ACC.0,?C0051
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
0085 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 328
0087         ?C0051:
                                           ; SOURCE LINE # 331
0087 E9                MOV     A,R1
0088 C3                CLR     C
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 37  

0089 13                RRC     A
008A F9                MOV     R1,A
                                           ; SOURCE LINE # 332
008B EE                MOV     A,R6
008C 60F3              JZ      ?C0050
                                           ; SOURCE LINE # 334
008E E9                MOV     A,R1
008F 60A6              JZ      ?C0039
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0091 900000      R     MOV     DPTR,#paths_found
0094 7401              MOV     A,#01H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
0097 A3                INC     DPTR
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
0099 809C              SJMP    ?C0039
009B         ?C0040:
                                           ; SOURCE LINE # 344
009B 900000      R     MOV     DPTR,#paths_found
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
                                           ; SOURCE LINE # 345
00A0         ?C0053:
00A0 22                RET     
             ; FUNCTION _find_paths (END)

             ; FUNCTION debounce_key (BEGIN)
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
0000 AF00        E     MOV     R7,new_keyh
0002 EF                MOV     A,R7
0003 54F0              ANL     A,#0F0H
0005 C4                SWAP    A
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
0009 E500        E     MOV     A,scan+02H
000B 54F0              ANL     A,#0F0H
000D 4F                ORL     A,R7
000E F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 353
0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _Write_Strobe
                                           ; SOURCE LINE # 354
0016 120000      R     LCALL   CapDelay
                                           ; SOURCE LINE # 355
0019 120000      R     LCALL   Read_Scan_Lines
001C 8F00        E     MOV     ITempB01,R7
                                           ; SOURCE LINE # 356
001E 6300FF      E     XRL     ITempB01,#0FFH
                                           ; SOURCE LINE # 358
0021 120000      R     LCALL   L?0254
0024 8002              SJMP    ?C0222
0026         ?C0221:
0026 C3                CLR     C
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 38  

0027 33                RLC     A
0028         ?C0222:
0028 D8FC              DJNZ    R0,?C0221
002A F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 359
002C E500        E     MOV     A,ITempB01
002E 5200        E     ANL     ITempB02,A
                                           ; SOURCE LINE # 361
0030 E500        E     MOV     A,ITempB02
0032 600C              JZ      ?C0054
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0034 AF00        E     MOV     R7,new_keyl
0036 EF                MOV     A,R7
0037 C3                CLR     C
0038 13                RRC     A
0039 AF00        E     MOV     R7,new_keyl
003B 20E00C            JB      ACC.0,?C0246
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
003E 8011              SJMP    ?C0245
0040         ?C0054:
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
0040 AF00        E     MOV     R7,new_keyl
0042 EF                MOV     A,R7
0043 C3                CLR     C
0044 13                RRC     A
0045 AF00        E     MOV     R7,new_keyl
0047 20E007            JB      ACC.0,?C0058
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
004A         ?C0246:
004A EF                MOV     A,R7
004B 54EF              ANL     A,#0EFH
004D F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 377
004F 8005              SJMP    ?C0057
0051         ?C0058:
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
0051         ?C0245:
0051 EF                MOV     A,R7
0052 4410              ORL     A,#010H
0054 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
0056         ?C0057:
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0056 AF00        E     MOV     R7,new_keyl
0058 EF                MOV     A,R7
0059 C4                SWAP    A
005A 540F              ANL     A,#0FH
005C 20E006            JB      ACC.0,?C0060
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
005F E4                CLR     A
0060 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 409
0062 F500        E     MOV     new_keyl,A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 39  

                                           ; SOURCE LINE # 410
0064 22                RET     
0065         ?C0060:
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
0065 120000      R     LCALL   change_valid
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
0068         ?C0062:
0068 22                RET     
             ; FUNCTION debounce_key (END)

             ; FUNCTION Read_Scan_Lines (BEGIN)
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0000 900000      E     MOV     DPTR,#KSI
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 429
0005         ?C0063:
0005 22                RET     
             ; FUNCTION Read_Scan_Lines (END)

             ; FUNCTION change_valid (BEGIN)
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0000 120000      R     LCALL   L?0255
0003 8002              SJMP    ?C0224
0005         ?C0223:
0005 C3                CLR     C
0006 33                RLC     A
0007         ?C0224:
0007 D8FC              DJNZ    R0,?C0223
0009 F500        E     MOV     ITempB04,A
                                           ; SOURCE LINE # 437
000B 120000      R     LCALL   L?0275
000E E6                MOV     A,@R0
000F F500        E     MOV     ITempB03,A
                                           ; SOURCE LINE # 438
0011 E500        E     MOV     A,ITempB04
0013 6200        E     XRL     ITempB03,A
                                           ; SOURCE LINE # 439
0015 120000      R     LCALL   L?0275
0018 A600        E     MOV     @R0,ITempB03
                                           ; SOURCE LINE # 441
001A 750001      E     MOV     ITempB05,#01H
                                           ; SOURCE LINE # 442
001D E500        E     MOV     A,ITempB04
001F 5500        E     ANL     A,ITempB03
0021 6013              JZ      ?C0064
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
0023 E4                CLR     A
0024 F500        E     MOV     ITempB05,A
                                           ; SOURCE LINE # 445
0026 850000      E     MOV     typematic,new_keyh
                                           ; SOURCE LINE # 446
0029 E500        E     MOV     A,scan+01H
002B 540F              ANL     A,#0FH
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 40  

002D 4420              ORL     A,#020H
002F F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 449
0031 120000      R     LCALL   L?0285
0034 F500        E     MOV     etkeytypematic,A
                                           ; SOURCE LINE # 450
0036         ?C0064:
                                           ; SOURCE LINE # 452
0036 7B00              MOV     R3,#00H
0038 7A00        E     MOV     R2,#HIGH new_keyh
003A 7900        E     MOV     R1,#LOW new_keyh
003C 120000      R     LCALL   L?0258
003F 900000      E     MOV     DPTR,#?Send_Scan2?BYTE+01H
0042 E500        E     MOV     A,ITempB05
0044 F0                MOVX    @DPTR,A
0045 120000      E     LCALL   Send_Scan2
                                           ; SOURCE LINE # 453
0048 E4                CLR     A
0049 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 454
004B F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 455
004D 22                RET     
             ; FUNCTION change_valid (END)

             ; FUNCTION check_tm (BEGIN)
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
0000 E4                CLR     A
0001 F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 465
0003 900000      R     MOV     DPTR,#key
0006 E0                MOVX    A,@DPTR
0007 120000      R     LCALL   L?0257
000A 8002              SJMP    ?C0226
000C         ?C0225:
000C C3                CLR     C
000D 33                RLC     A
000E         ?C0226:
000E D8FC              DJNZ    R0,?C0225
0010 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 466
0012 900000      R     MOV     DPTR,#key
0015 E0                MOVX    A,@DPTR
0016 120000      R     LCALL   L?0276
0019 E6                MOV     A,@R0
001A 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 468
001C E500        E     MOV     A,ITempB01
001E 7005              JNZ     ?C0066
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
0020 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 471
0022 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 472
0025         ?C0066:
                                           ; SOURCE LINE # 474
0025 E500        E     MOV     A,ITempB02
0027 700F              JNZ     ?C0067
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 41  

                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
0029 AF00        E     MOV     R7,scan+01H
002B 120000      R     LCALL   L?0261
002E F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 477
0030 C4                SWAP    A
0031 540F              ANL     A,#0FH
0033 6003              JZ      ?C0067
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
0035 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
0038         ?C0067:
                                           ; SOURCE LINE # 483
0038 E500        E     MOV     A,ITempB02
003A 7014              JNZ     ?C0069
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
003C E500        E     MOV     A,scan+01H
003E 540F              ANL     A,#0FH
0040 4420              ORL     A,#020H
0042 F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 486
0044 900000      E     MOV     DPTR,#bTMcount
0047 E0                MOVX    A,@DPTR
0048 14                DEC     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
004A E0                MOVX    A,@DPTR
004B 6003              JZ      ?C0069
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
004D 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
0050         ?C0069:
                                           ; SOURCE LINE # 493
0050 E500        E     MOV     A,ITempB02
0052 701A              JNZ     ?C0072
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
0054 900000      E     MOV     DPTR,#bTMrepeat
0057 E0                MOVX    A,@DPTR
0058 900000      E     MOV     DPTR,#bTMcount
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
005C 7B01              MOV     R3,#01H
005E 7A00        R     MOV     R2,#HIGH key
0060 7900        R     MOV     R1,#LOW key
0062 120000      R     LCALL   L?0258
0065 900000      E     MOV     DPTR,#?Send_Scan2?BYTE+01H
0068 7402              MOV     A,#02H
006A F0                MOVX    @DPTR,A
006B 120000      E     LCALL   Send_Scan2
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
006E         ?C0072:
006E 22                RET     
             ; FUNCTION check_tm (END)

C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 42  

             ; FUNCTION Scan_Init (BEGIN)
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
0000 120000      R     LCALL   L?0277
0003 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0004 30000A      E     JNB     ExtendMatrix,?C0074
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
0007 900000      E     MOV     DPTR,#KSOH2
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
000B 120000      E     LCALL   Hook_SetGPIOScanPinCtrl
                                           ; SOURCE LINE # 513
000E 120000      E     LCALL   Hook_SetGPIOScanPinL
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
0011         ?C0074:
0011 22                RET     
             ; FUNCTION Scan_Init (END)

             ; FUNCTION Enable_Any_Key_Irq (BEGIN)
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
0000 120000      R     LCALL   L?0277
0003 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
0004 300007      E     JNB     ExtendMatrix,?C0075
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
0007 900000      E     MOV     DPTR,#KSOH2
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
000B 120000      E     LCALL   Hook_SetGPIOScanPinL
                                           ; SOURCE LINE # 539
000E         ?C0075:
                                           ; SOURCE LINE # 540
000E 900000      E     MOV     DPTR,#IER1
0011 E0                MOVX    A,@DPTR
0012 4408              ORL     A,#08H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
0015 22                RET     
             ; FUNCTION Enable_Any_Key_Irq (END)

             ; FUNCTION Start_Scan_Transmission (BEGIN)
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 556
0000 020000      E     LJMP    SetServiceSendFlag
             ; FUNCTION Start_Scan_Transmission (END)

             ; FUNCTION Check_Scan_Transmission (BEGIN)
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#allow_transmission
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 43  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
0005 7800        E     MOV     R0,#LOW Int_Var
0007 E6                MOV     A,@R0
0008 C4                SWAP    A
0009 13                RRC     A
000A 13                RRC     A
000B 13                RRC     A
000C 5401              ANL     A,#01H
000E 20E017            JB      ACC.0,?C0078
0011 7800        E     MOV     R0,#LOW Flag
0013 E6                MOV     A,@R0
0014 20E011            JB      ACC.0,?C0078
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 573
0017 AF00        E     MOV     R7,scan
0019 EF                MOV     A,R7
001A C4                SWAP    A
001B 540F              ANL     A,#0FH
001D FF                MOV     R7,A
001E E500        E     MOV     A,scan
0020 540F              ANL     A,#0FH
0022 6F                XRL     A,R7
0023 6003              JZ      ?C0078
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0025 7401              MOV     A,#01H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
0028         ?C0078:
                                           ; SOURCE LINE # 579
0028 900000      R     MOV     DPTR,#allow_transmission
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
                                           ; SOURCE LINE # 580
002D         ?C0080:
002D 22                RET     
             ; FUNCTION Check_Scan_Transmission (END)

             ; FUNCTION Get_Kbd_Type (BEGIN)
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
0000 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0002         ?C0082:
0002 22                RET     
             ; FUNCTION Get_Kbd_Type (END)

             ; FUNCTION Lock_Scan (BEGIN)
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 610
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 44  

0003 4480              ORL     A,#080H
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 612
0006 22                RET     
             ; FUNCTION Lock_Scan (END)

             ; FUNCTION Unlock_Scan (BEGIN)
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
                                           ; SOURCE LINE # 619
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 547F              ANL     A,#07FH
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 620
0006 22                RET     
             ; FUNCTION Unlock_Scan (END)

             ; FUNCTION CheckKSO1617Support (BEGIN)
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#ExtendScanPin
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
0005 900000      E     MOV     DPTR,#GPCRC3
0008 E0                MOVX    A,@DPTR
0009 54FB              ANL     A,#0FBH
000B 7006              JNZ     ?C0086
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
000D 900000      E     MOV     DPTR,#ExtendScanPin
0010 E0                MOVX    A,@DPTR
0011 04                INC     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
0013         ?C0086:
                                           ; SOURCE LINE # 631
0013 900000      E     MOV     DPTR,#GPCRC5
0016 E0                MOVX    A,@DPTR
0017 54FB              ANL     A,#0FBH
0019 7006              JNZ     ?C0087
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
001B 900000      E     MOV     DPTR,#ExtendScanPin
001E E0                MOVX    A,@DPTR
001F 04                INC     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 634
0021         ?C0087:
                                           ; SOURCE LINE # 636
0021 900000      E     MOV     DPTR,#ExtendScanPin
0024 E0                MOVX    A,@DPTR
0025 6004              JZ      ?C0088
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 638
0027 D200        E     SETB    ExtendMatrix
                                           ; SOURCE LINE # 639
0029 8002              SJMP    ?C0089
002B         ?C0088:
                                           ; SOURCE LINE # 641
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 45  

                                           ; SOURCE LINE # 642
002B C200        E     CLR     ExtendMatrix
                                           ; SOURCE LINE # 643
002D         ?C0089:
                                           ; SOURCE LINE # 645
002D 900000      E     MOV     DPTR,#GPCRC3
0030 7404              MOV     A,#04H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 646
0033 900000      E     MOV     DPTR,#GPCRC5
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
0037 22                RET     
             ; FUNCTION CheckKSO1617Support (END)

             ; FUNCTION Init_Kbd (BEGIN)
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 656
0000 120000      R     LCALL   Scan_Init
                                           ; SOURCE LINE # 658
0003 120000      E     LCALL   Hook_Setup_Scanner_Pntr
                                           ; SOURCE LINE # 659
0006 120000      R     LCALL   Setup_Diode_Key
                                           ; SOURCE LINE # 661
0009 E4                CLR     A
000A F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 662
000C F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 664
000E 120000      R     LCALL   ClearExtendKeys
                                           ; SOURCE LINE # 666
0011 120000      E     LCALL   Clear_Fn_Keys
                                           ; SOURCE LINE # 667
0014 120000      R     LCALL   Clear_Key
                                           ; SOURCE LINE # 668
0017 120000      R     LCALL   Clear_Typematic
                                           ; SOURCE LINE # 670
001A 120000      R     LCALL   Enable_Any_Key_Irq
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
001D 120000      R     LCALL   L?0271
                                           ; SOURCE LINE # 679
0020 22                RET     
             ; FUNCTION Init_Kbd (END)

             ; FUNCTION Setup_Diode_Key (BEGIN)
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 689
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#diode_key
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
0005         ?C0094:
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 46  

0005 22                RET     
             ; FUNCTION Setup_Diode_Key (END)

             ; FUNCTION Clear_Key (BEGIN)
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 706
;---- Variable 'i' assigned to Register 'R7' ----
0000         ?C0095:
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 708
0000 7F13              MOV     R7,#013H
0002 7800        E     MOV     R0,#LOW bscan_matrix
0004 E4                CLR     A
0005         ?C0227:
0005 F6                MOV     @R0,A
0006 08                INC     R0
0007 DFFC              DJNZ    R7,?C0227
                                           ; SOURCE LINE # 709
0009         ?C0096:
                                           ; SOURCE LINE # 711
0009         ?C0098:
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
0009 7F10              MOV     R7,#010H
000B 900000      E     MOV     DPTR,#bKEY_BUFF
000E E4                CLR     A
000F         ?C0228:
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 DFFC              DJNZ    R7,?C0228
                                           ; SOURCE LINE # 714
0013         ?C0099:
                                           ; SOURCE LINE # 716
0013 E500        E     MOV     A,scan
0015 54F0              ANL     A,#0F0H
0017 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 717
0019 540F              ANL     A,#0FH
001B F500        E     MOV     scan,A
                                           ; SOURCE LINE # 718
001D E4                CLR     A
001E F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
0020 120000      R     LCALL   L?0267
                                           ; SOURCE LINE # 722
0023 54F0              ANL     A,#0F0H
0025 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 723
0027 22                RET     
             ; FUNCTION Clear_Key (END)

             ; FUNCTION Clear_Typematic (BEGIN)
                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
0000 E4                CLR     A
0001 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 732
0003 900000      E     MOV     DPTR,#bTMdelay
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 47  

0006 743C              MOV     A,#03CH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
0009 900000      E     MOV     DPTR,#bTMrepeat
000C 7403              MOV     A,#03H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 734
000F 22                RET     
             ; FUNCTION Clear_Typematic (END)

             ; FUNCTION _Set_Typematic (BEGIN)
                                           ; SOURCE LINE # 757
0000 900000      R     MOV     DPTR,#type_rate
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
0008 900000      R     MOV     DPTR,#type_rate
000B E0                MOVX    A,@DPTR
000C A3                INC     DPTR
000D E0                MOVX    A,@DPTR
000E 7800        E     MOV     R0,#LOW Save_Typematic
0010 F6                MOV     @R0,A
                                           ; SOURCE LINE # 762
0011 7E00              MOV     R6,#00H
0013 900000      R     MOV     DPTR,#type_rate+01H
0016 E0                MOVX    A,@DPTR
0017 541F              ANL     A,#01FH
0019 2400        R     ADD     A,#LOW repeat_tbl
001B F582              MOV     DPL,A
001D EE                MOV     A,R6
001E 3400        R     ADDC    A,#HIGH repeat_tbl
0020 F583              MOV     DPH,A
0022 E4                CLR     A
0023 93                MOVC    A,@A+DPTR
0024 900000      E     MOV     DPTR,#bTMrepeat
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
0028 900000      R     MOV     DPTR,#type_rate
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F 7805              MOV     R0,#05H
0031         ?C0229:
0031 CE                XCH     A,R6
0032 C3                CLR     C
0033 13                RRC     A
0034 CE                XCH     A,R6
0035 13                RRC     A
0036 D8F9              DJNZ    R0,?C0229
0038 7E00              MOV     R6,#00H
003A 5403              ANL     A,#03H
003C 2400        R     ADD     A,#LOW delay_tbl
003E F582              MOV     DPL,A
0040 EE                MOV     A,R6
0041 3400        R     ADDC    A,#HIGH delay_tbl
0043 F583              MOV     DPH,A
0045 E4                CLR     A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 48  

0046 93                MOVC    A,@A+DPTR
0047 900000      E     MOV     DPTR,#bTMdelay
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
004B 22                RET     
             ; FUNCTION _Set_Typematic (END)

             ; FUNCTION service_scan (BEGIN)
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 776
0000 AF00        E     MOV     R7,Timer_A
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 20E007            JB      ACC.0,?C0104
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
0009 AF00        E     MOV     R7,Timer_A
000B EF                MOV     A,R7
000C 4410              ORL     A,#010H
000E F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 779
0010         ?C0104:
                                           ; SOURCE LINE # 781
0010 900000      E     MOV     DPTR,#pDevStatus1
0013 E0                MOVX    A,@DPTR
0014 30E203            JNB     ACC.2,?C0105
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
0017 C200        E     CLR     F_Service_KEY
0019 22                RET     
                                           ; SOURCE LINE # 785
001A         ?C0105:
                                           ; SOURCE LINE # 786
001A 900000      E     MOV     DPTR,#GPDRB
001D E0                MOVX    A,@DPTR
001E 30E103            JNB     ACC.1,?C0108
0021 D3                SETB    C
0022 8001              SJMP    ?C0109
0024         ?C0108:
0024 C3                CLR     C
0025         ?C0109:
0025 4003              JC      ?C0107
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
0027 C200        E     CLR     F_Service_KEY
0029 22                RET     
                                           ; SOURCE LINE # 790
002A         ?C0107:
                                           ; SOURCE LINE # 793
002A 300012      E     JNB     ExtendMatrix,?C0110
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
002D 120000      R     LCALL   bScanExtendKeys
0030 EF                MOV     A,R7
0031 C0E0              PUSH    ACC
0033 120000      R     LCALL   scan_keys
0036 D0E0              POP     ACC
0038 4F                ORL     A,R7
0039 900000      R     MOV     DPTR,#scan_activity
003C F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 49  

                                           ; SOURCE LINE # 796
003D 8008              SJMP    ?C0111
003F         ?C0110:
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
003F 120000      R     LCALL   scan_keys
0042 900000      R     MOV     DPTR,#scan_activity
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 800
0047         ?C0111:
                                           ; SOURCE LINE # 802
0047 900000      R     MOV     DPTR,#scan_activity
004A E0                MOVX    A,@DPTR
004B 6040              JZ      ?C0112
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 805
004D 900000      E     MOV     DPTR,#SysPowState
0050 E0                MOVX    A,@DPTR
0051 6433              XRL     A,#033H
0053 704C              JNZ     ?C0115
0055 900000      E     MOV     DPTR,#GPDRB
0058 E0                MOVX    A,@DPTR
0059 30E145            JNB     ACC.1,?C0115
005C 900000      E     MOV     DPTR,#GPDRF
005F E0                MOVX    A,@DPTR
0060 30E43E            JNB     ACC.4,?C0115
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
0063 900000      E     MOV     DPTR,#KB_S3Dly
0066 E0                MOVX    A,@DPTR
0067 D3                SETB    C
0068 940A              SUBB    A,#0AH
006A 4019              JC      ?C0114
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
006C 900000      E     MOV     DPTR,#PWSeqStep
006F 7401              MOV     A,#01H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0072 900000      E     MOV     DPTR,#PowSeqDelay
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
0077 A3                INC     DPTR
0078 04                INC     A
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 815
007A 7F30              MOV     R7,#030H
007C 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 816
007F 900000      E     MOV     DPTR,#SysPowState
0082 7430              MOV     A,#030H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 817
0085         ?C0114:
                                           ; SOURCE LINE # 818
0085 900000      E     MOV     DPTR,#KB_S3Dly
0088 E0                MOVX    A,@DPTR
0089 04                INC     A
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 819
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 50  

                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
008B 8014              SJMP    ?C0115
008D         ?C0112:
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
008D E4                CLR     A
008E 900000      E     MOV     DPTR,#KB_S3Dly
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
0092 AF00        E     MOV     R7,Timer_A
0094 EF                MOV     A,R7
0095 54EF              ANL     A,#0EFH
0097 F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 827
0099 C200        E     CLR     F_Service_KEY
                                           ; SOURCE LINE # 828
009B 120000      R     LCALL   Enable_Any_Key_Irq
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
009E 120000      R     LCALL   L?0271
                                           ; SOURCE LINE # 832
00A1         ?C0115:
                                           ; SOURCE LINE # 834
00A1 AF00        E     MOV     R7,Timer_B
00A3 EF                MOV     A,R7
00A4 C4                SWAP    A
00A5 540F              ANL     A,#0FH
00A7 20E009            JB      ACC.0,?C0106
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
00AA 120000      R     LCALL   Check_Scan_Transmission
00AD EF                MOV     A,R7
00AE 6003              JZ      ?C0106
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
00B0 120000      R     LCALL   Start_Scan_Transmission
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
                                           ; SOURCE LINE # 841
00B3         ?C0106:
00B3 22                RET     
             ; FUNCTION service_scan (END)

             ; FUNCTION Get_Buffer (BEGIN)
                                           ; SOURCE LINE # 857
;---- Variable 'buffer_data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 862
0000 120000      R     LCALL   L?0286
0003 FE                MOV     R6,A
0004 E500        E     MOV     A,scan
0006 540F              ANL     A,#0FH
0008 FD                MOV     R5,A
0009 6E                XRL     A,R6
000A 6025              JZ      ?C0118
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 865
000C E500        E     MOV     A,scan
000E 54F0              ANL     A,#0F0H
0010 FE                MOV     R6,A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 51  

0011 ED                MOV     A,R5
0012 04                INC     A
0013 540F              ANL     A,#0FH
0015 4E                ORL     A,R6
0016 F500        E     MOV     scan,A
0018 7400        E     MOV     A,#LOW bKEY_BUFF
001A 2D                ADD     A,R5
001B 120000      R     LCALL   L?0266
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 866
0020 E500        E     MOV     A,scan
0022 540F              ANL     A,#0FH
0024 C3                CLR     C
0025 9410              SUBB    A,#010H
0027 400A              JC      ?C0120
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
0029 E500        E     MOV     A,scan
002B 54F0              ANL     A,#0F0H
002D F500        E     MOV     scan,A
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
002F 8002              SJMP    ?C0120
0031         ?C0118:
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
0031 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 874
0033         ?C0120:
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
0033         ?C0121:
0033 22                RET     
             ; FUNCTION Get_Buffer (END)

             ; FUNCTION Buffer_Mark (BEGIN)
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
0000 E500        E     MOV     A,scan
0002 54F0              ANL     A,#0F0H
0004 C4                SWAP    A
0005 540F              ANL     A,#0FH
0007 FF                MOV     R7,A
0008 E500        E     MOV     A,scan+01H
000A 54F0              ANL     A,#0F0H
000C 4F                ORL     A,R7
000D F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 884
000F 22                RET     
             ; FUNCTION Buffer_Mark (END)

             ; FUNCTION _Buffer_Key (BEGIN)
                                           ; SOURCE LINE # 892
;---- Variable 'row_column' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0000 900000      R     MOV     DPTR,#ready
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 52  

0006 120000      R     LCALL   L?0286
0009 FE                MOV     R6,A
000A 120000      R     LCALL   L?0265
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 897
000F E500        E     MOV     A,scan
0011 540F              ANL     A,#0FH
0013 FF                MOV     R7,A
0014 EE                MOV     A,R6
0015 04                INC     A
0016 120000      R     LCALL   L?0262
0019 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 899
001B C4                SWAP    A
001C 540F              ANL     A,#0FH
001E C3                CLR     C
001F 9410              SUBB    A,#010H
0021 4006              JC      ?C0123
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
0023 E500        E     MOV     A,scan
0025 540F              ANL     A,#0FH
0027 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 902
0029         ?C0123:
                                           ; SOURCE LINE # 905
0029 E500        E     MOV     A,scan
002B 540F              ANL     A,#0FH
002D FF                MOV     R7,A
002E 120000      R     LCALL   L?0287
0031 6F                XRL     A,R7
0032 7019              JNZ     ?C0124
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
0034 E500        E     MOV     A,scan+01H
0036 540F              ANL     A,#0FH
0038 C4                SWAP    A
0039 54F0              ANL     A,#0F0H
003B FF                MOV     R7,A
003C E500        E     MOV     A,scan
003E 540F              ANL     A,#0FH
0040 4F                ORL     A,R7
0041 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 908
0043 C4                SWAP    A
0044 120000      R     LCALL   L?0265
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
0049 900000      R     MOV     DPTR,#ready
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 910
004D         ?C0124:
                                           ; SOURCE LINE # 912
004D 900000      R     MOV     DPTR,#ready
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
                                           ; SOURCE LINE # 913
0052         ?C0125:
0052 22                RET     
             ; FUNCTION _Buffer_Key (END)
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 53  


             ; FUNCTION _Buffer_String (BEGIN)
                                           ; SOURCE LINE # 925
0000 900000      R     MOV     DPTR,#pntr
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 927
;---- Variable 'error' assigned to Register 'R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008         ?C0126:
                                           ; SOURCE LINE # 929
0008 900000      R     MOV     DPTR,#pntr
000B 120000      E     LCALL   ?C?PLDXDATA
000E 120000      E     LCALL   ?C?CLDPTR
0011 601A              JZ      ?C0127
0013 ED                MOV     A,R5
0014 7017              JNZ     ?C0127
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
0016 900000      R     MOV     DPTR,#pntr
0019 75F001            MOV     B,#01H
001C 120000      E     LCALL   ?C?PLDIXDATA
001F 120000      E     LCALL   ?C?CLDPTR
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _Buffer_Key
0026 EF                MOV     A,R7
0027 70DF              JNZ     ?C0126
                                           ; SOURCE LINE # 932
0029 7D80              MOV     R5,#080H
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
002B 80DB              SJMP    ?C0126
002D         ?C0127:
                                           ; SOURCE LINE # 936
002D CF                XCH     A,R7
002E ED                MOV     A,R5
002F CF                XCH     A,R7
                                           ; SOURCE LINE # 937
0030         ?C0129:
0030 22                RET     
             ; FUNCTION _Buffer_String (END)

             ; FUNCTION bScanExtendKeys (BEGIN)
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 947
0000 E4                CLR     A
0001 F500        E     MOV     ITempB06,A
                                           ; SOURCE LINE # 948
0003 E500        E     MOV     A,extendscan+02H
0005 54DF              ANL     A,#0DFH
0007 F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 949
0009 54EF              ANL     A,#0EFH
000B F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 950
000D 54BF              ANL     A,#0BFH
000F F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 952
0011 E500        E     MOV     A,etkeytypematic
0013 6012              JZ      ?C0130
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 54  

                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
0015 7800        R     MOV     R0,#LOW ?CheckEtKeystm?BYTE
0017 7C00        R     MOV     R4,#HIGH ?CheckEtKeystm?BYTE
0019 7D01              MOV     R5,#01H
001B 7B00              MOV     R3,#00H
001D 7A00        E     MOV     R2,#HIGH etkeytypematic
001F 7900        E     MOV     R1,#LOW etkeytypematic
0021 120000      R     LCALL   L?0259
0024 120000      R     LCALL   CheckEtKeystm
                                           ; SOURCE LINE # 955
0027         ?C0130:
                                           ; SOURCE LINE # 957
0027 E500        E     MOV     A,new_extendkey
0029 600C              JZ      ?C0131
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 959
002B E500        E     MOV     A,extendscan+02H
002D 4410              ORL     A,#010H
002F F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 960
0031 120000      R     LCALL   DebounceExtendkey
                                           ; SOURCE LINE # 961
0034 750001      E     MOV     ITempB06,#01H
                                           ; SOURCE LINE # 962
0037         ?C0131:
                                           ; SOURCE LINE # 964
0037 E500        E     MOV     A,ITempB06
0039 7047              JNZ     ?C0132
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
003B F500        E     MOV     ITempB01,A
003D         ?C0133:
003D 900000      E     MOV     DPTR,#ExtendScanPin
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 E500        E     MOV     A,ITempB01
0044 C3                CLR     C
0045 9F                SUBB    A,R7
0046 503A              JNC     ?C0132
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
0048 AF00        E     MOV     R7,ITempB01
004A 120000      R     LCALL   _SetExtendScanLines
                                           ; SOURCE LINE # 969
004D 120000      R     LCALL   CapDelay
                                           ; SOURCE LINE # 970
0050 120000      R     LCALL   CapDelay
                                           ; SOURCE LINE # 971
                                           ; SOURCE LINE # 972
0053 120000      R     LCALL   L?0282
                                           ; SOURCE LINE # 973
0056 AF00        E     MOV     R7,ITempB01
0058 7400        E     MOV     A,#LOW bscan_matrix+010H
                                           ; SOURCE LINE # 974
005A 120000      R     LCALL   L?0274
005D 6010              JZ      ?C0136
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 976
005F AF00        E     MOV     R7,ITempB02
0061 7E00              MOV     R6,#00H
0063 AD00        E     MOV     R5,ITempB01
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 55  

0065 ED                MOV     A,R5
0066 2410              ADD     A,#010H
0068 FD                MOV     R5,A
0069 E4                CLR     A
006A 33                RLC     A
006B FC                MOV     R4,A
006C 120000      R     LCALL   _CheckExtendKeys
                                           ; SOURCE LINE # 977
006F         ?C0136:
                                           ; SOURCE LINE # 979
006F AF00        E     MOV     R7,ITempB01
0071 7400        E     MOV     A,#LOW bscan_matrix+010H
0073 2F                ADD     A,R7
0074 F8                MOV     R0,A
0075 E6                MOV     A,@R0
0076 6006              JZ      ?C0135
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
0078 E500        E     MOV     A,extendscan+02H
007A 4440              ORL     A,#040H
007C F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
007E         ?C0135:
007E 0500        E     INC     ITempB01
0080 80BB              SJMP    ?C0133
                                           ; SOURCE LINE # 984
0082         ?C0132:
                                           ; SOURCE LINE # 986
0082 AF00        E     MOV     R7,extendstatus
0084 120000      R     LCALL   L?0269
0087 30E02C            JNB     ACC.0,?C0138
                                           ; SOURCE LINE # 987
                                           ; SOURCE LINE # 988
008A AF00        E     MOV     R7,extendstatus
008C EF                MOV     A,R7
008D 54F7              ANL     A,#0F7H
008F F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 989
0091 E500        E     MOV     A,extendstatus
0093 5407              ANL     A,#07H
0095 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 990
0097 E500        E     MOV     A,ITempB01
0099 7013              JNZ     ?C0139
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
009B AF00        E     MOV     R7,new_extendkey
009D 120000      R     LCALL   L?0256
00A0 8002              SJMP    ?C0231
00A2         ?C0230:
00A2 C3                CLR     C
00A3 33                RLC     A
00A4         ?C0231:
00A4 D8FC              DJNZ    R0,?C0230
00A6 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 993
00A8 900000      E     MOV     DPTR,#diode_key
00AB E0                MOVX    A,@DPTR
00AC 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 994
00AE         ?C0139:
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 56  

                                           ; SOURCE LINE # 995
00AE E500        E     MOV     A,ITempB01
00B0 7004              JNZ     ?C0138
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 997
00B2 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 998
00B4 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
00B6         ?C0138:
                                           ; SOURCE LINE # 1002
00B6 AF00        E     MOV     R7,extendscan+02H
00B8 EF                MOV     A,R7
00B9 C4                SWAP    A
00BA 13                RRC     A
00BB 5401              ANL     A,#01H
00BD FF                MOV     R7,A
00BE AE00        E     MOV     R6,extendscan+02H
00C0 EE                MOV     A,R6
00C1 AE00        E     MOV     R6,extendscan+02H
00C3 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 1003
00C6         ?C0141:
00C6 22                RET     
             ; FUNCTION bScanExtendKeys (END)

             ; FUNCTION _SetExtendScanLines (BEGIN)
                                           ; SOURCE LINE # 1008
;---- Variable 'scan_line' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1010
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5016              JNC     ?C0142
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
0006 120000      R     LCALL   L?0263
                                           ; SOURCE LINE # 1014
0009 120000      R     LCALL   L?0284
000C 8002              SJMP    ?C0233
000E         ?C0232:
000E C3                CLR     C
000F 33                RLC     A
0010         ?C0233:
0010 D8FC              DJNZ    R0,?C0232
0012 F4                CPL     A
0013 900000      E     MOV     DPTR,#KSOH2
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
0017 120000      E     LCALL   Hook_SetGPIOScanPinH
                                           ; SOURCE LINE # 1016
001A 800A              SJMP    ?C0143
001C         ?C0142:
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
001C 120000      R     LCALL   L?0264
                                           ; SOURCE LINE # 1021
001F 900000      E     MOV     DPTR,#KSOH2
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 57  

0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1022
0023 120000      E     LCALL   Hook_SetGPIOScanPinL
                                           ; SOURCE LINE # 1023
0026         ?C0143:
                                           ; SOURCE LINE # 1024
0026 020000      R     LJMP    CapDelay
             ; FUNCTION _SetExtendScanLines (END)

             ; FUNCTION _CheckExtendKeys (BEGIN)
                                           ; SOURCE LINE # 1030
0000 900000      R     MOV     DPTR,#KSI_bit_num
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1035
;---- Variable 'flag' assigned to Register 'R3' ----
000E E4                CLR     A
000F FB                MOV     R3,A
                                           ; SOURCE LINE # 1036
0010 AF00        E     MOV     R7,extendstatus
0012 120000      R     LCALL   L?0269
0015 30E003            JNB     ACC.0,?C0145
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
0018 0B                INC     R3
                                           ; SOURCE LINE # 1039
0019 801C              SJMP    ?C0146
001B         ?C0145:
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
001B 900000      R     MOV     DPTR,#scan_address
001E 120000      R     LCALL   L?0272
0021 F4                CPL     A
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#KSI_bit_num
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 5F                ANL     A,R7
0029 FF                MOV     R7,A
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1043
002A 7003              JNZ     ?C0147
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
002C FB                MOV     R3,A
                                           ; SOURCE LINE # 1046
002D 8008              SJMP    ?C0146
002F         ?C0147:
                                           ; SOURCE LINE # 1047
002F 120000      R     LCALL   _find_paths
0032 EF                MOV     A,R7
0033 6002              JZ      ?C0146
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 58  

                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1049
0035 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
0037         ?C0146:
                                           ; SOURCE LINE # 1053
0037 EB                MOV     A,R3
0038 6020              JZ      ?C0150
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1055
003A AF00        E     MOV     R7,extendstatus
003C EF                MOV     A,R7
003D 4408              ORL     A,#08H
003F F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1056
0041 900000      R     MOV     DPTR,#scan_address
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 2400        E     ADD     A,#LOW bscan_matrix
0048 F8                MOV     R0,A
0049 E6                MOV     A,@R0
004A FF                MOV     R7,A
004B 900000      E     MOV     DPTR,#diode_key
004E E0                MOVX    A,@DPTR
004F 4F                ORL     A,R7
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#KSI_bit_num
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 5F                ANL     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
005A         ?C0150:
                                           ; SOURCE LINE # 1059
005A E4                CLR     A
005B F500        E     MOV     ITempB03,A
005D         ?C0151:
                                           ; SOURCE LINE # 1060
005D 900000      R     MOV     DPTR,#KSI_bit_num
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 4E                ORL     A,R6
0066 6065              JZ      ?C0158
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1062
0068 EF                MOV     A,R7
0069 30E051            JNB     ACC.0,?C0153
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
006C A3                INC     DPTR
006D 120000      R     LCALL   L?0272
0070 FB                MOV     R3,A
0071 7A00              MOV     R2,#00H
0073 AF00        E     MOV     R7,ITempB03
0075 7401              MOV     A,#01H
0077 7E00              MOV     R6,#00H
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 59  

0079 C8                XCH     A,R0
007A EF                MOV     A,R7
007B C8                XCH     A,R0
007C 08                INC     R0
007D 8005              SJMP    ?C0235
007F         ?C0234:
007F C3                CLR     C
0080 33                RLC     A
0081 CE                XCH     A,R6
0082 33                RLC     A
0083 CE                XCH     A,R6
0084         ?C0235:
0084 D8F9              DJNZ    R0,?C0234
0086 FF                MOV     R7,A
0087 EE                MOV     A,R6
0088 5A                ANL     A,R2
0089 FE                MOV     R6,A
008A EF                MOV     A,R7
008B 5B                ANL     A,R3
008C 4E                ORL     A,R6
008D 6013              JZ      ?C0154
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
008F AF00        E     MOV     R7,extendscan+02H
0091 EF                MOV     A,R7
0092 C4                SWAP    A
0093 13                RRC     A
0094 5407              ANL     A,#07H
0096 20E024            JB      ACC.0,?C0153
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
0099 EF                MOV     A,R7
009A 4420              ORL     A,#020H
009C F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 1069
009E 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
00A0 8016              SJMP    ?C0247
00A2         ?C0154:
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
00A2 AF00        E     MOV     R7,extendscan+02H
00A4 EF                MOV     A,R7
00A5 C4                SWAP    A
00A6 540F              ANL     A,#0FH
00A8 20E012            JB      ACC.0,?C0153
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1076
00AB EF                MOV     A,R7
00AC 4410              ORL     A,#010H
00AE F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 1077
00B0 900000      R     MOV     DPTR,#scan_address
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FD                MOV     R5,A
00B6 E4                CLR     A
00B7 FB                MOV     R3,A
00B8         ?C0247:
00B8 AF00        E     MOV     R7,ITempB03
00BA 120000      R     LCALL   _ExtendKeyDebounce
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 60  

                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
00BD         ?C0153:
                                           ; SOURCE LINE # 1081
00BD 0500        E     INC     ITempB03
                                           ; SOURCE LINE # 1082
00BF 900000      R     MOV     DPTR,#KSI_bit_num
00C2 E0                MOVX    A,@DPTR
00C3 A2E7              MOV     C,ACC.7
00C5 13                RRC     A
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 E0                MOVX    A,@DPTR
00C9 13                RRC     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
00CB 8090              SJMP    ?C0151
                                           ; SOURCE LINE # 1084
00CD         ?C0158:
00CD 22                RET     
             ; FUNCTION _CheckExtendKeys (END)

             ; FUNCTION _ExtendKeyDebounce (BEGIN)
                                           ; SOURCE LINE # 1089
;---- Variable 'KSI_bit_num' assigned to Register 'R7' ----
;---- Variable 'event' assigned to Register 'R3' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
0000 ED                MOV     A,R5
0001 24F0              ADD     A,#0F0H
0003 AD00        E     MOV     R5,new_extendkey
0005 120000      R     LCALL   L?0281
0008 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1092
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E AE00        E     MOV     R6,new_extendkey
0010 EE                MOV     A,R6
0011 54F8              ANL     A,#0F8H
0013 4F                ORL     A,R7
0014 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1093
0016 AF00        E     MOV     R7,new_extendkey
0018 EF                MOV     A,R7
0019 4408              ORL     A,#08H
001B F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1094
001D AF00        E     MOV     R7,extendstatus
001F EF                MOV     A,R7
0020 54FE              ANL     A,#0FEH
0022 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1095
0024 AF00        E     MOV     R7,extendstatus
0026 EF                MOV     A,R7
0027 54EF              ANL     A,#0EFH
0029 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1097
002B EB                MOV     A,R3
002C AF00        E     MOV     R7,extendstatus
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 61  

002E 7005              JNZ     ?C0159
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
0030 EF                MOV     A,R7
0031 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
0033 8003              SJMP    ?C0248
0035         ?C0159:
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
0035 EF                MOV     A,R7
0036 4402              ORL     A,#02H
0038         ?C0248:
0038 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1105
003A AF00        E     MOV     R7,extendstatus
003C EF                MOV     A,R7
003D 541F              ANL     A,#01FH
003F 4420              ORL     A,#020H
0041 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1107
0043         ?C0161:
0043 22                RET     
             ; FUNCTION _ExtendKeyDebounce (END)

             ; FUNCTION DebounceExtendkey (BEGIN)
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
                                           ; SOURCE LINE # 1112
0000 AF00        E     MOV     R7,new_extendkey
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _SetExtendScanLines
                                           ; SOURCE LINE # 1113
000A 120000      R     LCALL   Read_Scan_Lines
000D 8F00        E     MOV     ITempB04,R7
                                           ; SOURCE LINE # 1114
000F 6300FF      E     XRL     ITempB04,#0FFH
                                           ; SOURCE LINE # 1115
0012 AF00        E     MOV     R7,new_extendkey
0014 120000      R     LCALL   L?0256
0017 8002              SJMP    ?C0237
0019         ?C0236:
0019 C3                CLR     C
001A 33                RLC     A
001B         ?C0237:
001B D8FC              DJNZ    R0,?C0236
001D F500        E     MOV     ITempB05,A
                                           ; SOURCE LINE # 1116
001F E500        E     MOV     A,ITempB04
0021 5200        E     ANL     ITempB05,A
                                           ; SOURCE LINE # 1118
0023 E500        E     MOV     A,ITempB05
0025 600C              JZ      ?C0162
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
0027 AF00        E     MOV     R7,extendstatus
0029 EF                MOV     A,R7
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 62  

002A C3                CLR     C
002B 13                RRC     A
002C AF00        E     MOV     R7,extendstatus
002E 20E00C            JB      ACC.0,?C0250
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
0031 8011              SJMP    ?C0249
0033         ?C0162:
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
0033 AF00        E     MOV     R7,extendstatus
0035 EF                MOV     A,R7
0036 C3                CLR     C
0037 13                RRC     A
0038 AF00        E     MOV     R7,extendstatus
003A 20E007            JB      ACC.0,?C0166
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
003D         ?C0250:
003D EF                MOV     A,R7
003E 54EF              ANL     A,#0EFH
0040 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1134
0042 8005              SJMP    ?C0165
0044         ?C0166:
                                           ; SOURCE LINE # 1136
                                           ; SOURCE LINE # 1137
0044         ?C0249:
0044 EF                MOV     A,R7
0045 4410              ORL     A,#010H
0047 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1139
0049         ?C0165:
                                           ; SOURCE LINE # 1141
0049 AF00        E     MOV     R7,extendstatus
004B EF                MOV     A,R7
004C 20E034            JB      ACC.0,?C0168
                                           ; SOURCE LINE # 1142
                                           ; SOURCE LINE # 1143
004F AF00        E     MOV     R7,extendstatus
0051 EF                MOV     A,R7
0052 C4                SWAP    A
0053 13                RRC     A
0054 5407              ANL     A,#07H
0056 6018              JZ      ?C0169
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
0058 AF00        E     MOV     R7,extendstatus
005A EF                MOV     A,R7
005B C4                SWAP    A
005C 13                RRC     A
005D 5407              ANL     A,#07H
005F FE                MOV     R6,A
0060 EF                MOV     A,R7
0061 541F              ANL     A,#01FH
0063 FF                MOV     R7,A
0064 EE                MOV     A,R6
0065 14                DEC     A
0066 5407              ANL     A,#07H
0068 C4                SWAP    A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 63  

0069 33                RLC     A
006A 54E0              ANL     A,#0E0H
006C 4F                ORL     A,R7
006D F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1146
006F 22                RET     
0070         ?C0169:
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
0070 AF00        E     MOV     R7,extendstatus
0072 EF                MOV     A,R7
0073 C4                SWAP    A
0074 540F              ANL     A,#0FH
0076 20E002            JB      ACC.0,?C0171
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
0079 8011              SJMP    ?C0251
007B         ?C0171:
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1156
007B AF00        E     MOV     R7,extendstatus
007D EF                MOV     A,R7
007E 4401              ORL     A,#01H
0080 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1159
0082 22                RET     
0083         ?C0168:
                                           ; SOURCE LINE # 1161
                                           ; SOURCE LINE # 1162
0083 AF00        E     MOV     R7,extendstatus
0085 EF                MOV     A,R7
0086 C4                SWAP    A
0087 540F              ANL     A,#0FH
0089 20E006            JB      ACC.0,?C0174
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
008C         ?C0251:
008C E4                CLR     A
008D F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1165
008F F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1166
0091 22                RET     
0092         ?C0174:
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
0092 120000      R     LCALL   CheckExtendKeyValid
                                           ; SOURCE LINE # 1170
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1172
0095         ?C0176:
0095 22                RET     
             ; FUNCTION DebounceExtendkey (END)

             ; FUNCTION CheckExtendKeyValid (BEGIN)
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 64  

0000 AF00        E     MOV     R7,new_extendkey
0002 120000      R     LCALL   L?0256
0005 8002              SJMP    ?C0239
0007         ?C0238:
0007 C3                CLR     C
0008 33                RLC     A
0009         ?C0239:
0009 D8FC              DJNZ    R0,?C0238
000B F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 1181
000D 120000      R     LCALL   L?0279
0010 E6                MOV     A,@R0
0011 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1182
0013 E500        E     MOV     A,ITempB02
0015 6200        E     XRL     ITempB01,A
                                           ; SOURCE LINE # 1183
0017 120000      R     LCALL   L?0279
001A A600        E     MOV     @R0,ITempB01
                                           ; SOURCE LINE # 1185
001C 750001      E     MOV     ITempB03,#01H
                                           ; SOURCE LINE # 1186
001F E500        E     MOV     A,ITempB02
0021 5500        E     ANL     A,ITempB01
0023 6013              JZ      ?C0177
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
0025 E4                CLR     A
0026 F500        E     MOV     ITempB03,A
                                           ; SOURCE LINE # 1189
0028 850000      E     MOV     etkeytypematic,new_extendkey
                                           ; SOURCE LINE # 1190
002B E500        E     MOV     A,extendscan+01H
002D 540F              ANL     A,#0FH
002F 4420              ORL     A,#020H
0031 F500        E     MOV     extendscan+01H,A
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1193
0033 120000      R     LCALL   L?0285
0036 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 1194
0038         ?C0177:
                                           ; SOURCE LINE # 1196
0038 7800        R     MOV     R0,#LOW ?Send_EtScan2?BYTE
003A 7C00        R     MOV     R4,#HIGH ?Send_EtScan2?BYTE
003C 7D01              MOV     R5,#01H
003E 7B00              MOV     R3,#00H
0040 7A00        E     MOV     R2,#HIGH new_extendkey
0042 7900        E     MOV     R1,#LOW new_extendkey
0044 120000      R     LCALL   L?0259
0047 900000      R     MOV     DPTR,#?Send_EtScan2?BYTE+01H
004A E500        E     MOV     A,ITempB03
004C F0                MOVX    @DPTR,A
004D 120000      R     LCALL   Send_EtScan2
                                           ; SOURCE LINE # 1197
0050 E4                CLR     A
0051 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1198
0053 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1199
0055 22                RET     
             ; FUNCTION CheckExtendKeyValid (END)
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 65  


             ; FUNCTION Send_EtScan2 (BEGIN)
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
0000 900000      E     MOV     DPTR,#UtilityFlag
0003 E0                MOVX    A,@DPTR
0004 30E626            JNB     ACC.6,?C0179
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
0007 900000      E     MOV     DPTR,#KeyScanACK
000A E0                MOVX    A,@DPTR
000B F4                CPL     A
000C 705A              JNZ     ?C0183
                                           ; SOURCE LINE # 1209
                                           ; SOURCE LINE # 1210
000E 900000      R     MOV     DPTR,#event
0011 E0                MOVX    A,@DPTR
0012 7054              JNZ     ?C0183
                                           ; SOURCE LINE # 1211
                                           ; SOURCE LINE # 1212
0014 120000      R     LCALL   L?0288
0017 900000      E     MOV     DPTR,#KeyScanKSI
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1213
001B 900000      R     MOV     DPTR,#key
001E E0                MOVX    A,@DPTR
001F C4                SWAP    A
0020 540F              ANL     A,#0FH
0022 900000      E     MOV     DPTR,#KeyScanKSO
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1214
0026 900000      E     MOV     DPTR,#KeyScanACK
0029 7444              MOV     A,#044H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1215
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
002C 22                RET     
002D         ?C0179:
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1220
002D 120000      R     LCALL   L?0288
0030 75F003            MOV     B,#03H
0033 A4                MUL     AB
0034 FF                MOV     R7,A
0035 E0                MOVX    A,@DPTR
0036 C4                SWAP    A
0037 540F              ANL     A,#0FH
0039 2F                ADD     A,R7
003A F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 1222
003C AF00        E     MOV     R7,ITempB02
003E 7800        E     MOV     R0,#LOW Extendkey_RAM_Pntr
0040 E6                MOV     A,@R0
0041 FC                MOV     R4,A
0042 08                INC     R0
0043 E6                MOV     A,@R0
0044 8C83              MOV     DPH,R4
0046 2F                ADD     A,R7
0047 F582              MOV     DPL,A
0049 E4                CLR     A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 66  

004A 3583              ADDC    A,DPH
004C F583              MOV     DPH,A
004E E0                MOVX    A,@DPTR
004F F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1227
0051 120000      R     LCALL   L?0289
0054 FF                MOV     R7,A
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 C4                SWAP    A
0058 540F              ANL     A,#0FH
005A FD                MOV     R5,A
005B 120000      E     LCALL   _Et_Hook_keyboard
                                           ; SOURCE LINE # 1228
005E 900000      R     MOV     DPTR,#event
0061 E0                MOVX    A,@DPTR
0062 FD                MOV     R5,A
0063 AF00        E     MOV     R7,ITempB01
0065 120000      E     LCALL   _Send_Key
                                           ; SOURCE LINE # 1229
                                           ; SOURCE LINE # 1230
0068         ?C0183:
0068 22                RET     
             ; FUNCTION Send_EtScan2 (END)

             ; FUNCTION ClearExtendKeys (BEGIN)
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
0000 E4                CLR     A
0001 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1238
0003 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1239
0005 F500        E     MOV     etkeytypematic,A
                                           ; SOURCE LINE # 1240
0007 22                RET     
             ; FUNCTION ClearExtendKeys (END)

             ; FUNCTION CheckEtKeystm (BEGIN)
                                           ; SOURCE LINE # 1245
                                           ; SOURCE LINE # 1246
                                           ; SOURCE LINE # 1247
0000 E4                CLR     A
0001 F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 1248
0003 900000      R     MOV     DPTR,#key
0006 E0                MOVX    A,@DPTR
0007 120000      R     LCALL   L?0257
000A 8002              SJMP    ?C0241
000C         ?C0240:
000C C3                CLR     C
000D 33                RLC     A
000E         ?C0241:
000E D8FC              DJNZ    R0,?C0240
0010 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1249
0012 900000      R     MOV     DPTR,#key
0015 E0                MOVX    A,@DPTR
0016 120000      R     LCALL   L?0280
0019 E6                MOV     A,@R0
001A 5200        E     ANL     ITempB01,A
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 67  

                                           ; SOURCE LINE # 1251
001C E500        E     MOV     A,ITempB01
001E 7005              JNZ     ?C0185
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
0020 F500        E     MOV     etkeytypematic,A
                                           ; SOURCE LINE # 1254
0022 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 1255
0025         ?C0185:
                                           ; SOURCE LINE # 1257
0025 E500        E     MOV     A,ITempB02
0027 700F              JNZ     ?C0186
                                           ; SOURCE LINE # 1258
                                           ; SOURCE LINE # 1259
0029 AF00        E     MOV     R7,extendscan+01H
002B 120000      R     LCALL   L?0261
002E F500        E     MOV     extendscan+01H,A
                                           ; SOURCE LINE # 1260
0030 C4                SWAP    A
0031 540F              ANL     A,#0FH
0033 6003              JZ      ?C0186
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
0035 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
0038         ?C0186:
                                           ; SOURCE LINE # 1266
0038 E500        E     MOV     A,ITempB02
003A 7014              JNZ     ?C0188
                                           ; SOURCE LINE # 1267
                                           ; SOURCE LINE # 1268
003C E500        E     MOV     A,extendscan+01H
003E 540F              ANL     A,#0FH
0040 4420              ORL     A,#020H
0042 F500        E     MOV     extendscan+01H,A
                                           ; SOURCE LINE # 1269
0044 900000      E     MOV     DPTR,#bTMcount
0047 E0                MOVX    A,@DPTR
0048 14                DEC     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1270
004A E0                MOVX    A,@DPTR
004B 6003              JZ      ?C0188
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1272
004D 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
0050         ?C0188:
                                           ; SOURCE LINE # 1276
0050 E500        E     MOV     A,ITempB02
0052 7020              JNZ     ?C0191
                                           ; SOURCE LINE # 1277
                                           ; SOURCE LINE # 1278
0054 900000      E     MOV     DPTR,#bTMrepeat
0057 E0                MOVX    A,@DPTR
0058 900000      E     MOV     DPTR,#bTMcount
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1279
005C 7800        R     MOV     R0,#LOW ?Send_EtScan2?BYTE
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 68  

005E 7C00        R     MOV     R4,#HIGH ?Send_EtScan2?BYTE
0060 7D01              MOV     R5,#01H
0062 7B01              MOV     R3,#01H
0064 7A00        R     MOV     R2,#HIGH key
0066 7900        R     MOV     R1,#LOW key
0068 120000      R     LCALL   L?0259
006B 900000      R     MOV     DPTR,#?Send_EtScan2?BYTE+01H
006E 7402              MOV     A,#02H
0070 F0                MOVX    @DPTR,A
0071 120000      R     LCALL   Send_EtScan2
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
0074         ?C0191:
0074 22                RET     
             ; FUNCTION CheckEtKeystm (END)

             ; FUNCTION _S4S5_KeyWake (BEGIN)
                                           ; SOURCE LINE # 1282
0000 900000      R     MOV     DPTR,#ONEKEY_TYPE
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
0005 900000      E     MOV     DPTR,#GPDRC
0008 E0                MOVX    A,@DPTR
0009 30E503            JNB     ACC.5,$ + 6H
000C 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1287
000F         ?C0192:
                                           ; SOURCE LINE # 1288
000F 900000      E     MOV     DPTR,#ACPI_HOTKEY
0012 E0                MOVX    A,@DPTR
0013 30E603            JNB     ACC.6,$ + 6H
0016 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1291
0019         ?C0194:
                                           ; SOURCE LINE # 1292
0019 900000      E     MOV     DPTR,#OEMControl
001C E0                MOVX    A,@DPTR
001D 20E203            JB      ACC.2,$ + 6H
0020 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1295
0023         ?C0195:
                                           ; SOURCE LINE # 1296
0023 900000      E     MOV     DPTR,#SysPowState
0026 E0                MOVX    A,@DPTR
0027 24AB              ADD     A,#0ABH
0029 600B              JZ      ?C0199
002B 24EF              ADD     A,#0EFH
002D 6007              JZ      ?C0199
002F 2422              ADD     A,#022H
0031 6003              JZ      $ + 5H
0033 020000      R     LJMP    ?C0193
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1299
                                           ; SOURCE LINE # 1300
0036         ?C0199:
                                           ; SOURCE LINE # 1301
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 69  

0036 900000      E     MOV     DPTR,#GPDRB
0039 E0                MOVX    A,@DPTR
003A 30E003            JNB     ACC.0,?C0202
003D D3                SETB    C
003E 8001              SJMP    ?C0203
0040         ?C0202:
0040 C3                CLR     C
0041         ?C0203:
0041 5007              JNC     ?C0201
0043 900000      E     MOV     DPTR,#ACOFF_SOURCE
0046 E0                MOVX    A,@DPTR
0047 30E24D            JNB     ACC.2,?C0200
004A         ?C0201:
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
004A E4                CLR     A
004B 900000      E     MOV     DPTR,#BatSMbusFailCount
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1304
004F 120000      R     LCALL   L?0260
0052 701D              JNZ     ?C0204
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
0054 800E              SJMP    ?C0252
0056         ?C0205:
                                           ; SOURCE LINE # 1307
0056 900000      E     MOV     DPTR,#BatSMbusFailCount
0059 E0                MOVX    A,@DPTR
005A D3                SETB    C
005B 9404              SUBB    A,#04H
005D 5012              JNC     ?C0204
                                           ; SOURCE LINE # 1308
                                           ; SOURCE LINE # 1309
005F 120000      R     LCALL   L?0260
0062 7008              JNZ     ?C0207
                                           ; SOURCE LINE # 1310
                                           ; SOURCE LINE # 1311
0064         ?C0252:
0064 900000      E     MOV     DPTR,#BatSMbusFailCount
0067 E0                MOVX    A,@DPTR
0068 04                INC     A
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1312
006A 80EA              SJMP    ?C0205
006C         ?C0207:
                                           ; SOURCE LINE # 1314
                                           ; SOURCE LINE # 1315
006C E4                CLR     A
006D 900000      E     MOV     DPTR,#BatSMbusFailCount
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1316
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1320
0071         ?C0204:
                                           ; SOURCE LINE # 1321
0071 900000      E     MOV     DPTR,#BatSMbusFailCount
0074 E0                MOVX    A,@DPTR
0075 C3                CLR     C
0076 9404              SUBB    A,#04H
0078 504E              JNC     ?C0193
                                           ; SOURCE LINE # 1322
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 70  

007A         ?C0209:
                                           ; SOURCE LINE # 1324
007A 900000      E     MOV     DPTR,#BAT1PERCL
007D E0                MOVX    A,@DPTR
007E C3                CLR     C
007F 9402              SUBB    A,#02H
0081 5014              JNC     ?C0200
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
0083 900000      E     MOV     DPTR,#nBatteryStatL
0086 E0                MOVX    A,@DPTR
0087 4404              ORL     A,#04H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1327
008A 900000      R     MOV     DPTR,#ONEKEY_TYPE
008D E0                MOVX    A,@DPTR
008E 7038              JNZ     ?C0193
                                           ; SOURCE LINE # 1328
0090 900000      E     MOV     DPTR,#LOWBATT_3TIMES
0093 7464              MOV     A,#064H
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1329
0096 22                RET     
                                           ; SOURCE LINE # 1330
                                           ; SOURCE LINE # 1332
0097         ?C0200:
                                           ; SOURCE LINE # 1333
0097 900000      E     MOV     DPTR,#SysStatus2
009A E0                MOVX    A,@DPTR
009B 20E32A            JB      ACC.3,?C0193
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1336
009E         ?C0212:
                                           ; SOURCE LINE # 1337
009E 900000      E     MOV     DPTR,#PWSeqStep
00A1 7401              MOV     A,#01H
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1338
00A4 E4                CLR     A
00A5 900000      E     MOV     DPTR,#PowSeqDelay
00A8 F0                MOVX    @DPTR,A
00A9 A3                INC     DPTR
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
00AB 900000      E     MOV     DPTR,#uNovoVPCCount
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1340
00AF 900000      R     MOV     DPTR,#ONEKEY_TYPE
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 900000      E     MOV     DPTR,#ONEKEY_FLAG
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1341
00B8 900000      E     MOV     DPTR,#ONEKEY_TEMP_FLAG
00BB EF                MOV     A,R7
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1342
00BD 7F56              MOV     R7,#056H
00BF 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 1343
00C2 900000      E     MOV     DPTR,#SysPowState
C51 COMPILER V8.12   CORE_SCAN                                                             09/14/2018 11:07:53 PAGE 71  

00C5 7450              MOV     A,#050H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1344
                                           ; SOURCE LINE # 1345
                                           ; SOURCE LINE # 1348
00C8         ?C0193:
00C8 22                RET     
00C9         L?0260:
00C9 900000      E     MOV     DPTR,#?_bRWSMBus?BYTE+03H
00CC 740D              MOV     A,#0DH
00CE F0                MOVX    @DPTR,A
00CF 7E00        E     MOV     R6,#HIGH BAT1PERCL
00D1 A3                INC     DPTR
00D2 7400        E     MOV     A,#HIGH BAT1PERCL
00D4 F0                MOVX    @DPTR,A
00D5 A3                INC     DPTR
00D6 7400        E     MOV     A,#LOW BAT1PERCL
00D8 F0                MOVX    @DPTR,A
00D9 E4                CLR     A
00DA A3                INC     DPTR
00DB F0                MOVX    @DPTR,A
00DC 7B16              MOV     R3,#016H
00DE 7D0C              MOV     R5,#0CH
00E0 7F01              MOV     R7,#01H
00E2 120000      E     LCALL   _bRWSMBus
00E5 EF                MOV     A,R7
00E6 22                RET     
             ; FUNCTION _S4S5_KeyWake (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3159    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =   ----      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
