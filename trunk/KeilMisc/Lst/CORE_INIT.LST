C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_INIT
OBJECT MODULE PLACED IN Code\CORE\CORE_INIT.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_INIT.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_INIT.C
   3           *
   4           * Author : Dino
   5           *
   6           * Copyright (c) ITE INC. All Rights Reserved.
   7           *
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          //----------------------------------------------------------------------------
  13          // FUNCTION: cold_reset - Initialization when power goes on
  14          //----------------------------------------------------------------------------
  15          void cold_reset(void)
  16          {
  17   1              Ext_Cb2.byte = EXT_CB2_INIT;                    /* Update Ext_Cb3 a little further down */
  18   1              Save_Typematic = SAVE_TYPEMATIC_INIT;
  19   1              Save_Kbd_State = (SAVE_KBD_STATE_INIT & ~maskLEDS) | ( 0& maskLEDS);
  20   1      
  21   1          Led_Ctrl = LED_CTRL_INIT;
  22   1          Led_Data = 0;
  23   1          Gen_Info = 0;   /* Clear general control. */
  24   1      
  25   1          Int_Var.Ticker_10 = 10;
  26   1      
  27   1          Flag.PASS_READY = 0;    /* Password not loaded. */
  28   1          Int_Var.Ticker_100 = 50;
  29   1      
  30   1          Flag.SCAN_INH = 1;      /* Scanner transmission inhibited. */
  31   1          Flag.VALID_SCAN = 0;
  32   1      
  33   1          Flag.NEW_PRI_K = 0;
  34   1          Flag.NEW_PRI_M = 0;
  35   1      
  36   1          Flag.LED_ON = 1;
  37   1          Ccb42 = CCB42_INIT;
  38   1      
  39   1          Pass_On = 0;      /* Password enable send code. */
  40   1          Pass_Off = 0;     /* Password disable send code. */
  41   1          Pass_Make1 = 0;   /* Reject make code 1. */
  42   1          Pass_Make2 = 0;   /* Reject make code 2. */
  43   1      
  44   1          MULPX = 0;
  45   1      
  46   1      }
  47          
  48          
  49          //----------------------------------------------------------------------------
  50          // FUNCTION:   general_reset1, general_reset2
  51          // Initialize things common to both Cold/Warm reset.
  52          //----------------------------------------------------------------------------
  53          static void common_reset(void)  /* MCHT, 27/05/04 */ // static void general_reset1(void)
  54          {
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 2   

  55   1          Service  = 0;       /* Clear service requests */
  56   1          Service1 = 0;
  57   1      
  58   1          Kbd_Response = 0;   /* Clear response codes */
  59   1          Timer_A.byte = 0;   /* Clear Timer A events */
  60   1          Timer_B.byte = 0;   /* Clear Timer B events */
  61   1          Scanner_State = 0;  /* Clear scanner state */
  62   1      }
  63          
  64          
  65          //----------------------------------------------------------------------------
  66          // FUNCTION: Init_Mouse - Initialize the Intelligent mouse variables.
  67          //----------------------------------------------------------------------------
  68          void Init_Mouse (void)
  69          {
  70   1      
  71   1      }
  72          
  73          
  74          void Core_Initialization(void)
  75          {
  76   1              CLEAR_MASK(RAM_16FF,BIT0);              // for AX
  77   1              Init_GPIO();
  78   1      
  79   1              #if     Support_External_IO
                  Init_IT8302();
                      #endif  // Support_External_IO
  82   1      
  83   1          Core_Init_SMBus();          //
  84   1          //EC_MainPwr_ON(); //ANGELAS044:remove
  85   1              //CHK_BATT_5PERCL();            // 2012.03.01 update by AC
  86   1              check8sreset(); //ANGELAS041:add
  87   1      
  88   1          Init_Kbd();
  89   1              cold_reset();
  90   1              common_reset();
  91   1              Init_Mouse();
  92   1              Init_Timers();
  93   1          Core_Init_Regs();
  94   1              #if SUPPORT_UCSI
                  ucsi_reset();//72JERRY083:Change MMIO to mailbox for accessing UCSI registers.
                  #endif
  97   1              //CGCTRL2R = 0x00; //ANGELAS065:add //ANGELAS069:remove
  98   1              //CGCTRL3R = 0x51; //ANGELAS065:add //ANGELAS069:remove
  99   1              //Core_Init_SMBus();
 100   1      
 101   1              //MEILING009:S+ Add 8 sec reset test function.
 102   1              if(IS_MASK_CLEAR(SysStatus2, b3EC8S_Reset) && (ShutDnCause == SC_ECColdBoot))
 103   1              {
 104   2                      BRAMBK0[126] = 0x00;
 105   2                      BRAMBK0[127] = 0x00;
 106   2              }
 107   1              ResetTestFlag = BRAMBK0[126];
 108   1              RamDebug(0xC0);
 109   1              RamDebug(ResetTestFlag);
 110   1              switch(ResetTestFlag)
 111   1              {
 112   2              case 1:
 113   2                      SET_MASK(GCR9, BIT3);
 114   2                      GPCRI5 = ALT;
 115   2                      RamDebug(0xC1);
 116   2                      break;
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 3   

 117   2              case 2:
 118   2                      CLEAR_MASK(GCR9,BIT3);
 119   2                      GPCRI5 = BRAMBK0[127];
 120   2                      RamDebug(0xC2);
 121   2                      break;
 122   2              default:
 123   2                      CLEAR_MASK(GCR9,BIT3);
 124   2                      RamDebug(0xC3);
 125   2                      break;
 126   2              }
 127   1              RamDebug(GCR9);
 128   1              RamDebug(GPCRI5);
 129   1              //MEILING009:E+ enable 8s EC reset and GPO out signal from GPI5.
 130   1      }
 131          
 132          //----------------------------------------------------------------------------
 133          // The function of clearing internal and external ram for kernel code
 134          // Clear external ram (0x000~0x0FF)
 135          // Clear internal ram (0x20~0xCF)
 136          //----------------------------------------------------------------------------
 137          void Core_Init_ClearRam(void)
 138          {
 139   1              BYTE Temp0;
 140   1          BYTE Temp1;
 141   1              BYTE Temp2;
 142   1              BYTE Temp3;//ANGELAS094:Add workaround for hang bios.
 143   1              BYTE Temp4;//HEGANGS022£ºAdd SMI hang check function
 144   1              IIBYTE *IdataIndex;
 145   1              PORT_BYTE_PNTR byte_register_pntr;
 146   1              IdataIndex = 0x20;
 147   1          byte_register_pntr=0;
 148   1              Temp0 = WinFlashMark;                           //msmart// 
 149   1              Temp1 = WinFlashMark2;
 150   1              Temp2 = WinFlashMark1;                          // G21: Add WinFlashMark1 check
 151   1              Temp3 = bios_count;//ANGELAS094:Add workaround for hang bios.
 152   1              Temp4 = bios_check; //HEGANGS022£ºAdd SMI hang check function
 153   1          while(byte_register_pntr<0x100)             // Clear external ram (0x000~0xFFF)
 154   1          {
 155   2              *byte_register_pntr=0;
 156   2              byte_register_pntr ++;
 157   2          }
 158   1              WinFlashMark = Temp0;                           //msmart
 159   1              WinFlashMark2 = Temp1;                          
 160   1              WinFlashMark1 = Temp2;                          //G21: Add WinFlashMark1 check
 161   1              bios_count = Temp3;//ANGELAS094:Add workaround for hang bios.
 162   1              bios_check = Temp4;//HEGANGS022£ºAdd SMI hang check function
 163   1      
 164   1              while(IdataIndex<0xC0)                          // Clear internal ram (0x20~0xBF)
 165   1          {
 166   2              *IdataIndex=0;
 167   2              IdataIndex ++;
 168   2          }
 169   1      }
 170          
 171          //----------------------------------------------------------------------------
 172          // The function of init. registers of kernel code
 173          //----------------------------------------------------------------------------
 174          const sREG_INIT code Core_reg_init_table[] =
 175          {
 176                          { &FMSSR                ,Core_Init_FMSSR    },  // share rom size
 177          // HOST interface
 178                  { &SPCTRL1      ,Core_Init_I2EC     },  // Enable I2EC R/W
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 4   

 179                  { &BADRSEL      ,Core_Init_BADR     },  // Base address select 0b00:2E 2F 0b01:4E 4F 0b10:User define
 180                  { &SWCBALR      ,Core_Init_SWCBALR  },
 181                  { &SWCBAHR      ,Core_Init_SWCBAHR  },
 182                          { &RSTS                 ,0x84                           },
 183                          { &SPECTRL2     ,Core_Init_SPCTRL2      },      // Enable port I2EC Enable
 184                          { &PI2ECH               ,Core_Init_PI2ECH       },
 185                          { &PI2ECL               ,Core_Init_PI2ECL       },
 186          // KBC and PM interface
 187                          { &KBIRQR               ,0x00                   },      // Disable KBC IRQ
 188                  { &KBHICR               ,IBFCIE+PM1ICIE     },  // KBC port control IBFCIE+PMICIE
 189                  { &PM1CTL               ,IBFIE+SCINP        },  // EC port control  IBFCIE+SCI low active
 190                  { &PM2CTL               ,IBFIE+SCINP        },  // EC port2 control IBFCIE+SCI low active
 191          // PS2
 192                  { &PSCTL1               ,PS2_InhibitMode    },  // Enable Debounce,Receive mode, Inhibit CLK
 193                  { &PSCTL2               ,PS2_InhibitMode    },  // Enable Debounce,Receive mode, Inhibit CLK
 194                  { &PSCTL3               ,PS2_InhibitMode    },  // Enable Debounce,Receive mode, Inhibit CLK
 195                  #if TouchPad_only//G79:Update PS2 code base.
 196                  { &PSINT1               ,0x04                           },      // Transation Done,Start Clock Interrupt
 197                  { &PSINT2               ,0x04                           },      // Transation Done,Start Clock Interrupt
 198                  { &PSINT3               ,0x04                           },      // Transation Done,Start Clock Interrupt
 199                  #else
                              { &PSINT1               ,0x06                           },      // Transation Done,Start Clock Interrupt
                      { &PSINT2               ,0x06                           },      // Transation Done,Start Clock Interrupt
                      { &PSINT3               ,0x06                           },      // Transation Done,Start Clock Interrupt
                      #endif
 204          // Key Scan
 205                  { &KSOCTRL      ,KSOOD + KSOPU      },  //
 206                          { &KSICTRL      ,KSIPU                  },      //
 207          //
 208                          { &HOCTL2R              ,0x02                           },      //LMLKBL0016:Modify from 0x40 to 0x01.  //LMLKBL0017:change from 0x01 to 0x02.
 209                          { &HINSTC2              ,0x30                           },      // Host Indirect & LPC Memory Cycle Target Slect e-Flash
 210                          // CMW 20121022 
 211                          { &FLHCTRL3R    ,0x01                           },      // Force F-SPI Tri-State
 212          };
 213          
 214          void Core_Init_Regs(void)
 215          {
 216   1              BYTE index = 0x00;
 217   1          while(index < (sizeof(Core_reg_init_table)/sizeof(sREG_INIT)))
 218   1          {
 219   2              Tmp_XPntr = Core_reg_init_table[index].address;
 220   2                      *Tmp_XPntr = Core_reg_init_table[index].initdata;
 221   2              index ++;
 222   2          }
 223   1      
 224   1          CLEAR_MASK(FLHCTRL2R,BIT3);
 225   1      }
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION cold_reset (BEGIN)
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
0000 7800        E     MOV     R0,#LOW Ext_Cb2
0002 7622              MOV     @R0,#022H
                                           ; SOURCE LINE # 18
0004 7800        E     MOV     R0,#LOW Save_Typematic
0006 762A              MOV     @R0,#02AH
                                           ; SOURCE LINE # 19
0008 7800        E     MOV     R0,#LOW Save_Kbd_State
000A 7630              MOV     @R0,#030H
                                           ; SOURCE LINE # 21
000C 75000F      E     MOV     Led_Ctrl,#0FH
                                           ; SOURCE LINE # 22
000F E4                CLR     A
0010 F500        E     MOV     Led_Data,A
                                           ; SOURCE LINE # 23
0012 F500        E     MOV     Gen_Info,A
                                           ; SOURCE LINE # 25
0014 7800        E     MOV     R0,#LOW Int_Var
0016 E6                MOV     A,@R0
0017 54C3              ANL     A,#0C3H
0019 4428              ORL     A,#028H
001B F6                MOV     @R0,A
                                           ; SOURCE LINE # 27
001C 7800        E     MOV     R0,#LOW Flag
001E E6                MOV     A,@R0
001F 54FB              ANL     A,#0FBH
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 28
0022 7800        E     MOV     R0,#LOW Int_Var+01H
0024 E6                MOV     A,@R0
0025 5401              ANL     A,#01H
0027 4464              ORL     A,#064H
0029 F6                MOV     @R0,A
                                           ; SOURCE LINE # 30
002A 7800        E     MOV     R0,#LOW Flag
002C E6                MOV     A,@R0
002D 4401              ORL     A,#01H
002F F6                MOV     @R0,A
                                           ; SOURCE LINE # 31
0030 E6                MOV     A,@R0
0031 54DF              ANL     A,#0DFH
0033 F6                MOV     @R0,A
                                           ; SOURCE LINE # 33
0034 E6                MOV     A,@R0
0035 54F7              ANL     A,#0F7H
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 34
0038 E6                MOV     A,@R0
0039 54EF              ANL     A,#0EFH
003B F6                MOV     @R0,A
                                           ; SOURCE LINE # 36
003C E6                MOV     A,@R0
003D 4440              ORL     A,#040H
003F F6                MOV     @R0,A
                                           ; SOURCE LINE # 37
0040 750010      E     MOV     Ccb42,#010H
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 6   

                                           ; SOURCE LINE # 39
0043 E4                CLR     A
0044 900000      E     MOV     DPTR,#Pass_On
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
0048 900000      E     MOV     DPTR,#Pass_Off
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 41
004C 900000      E     MOV     DPTR,#Pass_Make1
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 42
0050 900000      E     MOV     DPTR,#Pass_Make2
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 44
0054 F500        E     MOV     MULPX,A
                                           ; SOURCE LINE # 46
0056 22                RET     
             ; FUNCTION cold_reset (END)

             ; FUNCTION common_reset (BEGIN)
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0000 E4                CLR     A
0001 F500        E     MOV     Service,A
                                           ; SOURCE LINE # 56
0003 F500        E     MOV     Service1,A
                                           ; SOURCE LINE # 58
0005 F500        E     MOV     Kbd_Response,A
                                           ; SOURCE LINE # 59
0007 F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 60
0009 F500        E     MOV     Timer_B,A
                                           ; SOURCE LINE # 61
000B F500        E     MOV     Scanner_State,A
                                           ; SOURCE LINE # 62
000D 22                RET     
             ; FUNCTION common_reset (END)

             ; FUNCTION Init_Mouse (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
0000 22                RET     
             ; FUNCTION Init_Mouse (END)

             ; FUNCTION Core_Initialization (BEGIN)
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0000 900000      E     MOV     DPTR,#RAM_16FF
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0007 120000      E     LCALL   Init_GPIO
                                           ; SOURCE LINE # 83
000A 120000      E     LCALL   Core_Init_SMBus
                                           ; SOURCE LINE # 86
000D 120000      E     LCALL   check8sreset
                                           ; SOURCE LINE # 88
0010 120000      E     LCALL   Init_Kbd
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 7   

                                           ; SOURCE LINE # 89
0013 120000      R     LCALL   cold_reset
                                           ; SOURCE LINE # 90
0016 120000      R     LCALL   common_reset
                                           ; SOURCE LINE # 91
0019 120000      R     LCALL   Init_Mouse
                                           ; SOURCE LINE # 92
001C 120000      E     LCALL   Init_Timers
                                           ; SOURCE LINE # 93
001F 120000      R     LCALL   Core_Init_Regs
                                           ; SOURCE LINE # 102
0022 900000      E     MOV     DPTR,#SysStatus2
0025 E0                MOVX    A,@DPTR
0026 20E30E            JB      ACC.3,?C0004
0029 900000      E     MOV     DPTR,#ShutDnCause
002C E0                MOVX    A,@DPTR
002D B4FC07            CJNE    A,#0FCH,?C0004
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0030 E4                CLR     A
0031 900000      E     MOV     DPTR,#BRAMBK0+07EH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0035 A3                INC     DPTR
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0037         ?C0004:
                                           ; SOURCE LINE # 107
0037 900000      E     MOV     DPTR,#BRAMBK0+07EH
003A E0                MOVX    A,@DPTR
003B 900000      E     MOV     DPTR,#ResetTestFlag
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
003F 7FC0              MOV     R7,#0C0H
0041 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 109
0044 900000      E     MOV     DPTR,#ResetTestFlag
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 110
004C 900000      E     MOV     DPTR,#ResetTestFlag
004F E0                MOVX    A,@DPTR
0050 24FE              ADD     A,#0FEH
0052 6013              JZ      ?C0007
0054 04                INC     A
0055 7023              JNZ     ?C0008
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0057         ?C0006:
                                           ; SOURCE LINE # 113
0057 900000      E     MOV     DPTR,#GCR9
005A E0                MOVX    A,@DPTR
005B 4408              ORL     A,#08H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#GPCRI5
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0063 7FC1              MOV     R7,#0C1H
                                           ; SOURCE LINE # 116
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 8   

0065 801C              SJMP    ?C0020
                                           ; SOURCE LINE # 117
0067         ?C0007:
                                           ; SOURCE LINE # 118
0067 900000      E     MOV     DPTR,#GCR9
006A E0                MOVX    A,@DPTR
006B 54F7              ANL     A,#0F7H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
006E 900000      E     MOV     DPTR,#BRAMBK0+07FH
0071 E0                MOVX    A,@DPTR
0072 900000      E     MOV     DPTR,#GPCRI5
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0076 7FC2              MOV     R7,#0C2H
0078         ?C0019:
                                           ; SOURCE LINE # 121
0078 8009              SJMP    ?C0020
                                           ; SOURCE LINE # 122
007A         ?C0008:
                                           ; SOURCE LINE # 123
007A 900000      E     MOV     DPTR,#GCR9
007D E0                MOVX    A,@DPTR
007E 54F7              ANL     A,#0F7H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0081 7FC3              MOV     R7,#0C3H
0083         ?C0020:
0083 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0086         ?C0005:
                                           ; SOURCE LINE # 127
0086 900000      E     MOV     DPTR,#GCR9
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 128
008E 900000      E     MOV     DPTR,#GPCRI5
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 020000      E     LJMP    _RamDebug
             ; FUNCTION Core_Initialization (END)

             ; FUNCTION Core_Init_ClearRam (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 146
;---- Variable 'IdataIndex' assigned to Register 'R7' ----
0000 7F20              MOV     R7,#020H
                                           ; SOURCE LINE # 147
;---- Variable 'byte_register_pntr' assigned to Register 'R4/R5' ----
0002 E4                CLR     A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
                                           ; SOURCE LINE # 148
0005 900000      E     MOV     DPTR,#WinFlashMark
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#Temp0
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
000D 900000      E     MOV     DPTR,#WinFlashMark2
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 9   

0010 E0                MOVX    A,@DPTR
0011 900000      R     MOV     DPTR,#Temp1
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0015 900000      E     MOV     DPTR,#WinFlashMark1
0018 E0                MOVX    A,@DPTR
0019 900000      R     MOV     DPTR,#Temp2
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
001D 900000      E     MOV     DPTR,#bios_count
0020 E0                MOVX    A,@DPTR
;---- Variable 'Temp3' assigned to Register 'R1' ----
0021 F9                MOV     R1,A
                                           ; SOURCE LINE # 152
0022 900000      E     MOV     DPTR,#bios_check
0025 E0                MOVX    A,@DPTR
0026 FE                MOV     R6,A
;---- Variable 'Temp4' assigned to Register 'R6' ----
0027         ?C0010:
                                           ; SOURCE LINE # 153
0027 C3                CLR     C
0028 EC                MOV     A,R4
0029 9401              SUBB    A,#01H
002B 500D              JNC     ?C0011
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
002D 8D82              MOV     DPL,R5
002F 8C83              MOV     DPH,R4
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0033 0D                INC     R5
0034 BD0001            CJNE    R5,#00H,?C0018
0037 0C                INC     R4
0038         ?C0018:
                                           ; SOURCE LINE # 157
0038 80ED              SJMP    ?C0010
003A         ?C0011:
                                           ; SOURCE LINE # 158
003A 900000      R     MOV     DPTR,#Temp0
003D E0                MOVX    A,@DPTR
003E 900000      E     MOV     DPTR,#WinFlashMark
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0042 900000      R     MOV     DPTR,#Temp1
0045 E0                MOVX    A,@DPTR
0046 900000      E     MOV     DPTR,#WinFlashMark2
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
004A 900000      R     MOV     DPTR,#Temp2
004D E0                MOVX    A,@DPTR
004E 900000      E     MOV     DPTR,#WinFlashMark1
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0052 CD                XCH     A,R5
0053 E9                MOV     A,R1
0054 CD                XCH     A,R5
0055 900000      E     MOV     DPTR,#bios_count
0058 E9                MOV     A,R1
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
005A 900000      E     MOV     DPTR,#bios_check
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 10  

005D EE                MOV     A,R6
005E F0                MOVX    @DPTR,A
005F         ?C0012:
                                           ; SOURCE LINE # 164
005F EF                MOV     A,R7
0060 C3                CLR     C
0061 94C0              SUBB    A,#0C0H
0063 5008              JNC     ?C0014
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0065 C8                XCH     A,R0
0066 EF                MOV     A,R7
0067 C8                XCH     A,R0
0068 E4                CLR     A
0069 F6                MOV     @R0,A
                                           ; SOURCE LINE # 167
006A 0F                INC     R7
                                           ; SOURCE LINE # 168
006B 80F2              SJMP    ?C0012
                                           ; SOURCE LINE # 169
006D         ?C0014:
006D 22                RET     
             ; FUNCTION Core_Init_ClearRam (END)

             ; FUNCTION Core_Init_Regs (BEGIN)
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0015:
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0002 EF                MOV     A,R7
0003 75F003            MOV     B,#03H
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW Core_reg_init_table
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH Core_reg_init_table
000E F583              MOV     DPH,A
0010 E4                CLR     A
0011 93                MOVC    A,@A+DPTR
0012 FC                MOV     R4,A
0013 7401              MOV     A,#01H
0015 93                MOVC    A,@A+DPTR
0016 FD                MOV     R5,A
0017 7800        E     MOV     R0,#LOW Tmp_XPntr
0019 EC                MOV     A,R4
001A F6                MOV     @R0,A
001B 08                INC     R0
001C ED                MOV     A,R5
001D F6                MOV     @R0,A
                                           ; SOURCE LINE # 220
001E EF                MOV     A,R7
001F 75F003            MOV     B,#03H
0022 A4                MUL     AB
0023 2400        R     ADD     A,#LOW Core_reg_init_table+02H
0025 F582              MOV     DPL,A
0027 E4                CLR     A
C51 COMPILER V8.12   CORE_INIT                                                             09/14/2018 11:08:00 PAGE 11  

0028 3400        R     ADDC    A,#HIGH Core_reg_init_table+02H
002A F583              MOV     DPH,A
002C E4                CLR     A
002D 93                MOVC    A,@A+DPTR
002E 8D82              MOV     DPL,R5
0030 8C83              MOV     DPH,R4
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0033 0F                INC     R7
                                           ; SOURCE LINE # 222
0034 EF                MOV     A,R7
0035 B418CA            CJNE    A,#018H,?C0015
0038         ?C0016:
                                           ; SOURCE LINE # 224
0038 900000      E     MOV     DPTR,#FLHCTRL2R
003B E0                MOVX    A,@DPTR
003C 54F7              ANL     A,#0F7H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
003F 22                RET     
             ; FUNCTION Core_Init_Regs (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    426    ----
   CONSTANT SIZE    =     72    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
