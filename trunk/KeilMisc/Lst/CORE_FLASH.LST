C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE CORE_FLASH
OBJECT MODULE PLACED IN Code\CORE\CORE_FLASH.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\CORE\CORE_FLASH.C LA WL(1) CD OT(8,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_FLASH.C
   3           *
   4           * Author : Dino
   5           *
   6           * Copyright (c) ITE INC. All Rights Reserved.
   7           *
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //-----------------------------------------------------------------------------
  14          // Always at 0xFF00 of code space
  15          //-----------------------------------------------------------------------------
  16          void RamCode(void)
  17          {
  18   1      
  19   1      }
  20          
  21          //-----------------------------------------------------------------------------
  22          // The function start address always at 0xFE00 (refer to link file)
  23          //-----------------------------------------------------------------------------
  24          void FuncAt_0xFE00(void)
  25          {
  26   1          _nop_();
  27   1          _nop_();
  28   1          _nop_();
  29   1          _nop_();
  30   1          _nop_();
  31   1          _nop_();
  32   1          _nop_();
  33   1          _nop_();
  34   1          FlashECCode();
  35   1      }
  36          
  37          //-----------------------------------------------------------------------------
  38          // The function of EC flash
  39          //-----------------------------------------------------------------------------
  40          void FlashECCode(void)
  41          {
  42   1              RamcodeCmd = 0x00;
  43   1              RamcodeSend = 0x00;
  44   1      
  45   1          PM1DO = 0x33;               // ACK
  46   1      
  47   1              while(1) 
  48   1              {       
  49   2                      if( IS_MASK_SET(KBHISR,IBF))
  50   2                      {
  51   3                              RamcodeCmd = KBHIDIR;
  52   3                              continue;
  53   3                      }
  54   2                      if( IS_MASK_CLEAR(PM1STS,P_IBF) ) continue;
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 2   

  55   2                      if( IS_MASK_CLEAR(PM1STS,P_C_D) ) continue;
  56   2                      RamcodeCmd = PM1DI;
  57   2      
  58   2                      if(RamcodeSend==1)
  59   2                      {
  60   3                              ECINDDR = RamcodeCmd;
  61   3                              RamcodeSend = 0x00;
  62   3                              continue;
  63   3                      }
  64   2      
  65   2                      if(RamcodeCmd==0x01)
  66   2                      {
  67   3                              ECINDAR3 = 0x4F;        // Enter follow mode
  68   3                              ECINDAR2 = 0xFF;
  69   3                              ECINDAR1 = 0xFE;
  70   3                              ECINDAR0 = 0x00;                // FFFFExx = 0xFF   
  71   3                              ECINDDR = 0x00;                 // SCE# high level
  72   3                      }
  73   2                      else if(RamcodeCmd==0x02)
  74   2                      {                                                       // Send SPI command
  75   3                              ECINDAR1 = 0xFD;
  76   3                              RamcodeSend = 1;
  77   3                      }
  78   2                      else if(RamcodeCmd==0x03)
  79   2                      {                                                       // write byte to spi
  80   3                              RamcodeSend = 1;
  81   3                      }
  82   2                      else if(RamcodeCmd==0x04)
  83   2                      {       
  84   3                              //while(IS_MASK_SET(PM1STS,P_OBF));
  85   3                              PM1DO=ECINDDR;                  // Read byte from spi                   
  86   3                      }
  87   2                      else if(RamcodeCmd==0x05)
  88   2                      {       
  89   3                              ECINDAR3 = 0x40;        //Exit follow mode
  90   3                              ECINDAR2 = 0x00;
  91   3                      }
  92   2                      else if(RamcodeCmd==0xFC)
  93   2                      {       
  94   3                              WinFlashMark = 0x33;
  95   3                  WinFlashMark2 = 0x88;
  96   3                              break;
  97   3                      }
  98   2                      else if(RamcodeCmd==0xFD)
  99   2                      {
 100   3                              WinFlashMark=0x33; //ANGELAS080:add
 101   3                      WinFlashMark2=0x88; //ANGELAS080:add
 102   3                              break;                   //ANGELAS080:add
 103   3                      }
 104   2                      else if(RamcodeCmd==0xFE)
 105   2                      {       
 106   3                              BRAM[63]=0x55;
 107   3                  WinFlashMark=0x53;//Modify after flash EC can auto poweron follow bios.
 108   3                      WinFlashMark2=0x35;//Modify after flash EC can auto poweron follow bios.
 109   3                              WDTRST = 1;                             // reset internal watch dog
 110   3                              WDTEB = 1;                              // enable internal watch dog
 111   3                              while(1);
 112   3              //      InternalWDTNow(FLASHEC_ID);
 113   3              }
 114   2              }
 115   1      
 116   1              main();
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 3   

 117   1      }
 118          //ANGELAS002:S+Support 686C flash EC in windows or Shell
 119          void FlashECCodeWinF(void)
 120          {
 121   1              RamcodeCmd = 0x00;
 122   1              RamcodeSend = 0x00;
 123   1              PM2DO = 0x33;
 124   1              
 125   1              while(1) 
 126   1              {       
 127   2                      if( IS_MASK_SET(KBHISR,IBF))
 128   2                      {
 129   3                              RamcodeCmd = KBHIDIR;
 130   3                              continue;
 131   3                      }
 132   2                      if( IS_MASK_CLEAR(PM2STS,P_IBF) ) continue;
 133   2                      if( IS_MASK_CLEAR(PM2STS,P_C_D) ) continue;
 134   2                      RamcodeCmd = PM2DI;
 135   2      
 136   2                      if(RamcodeSend==1)
 137   2                      {
 138   3                              ECINDDR = RamcodeCmd;
 139   3                              RamcodeSend = 0x00;
 140   3                              continue;
 141   3                      }
 142   2      
 143   2                      if(RamcodeCmd==0x01)
 144   2                      {
 145   3                              ECINDAR3 = 0x4F;        // Enter follow mode
 146   3                              ECINDAR2 = 0xFF;
 147   3                              ECINDAR1 = 0xFE;
 148   3                              ECINDAR0 = 0x00;                // FFFFExx = 0xFF   
 149   3                              ECINDDR = 0x00;                 // SCE# high level
 150   3                      }
 151   2                      else if(RamcodeCmd==0x02)
 152   2                      {                                                       // Send SPI command
 153   3                              ECINDAR1 = 0xFD;
 154   3                              RamcodeSend = 1;
 155   3                      }
 156   2                      else if(RamcodeCmd==0x03)
 157   2                      {                                                       // write byte to spi
 158   3                              RamcodeSend = 1;
 159   3                      }
 160   2                      else if(RamcodeCmd==0x04)
 161   2                      {       
 162   3                              //while(IS_MASK_SET(PM1STS,P_OBF));
 163   3                              PM2DO=ECINDDR;                  // Read byte from spi                   
 164   3                      }
 165   2                      else if(RamcodeCmd==0x05)
 166   2                      {       
 167   3                              ECINDAR3 = 0x40;        //Exit follow mode
 168   3                              ECINDAR2 = 0x00;
 169   3                      }
 170   2                      else if(RamcodeCmd==0xFC)
 171   2                      {       
 172   3                          WinFlashMark=0x33;
 173   3                      WinFlashMark2=0x88;
 174   3                              break;
 175   3                      }
 176   2                      else if(RamcodeCmd==0xFD)
 177   2                      {
 178   3                      WinFlashMark=0x33; //ANGELAS080:add
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 4   

 179   3                      WinFlashMark2=0x88;  //ANGELAS080:add
 180   3                              break; //ANGELAS080:add
 181   3                      }
 182   2                      else if(RamcodeCmd==0xFE)
 183   2                      {       
 184   3                              BRAM[63]=0x55;
 185   3                              WinFlashMark=0x53;
 186   3                      WinFlashMark2=0x35;
 187   3                      WDTRST = 1;                             // Reset watch dog timer
 188   3                              WDTEB = 1;                              // Enable watch dog
 189   3                      while(1);                               // Wait for watch dog time-out
 190   3                      }
 191   2              }
 192   1      
 193   1              main();
 194   1      }
 195          //ANGELAS002:E+Support 686C flash EC in windows or Shell
 196          //-----------------------------------------------------------------------------
 197          // The function of reading SPI status ( command 0x05)
 198          //      After this function, spi status will save to SPIReadStatus
 199          //-----------------------------------------------------------------------------
 200          void SPI_Read_Status(void)
 201          {
 202   1              ECINDAR3 = 0x4F; 
 203   1              ECINDAR2 = 0xFF;
 204   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 205   1      
 206   1              ECINDAR1 = 0xFE;
 207   1              ECINDDR = 0xFF;                                 // SCE# high level
 208   1              ECINDAR1 = 0xFD;
 209   1              ECINDDR = SPICmd_ReadStatus;    // Read status command
 210   1      
 211   1              SPIReadStatus = ECINDDR;                // Save status Register to SPIReadStatus
 212   1              
 213   1              ECINDAR3 = 0x40;                        //Exit follow mode
 214   1              ECINDAR2 = 0x00;
 215   1      }
 216          
 217          //-----------------------------------------------------------------------------
 218          // The function of Write SPI status ( command 0x01)
 219          //      After this function, the value of SPIWriteStatus will write to spi status
 220          //-----------------------------------------------------------------------------
 221          void SPI_Write_Status(void)
 222          {
 223   1              ECINDAR3 = 0x4F; 
 224   1              ECINDAR2 = 0xFF;
 225   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 226   1      
 227   1              ECINDAR1 = 0xFE;
 228   1              ECINDDR = 0xFF;                                 // SCE# high level
 229   1              ECINDAR1 = 0xFD;
 230   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 231   1              while(1)                                                // waiting spi free
 232   1              {
 233   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 234   2              {
 235   3                  break;
 236   3              } 
 237   2              }                                                               
 238   1      
 239   1              ECINDAR1 = 0xFE;
 240   1              ECINDDR = 0xFF;                                 // SCE# high level
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 5   

 241   1              ECINDAR1 = 0xFD;
 242   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 243   1              
 244   1          if(SPIID==SSTID)
 245   1              {
 246   2                      ECINDAR1 = 0xFE;
 247   2                      ECINDDR = 0xFF;                         // SCE# high level
 248   2                      ECINDAR1 = 0xFD;
 249   2                      ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 250   2              }    
 251   1              
 252   1              ECINDAR1 = 0xFE;
 253   1              ECINDDR = 0xFF;                                 // SCE# high level
 254   1              ECINDAR1 = 0xFD;
 255   1              ECINDDR = SPICmd_WRSR;                  // Write status command
 256   1              ECINDDR = SPIWriteStatus;               // Write SPIWriteStatus to spi status register
 257   1      
 258   1              ECINDAR1 = 0xFE;
 259   1              ECINDDR = 0xFF;                                 // SCE# high level
 260   1              ECINDAR1 = 0xFD;
 261   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 262   1              while(1)                                                // waiting spi free
 263   1              {
 264   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 265   2              {
 266   3                  break;
 267   3              } 
 268   2              }
 269   1              
 270   1              ECINDAR3 = 0x40;                        //Exit follow mode
 271   1              ECINDAR2 = 0x00;
 272   1      }
 273          
 274          //-----------------------------------------------------------------------------
 275          // The function of reading SPI ID (command 0x9F)
 276          //      After this function, spi id will save to array SPIIDBuf[] 
 277          //-----------------------------------------------------------------------------
 278          void SPI_Read_ID(void)
 279          {
 280   1              ECINDAR3 = 0x4F; 
 281   1              ECINDAR2 = 0xFF;
 282   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 283   1              
 284   1              ECINDAR1 = 0xFE;
 285   1              ECINDDR = 0xFF;                                 // SCE# high level
 286   1              ECINDAR1 = 0xFD;
 287   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 288   1              while(1)                                                // waiting spi free
 289   1              {
 290   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 291   2              {
 292   3                  break;
 293   3              } 
 294   2              }                                                               
 295   1      
 296   1              ECINDAR1 = 0xFE;
 297   1              ECINDDR = 0xFF;                                 // SCE# high level
 298   1              ECINDAR1 = 0xFD;
 299   1              ECINDDR = SPICmd_DeviceID;  // Manufacture ID command
 300   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 301   1              {
 302   2                      SPIIDBuf[SPIIndex] = ECINDDR;
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 6   

 303   2              }
 304   1              SPIID = SPIIDBuf[0];    
 305   1      
 306   1              ECINDAR1 = 0xFE;
 307   1              ECINDDR = 0xFF;                                 // SCE# high level
 308   1              ECINDAR1 = 0xFD;
 309   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 310   1      
 311   1              while(1)                                                // waiting spi free
 312   1              {
 313   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 314   2              {
 315   3                  break;
 316   3              } 
 317   2              }
 318   1              ECINDAR3 = 0x40;        //Exit follow mode
 319   1              ECINDAR2 = 0x00;
 320   1      }
 321          
 322          //-----------------------------------------------------------------------------
 323          // The function of reading SPI ID (command 0xAB)
 324          //      After this function, spi id will save to array SPIIDBuf[] 
 325          //-----------------------------------------------------------------------------
 326          void SPI_Read_ID_CmdAB(void)
 327          {
 328   1              ECINDAR3 = 0x4F; 
 329   1              ECINDAR2 = 0xFF;
 330   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 331   1              
 332   1              ECINDAR1 = 0xFE;
 333   1              ECINDDR = 0xFF;                                 // SCE# high level
 334   1              ECINDAR1 = 0xFD;
 335   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 336   1              while(1)                                                // waiting spi free
 337   1              {
 338   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 339   2              {
 340   3                  break;
 341   3              } 
 342   2              }                                                               
 343   1      
 344   1              ECINDAR1 = 0xFE;
 345   1              ECINDDR = 0xFF;                                 // SCE# high level
 346   1              ECINDAR1 = 0xFD;
 347   1              ECINDDR = SPICmd_RDID;              // Read ID command
 348   1          ECINDDR = 0x00;                         // Read ID command addr2
 349   1          ECINDDR = 0x00;                         // Read ID command addr1
 350   1          ECINDDR = 0x00;                         // Read ID command addr0
 351   1          
 352   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 353   1              {
 354   2                      SPIIDBuf[SPIIndex] = ECINDDR; 
 355   2              }
 356   1              SPIID = SPIIDBuf[0];    
 357   1      
 358   1              ECINDAR1 = 0xFE;
 359   1              ECINDDR = 0xFF;                                 // SCE# high level
 360   1              ECINDAR1 = 0xFD;
 361   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 362   1      
 363   1              while(1)                                                // waiting spi free
 364   1              {
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 7   

 365   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 366   2              {
 367   3                  break;
 368   3              } 
 369   2              }
 370   1              ECINDAR3 = 0x40;        //Exit follow mode
 371   1              ECINDAR2 = 0x00;
 372   1      }
 373          
 374          //-----------------------------------------------------------------------------
 375          // The function of Erasing SPI
 376          //-----------------------------------------------------------------------------
 377          void SPI_Erase(void)
 378          {
 379   1              ECINDAR3 = 0x4F; 
 380   1              ECINDAR2 = 0xFF;
 381   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 382   1              
 383   1              ECINDAR1 = 0xFE;
 384   1              ECINDDR = 0xFF;                                 // SCE# high level
 385   1              ECINDAR1 = 0xFD;
 386   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 387   1              while(1)                                                // waiting spi free
 388   1              {
 389   2                      if((ECINDDR&(SPIStatus_BUSY+SPIStatus_WEL))==SPIStatus_WriteEnable)
 390   2              {
 391   3                  break;
 392   3              } 
 393   2              }                                                               
 394   1      
 395   1              ECINDAR1 = 0xFE;
 396   1              ECINDDR = 0xFF;                                 // SCE# high level
 397   1              ECINDAR1 = 0xFD;
 398   1              ECINDDR = SPIAEraseCmd;                 // Send erase command
 399   1              for(SPIIndex=0x00;SPIIndex<3;SPIIndex++)
 400   1              {
 401   2                      ECINDDR = SPIAddrCycle[SPIIndex];
 402   2              }                                                               // Send address cycle
 403   1      
 404   1              ECINDAR1 = 0xFE;
 405   1              ECINDDR = 0xFF;                                 // SCE# high level
 406   1      
 407   1              ECINDAR1 = 0xFD;
 408   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 409   1      
 410   1              while(1)                                                // waiting spi free
 411   1              {
 412   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 413   2              {
 414   3                  break;
 415   3              } 
 416   2              }
 417   1              ECINDAR3 = 0x40;                        //Exit follow mode
 418   1              ECINDAR2 = 0x00;
 419   1      }
 420          
 421          //-----------------------------------------------------------------------------
 422          // The function of SPI write enable
 423          //-----------------------------------------------------------------------------
 424          void SPI_Write_Enable(void)
 425          {
 426   1              ECINDAR3 = 0x4F; 
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 8   

 427   1              ECINDAR2 = 0xFF;
 428   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 429   1              
 430   1              ECINDAR1 = 0xFE;
 431   1              ECINDDR = 0xFF;                                 // SCE# high level
 432   1              ECINDAR1 = 0xFD;
 433   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 434   1              while(1)                                                // waiting spi free
 435   1              {
 436   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 437   2              {
 438   3                  break;
 439   3              } 
 440   2              }                                                               
 441   1      
 442   1              ECINDAR1 = 0xFE;
 443   1              ECINDDR = 0xFF;                                 // SCE# high level
 444   1              ECINDAR1 = 0xFD;
 445   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 446   1              
 447   1          if(SPIID==SSTID)
 448   1          {
 449   2              ECINDAR1 = 0xFE;
 450   2              ECINDDR = 0xFF;                         // SCE# high level
 451   2              ECINDAR1 = 0xFD;
 452   2              ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 453   2          }
 454   1          
 455   1              ECINDAR1 = 0xFE;
 456   1              ECINDDR = 0xFF;                                 // SCE# high level
 457   1              ECINDAR1 = 0xFD;
 458   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 459   1              while(1)                                                // waiting spi free
 460   1              {
 461   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x02) // Check write enable and spi not busy
 462   2              {
 463   3                  break;
 464   3              } 
 465   2              }
 466   1      
 467   1              ECINDAR3 = 0x40;                        //Exit follow mode
 468   1              ECINDAR2 = 0x00;
 469   1      }
 470          
 471          //-----------------------------------------------------------------------------
 472          // The function of SPI write disable
 473          //-----------------------------------------------------------------------------
 474          void SPI_Write_Disable(void)
 475          {
 476   1              ECINDAR3 = 0x4F; 
 477   1              ECINDAR2 = 0xFF;
 478   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 479   1              
 480   1              ECINDAR1 = 0xFE;
 481   1              ECINDDR = 0xFF;                                 // SCE# high level
 482   1              ECINDAR1 = 0xFD;
 483   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 484   1              while(1)                                                // waiting spi free
 485   1              {
 486   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 487   2              {
 488   3                  break;
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 9   

 489   3              } 
 490   2              }                                                               
 491   1      
 492   1              ECINDAR1 = 0xFE;
 493   1              ECINDDR = 0xFF;                                 // SCE# high level
 494   1              ECINDAR1 = 0xFD;
 495   1              ECINDDR = SPICmd_WRDI;                  // Write disable        
 496   1      
 497   1              ECINDAR1 = 0xFE;
 498   1              ECINDDR = 0xFF;                                 // SCE# high level
 499   1              ECINDAR1 = 0xFD;
 500   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 501   1              while(1)                                                // waiting spi free
 502   1              {
 503   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x00) // Check write disable and spi not busy
 504   2              {
 505   3                  break;
 506   3              } 
 507   2              }
 508   1      
 509   1              ECINDAR3 = 0x40;                        //Exit follow mode
 510   1              ECINDAR2 = 0x00;
 511   1      }
 512          
 513          //-----------------------------------------------------------------------------
 514          // The function of other SPI write 256 bytes
 515          //-----------------------------------------------------------------------------
 516          void Other_SPI_Write_256Bytes(void)
 517          {
 518   1              ECINDAR3 = 0x4F; 
 519   1              ECINDAR2 = 0xFF;
 520   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 521   1              
 522   1              ECINDAR1 = 0xFE;
 523   1              ECINDDR = 0xFF;                                 // SCE# high level
 524   1              ECINDAR1 = 0xFD;
 525   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 526   1              while(1)                                                // waiting spi free
 527   1              {
 528   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 529   2              {
 530   3                  break;
 531   3              } 
 532   2              }                                                               
 533   1      
 534   1              ECINDAR1 = 0xFE;
 535   1              ECINDDR = 0xFF;                             // SCE# high level
 536   1              ECINDAR1 = 0xFD;
 537   1          ECINDDR = SPICmd_BYTEProgram;   // Send Program One Data Byte command
 538   1      
 539   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 540   1              ECINDDR = SPIAddrCycle[1];
 541   1              ECINDDR = SPIAddrCycle[2];
 542   1              
 543   1              SPIIndex = 0x00;
 544   1              do
 545   1              {
 546   2                      ECINDDR = *SPIDataPointer;
 547   2                      SPIIndex++;
 548   2                      SPIDataPointerLowByte++;
 549   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 550   1      
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 10  

 551   1              ECINDAR1 = 0xFE;
 552   1              ECINDDR = 0xFF;                                 // SCE# high level
 553   1              ECINDAR1 = 0xFD;
 554   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 555   1              while(1)                                                // waiting spi free
 556   1              {
 557   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 558   2              {
 559   3                  break;
 560   3              } 
 561   2              }       
 562   1      
 563   1              ECINDAR3 = 0x40;                        // Exit follow mode
 564   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 565   1      }
 566          
 567          //-----------------------------------------------------------------------------
 568          // The function of SST SPI write 256 bytes (for Word AAI command)
 569          //-----------------------------------------------------------------------------
 570          void SST_SPI_Write_256Bytes(void)
 571          {
 572   1              ECINDAR3 = 0x4F; 
 573   1              ECINDAR2 = 0xFF;
 574   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 575   1              
 576   1              ECINDAR1 = 0xFE;
 577   1              ECINDDR = 0xFF;                                 // SCE# high level
 578   1              ECINDAR1 = 0xFD;
 579   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 580   1              while(1)                                                // waiting spi free
 581   1              {
 582   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 583   2              {
 584   3                  break;
 585   3              } 
 586   2              }                                                               
 587   1      
 588   1              ECINDAR1 = 0xFE;
 589   1              ECINDDR = 0xFF;                             // SCE# high level
 590   1              ECINDAR1 = 0xFD;
 591   1          ECINDDR = SPICmd_AAIWordProgram;    // Auto Address Increment Programming
 592   1      
 593   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 594   1              ECINDDR = SPIAddrCycle[1];
 595   1              ECINDDR = SPIAddrCycle[2];
 596   1              
 597   1              SPIIndex = 0x00;
 598   1              do
 599   1              { 
 600   2                      ECINDDR = *SPIDataPointer;
 601   2                      SPIIndex++;
 602   2                      SPIDataPointerLowByte++;
 603   2      
 604   2                  if((SPIIndex%2)==0x00)
 605   2                  {
 606   3                          ECINDAR1 = 0xFE;
 607   3                          ECINDDR = 0xFF;                                     // SCE# high level
 608   3                          ECINDAR1 = 0xFD;
 609   3                          ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 610   3                          while(1)                                            // waiting spi free
 611   3                          {
 612   4                                  if((ECINDDR&SPIStatus_BUSY)==0x00)
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 11  

 613   4                          {
 614   5                          break;
 615   5                      } 
 616   4                          }   
 617   3                      
 618   3                  if(SPIIndex!=0x00)
 619   3                  {
 620   4                              ECINDAR1 = 0xFE;
 621   4                              ECINDDR = 0xFF;                                             // SCE# high level
 622   4                              ECINDAR1 = 0xFD;
 623   4                              ECINDDR = SPICmd_AAIWordProgram;                // Auto Address Increment Programming
 624   4                  }
 625   3                  }
 626   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 627   1      
 628   1              ECINDAR1 = 0xFE;
 629   1              ECINDDR = 0xFF;                             // SCE# high level
 630   1              ECINDAR1 = 0xFD;
 631   1          ECINDDR = SPICmd_WRDI;          // Write disable
 632   1      
 633   1          WNCKR = 0x00;                   // Delay 15.26 us
 634   1          WNCKR = 0x00;                   // Delay 15.26 us
 635   1          WNCKR = 0x00;                   // Delay 15.26 us
 636   1          WNCKR = 0x00;                   // Delay 15.26 us
 637   1      
 638   1              ECINDAR3 = 0x40;                        // Exit follow mode
 639   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 640   1      }
 641          
 642          //-----------------------------------------------------------------------------
 643          // The function of old SST SPI write 256 bytes
 644          //-----------------------------------------------------------------------------
 645          void Old_SST_SPI_Write_256Bytes(void)
 646          {
 647   1              ECINDAR3 = 0x4F; 
 648   1              ECINDAR2 = 0xFF;
 649   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 650   1              
 651   1              ECINDAR1 = 0xFE;
 652   1              ECINDDR = 0xFF;                                 // SCE# high level
 653   1              ECINDAR1 = 0xFD;
 654   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 655   1              while(1)                                                // waiting spi free
 656   1              {
 657   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 658   2              {
 659   3                  break;
 660   3              } 
 661   2              }                                                               
 662   1      
 663   1              ECINDAR1 = 0xFE;
 664   1              ECINDDR = 0xFF;                             // SCE# high level
 665   1              ECINDAR1 = 0xFD;
 666   1          ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 667   1      
 668   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 669   1              ECINDDR = SPIAddrCycle[1];
 670   1              ECINDDR = SPIAddrCycle[2];
 671   1              
 672   1              SPIIndex = 0x00;
 673   1              do
 674   1              {
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 12  

 675   2                      ECINDDR = *SPIDataPointer;
 676   2                      SPIIndex++;
 677   2                      SPIDataPointerLowByte++;
 678   2      
 679   2                  ECINDAR1 = 0xFE;
 680   2                  ECINDDR = 0xFF;                                     // SCE# high level
 681   2                  ECINDAR1 = 0xFD;
 682   2                  ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 683   2                  while(1)                                            // waiting spi free
 684   2                  {
 685   3                          if((ECINDDR&SPIStatus_BUSY)==0x00)
 686   3                  {
 687   4                      break;
 688   4                  } 
 689   3                  }   
 690   2      
 691   2              if(SPIIndex!=0x00)
 692   2              {
 693   3                      ECINDAR1 = 0xFE;
 694   3                      ECINDDR = 0xFF;                     // SCE# high level
 695   3                      ECINDAR1 = 0xFD;       
 696   3                  ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 697   3              }
 698   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 699   1      
 700   1              ECINDAR1 = 0xFE;
 701   1              ECINDDR = 0xFF;                             // SCE# high level
 702   1              ECINDAR1 = 0xFD;
 703   1          ECINDDR = SPICmd_WRDI;          // Write disable
 704   1      
 705   1      
 706   1          WNCKR = 0x00;                   // Delay 15.26 us
 707   1          WNCKR = 0x00;                   // Delay 15.26 us
 708   1          WNCKR = 0x00;                   // Delay 15.26 us
 709   1          WNCKR = 0x00;                   // Delay 15.26 us
 710   1              //ECINDAR1 = 0xFE;
 711   1              //ECINDDR = 0xFF;                                       // SCE# high level
 712   1              //ECINDAR1 = 0xFD;
 713   1              //ECINDDR = SPICmd_ReadStatus;  // Read Status Register
 714   1              //while(1)                                              // waiting spi free
 715   1              //{
 716   1              //      if((ECINDDR&(SPIStatus_BUSY+SSTSPIStatus_AAI))==0x00)
 717   1          //    {
 718   1          //        break;
 719   1          //    } 
 720   1              //}     
 721   1      
 722   1              ECINDAR3 = 0x40;                        // Exit follow mode
 723   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 724   1      }
 725          
 726          //-----------------------------------------------------------------------------
 727          // The function of SPI write 256 bytes
 728          //-----------------------------------------------------------------------------
 729          void SPI_Write_256Bytes(void)
 730          {
 731   1          if(SPIID==SSTID)
 732   1          {
 733   2              if(SSTDeviceID==SSTID_Old) 
 734   2              {
 735   3                  LoadSPIFucnToRam(Old_SST_SPI_Write_256Bytes);   // Load function to ram
 736   3              }
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 13  

 737   2              else
 738   2              {
 739   3                      LoadSPIFucnToRam(SST_SPI_Write_256Bytes);       // Load function to ram
 740   3              }
 741   2          }
 742   1          else
 743   1          {
 744   2                  LoadSPIFucnToRam(Other_SPI_Write_256Bytes); // Load function to ram
 745   2          }  
 746   1      }
 747          
 748          
 749          //-----------------------------------------------------------------------------
 750          // The function of SPI read 256 bytes
 751          //-----------------------------------------------------------------------------
 752          void SPI_Read_256Bytes(void)
 753          {
 754   1              ECINDAR3 = 0x4F; 
 755   1              ECINDAR2 = 0xFF;
 756   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 757   1              
 758   1              ECINDAR1 = 0xFE;
 759   1              ECINDDR = 0xFF;                                 // SCE# high level
 760   1              ECINDAR1 = 0xFD;
 761   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 762   1              while(1)                                                // waiting spi free
 763   1              {
 764   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 765   2              {
 766   3                  break;
 767   3              } 
 768   2              }                                                               
 769   1      
 770   1              ECINDAR1 = 0xFE;
 771   1              ECINDDR = 0xFF;                                         // SCE# high level
 772   1              ECINDAR1 = 0xFD;
 773   1              ECINDDR = SPICmd_HighSpeedRead;         // High-Speed Read
 774   1      
 775   1              ECINDDR = SPIAddrCycle[0];                      // For 256 bytes function limite
 776   1              ECINDDR = SPIAddrCycle[1];
 777   1              ECINDDR = SPIAddrCycle[2];
 778   1              ECINDDR = 0x00;                                         // dummy byte
 779   1              
 780   1              SPIIndex = 0x00;
 781   1              do
 782   1              {
 783   2                      *SPIDataPointer = ECINDDR;;
 784   2                      SPIIndex++;
 785   2                      SPIDataPointerLowByte++;
 786   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 787   1      
 788   1              ECINDAR1 = 0xFE;
 789   1              ECINDDR = 0xFF;                                 // SCE# high level
 790   1              ECINDAR1 = 0xFD;
 791   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 792   1              while(1)                                                // waiting spi free
 793   1              {
 794   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 795   2              {
 796   3                  break;
 797   3              } 
 798   2              }       
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 14  

 799   1      
 800   1              ECINDAR3 = 0x40;                        // Exit follow mode
 801   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 802   1      }
 803          
 804          //-----------------------------------------------------------------------------
 805          // The function of loading function to external ram 0x600 ~ 0x6FF
 806          //-----------------------------------------------------------------------------
 807          void LoadSPIFucnToRam(FUNCT_PTR_V_V funcpoint)
 808          {
 809   1              Tmp_XPntr = 0x600;
 810   1              Tmp_code_pointer = funcpoint;
 811   1      
 812   1              ITempB01 = 0x00;
 813   1              do
 814   1              {
 815   2                      *Tmp_XPntr = *Tmp_code_pointer;
 816   2              Tmp_XPntr++;
 817   2                      Tmp_code_pointer++;
 818   2                      ITempB01++;
 819   2              }while(ITempB01!=0x00);
 820   1      }
 821          
 822          //-----------------------------------------------------------------------------
 823          // The function for ITE flash utility
 824          //-----------------------------------------------------------------------------
 825          #pragma ot(7, SIZE)
 826          void ITE_Flash_Utility(void)
 827          {
 828   1              DisableAllInterrupt();                          // Disable all interrupt 
 829   1              LoadSPIFucnToRam(FlashECCode);          // Load function to ram
 830   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 831   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 832   1      }
 833          
 834          //*****************************************************************************
 835          // OEM FUNCTION CALL
 836          //*****************************************************************************
 837          //ANGELAS002:S+Support 686C flash EC in windows or Shell
 838          #pragma ot(7, SIZE)
 839          void ITE_Flash_Utility_WINF(void)
 840          {
 841   1      
 842   1              #if WDT_Support
 843   1          DisableInternalWDT();
 844   1              #endif
 845   1      
 846   1              DisableAllInterrupt();                          // Disable all interrupt 
 847   1              Tmp_XPntr = 0x700;
 848   1              Tmp_code_pointer = (void*)FlashECCodeWinF;
 849   1              ITempB01 = 0x00;
 850   1              do
 851   1              {
 852   2                      *Tmp_XPntr = *Tmp_code_pointer;
 853   2              Tmp_XPntr++;
 854   2                      Tmp_code_pointer++;
 855   2                      ITempB01++;
 856   2              }while(ITempB01!=0x00);
 857   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 858   1              _nop_();
 859   1          _nop_();
 860   1          _nop_();
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 15  

 861   1          _nop_();
 862   1          _nop_();
 863   1          _nop_();
 864   1          _nop_();
 865   1          _nop_();
 866   1          FlashECCodeWinF();  
 867   1      }
 868          //ANGELAS002:E+Support 686C flash EC in windows or Shell
 869          //-----------------------------------------------------------------------------
 870          // The function for oem code write spi status
 871          //-----------------------------------------------------------------------------
 872          #pragma ot(7, SIZE)
 873          void Do_SPI_Write_Status(BYTE statusvalue)
 874          {
 875   1              SPIWriteStatus = statusvalue;
 876   1              
 877   1              DisableAllInterrupt();                          // Disable all interrupt 
 878   1              LoadSPIFucnToRam(SPI_Write_Status);     // Load function to ram
 879   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 880   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 881   1              EnableAllInterrupt();                           // Enable all interrupt 
 882   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 883   1      }
 884          
 885          //-----------------------------------------------------------------------------
 886          // The function for oem code read spi status
 887          //              Note : SPI status always save to SPIReadStatus
 888          //-----------------------------------------------------------------------------
 889          #pragma ot(7, SIZE)
 890          void Do_SPI_Read_Status(void)
 891          {
 892   1              DisableAllInterrupt();                          // Disable all interrupt 
 893   1              LoadSPIFucnToRam(SPI_Read_Status);      // Load function to ram
 894   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 895   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 896   1              EnableAllInterrupt();                           // Enable all interrupt 
 897   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 898   1      }
 899          
 900          //-----------------------------------------------------------------------------
 901          // The function for oem code read spi ID (command 0x9F)   
 902          //              Note : SPI ID always save to array SPIIDBuf[]
 903          //-----------------------------------------------------------------------------
 904          #pragma ot(7, SIZE)
 905          void Do_SPI_Read_ID(void)
 906          {
 907   1              DisableAllInterrupt();                  // Disable all interrupt 
 908   1              LoadSPIFucnToRam(SPI_Read_ID);  // Load function to ram
 909   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 910   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 911   1              EnableAllInterrupt();               // Enable all interrupt 
 912   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 913   1      }
 914          
 915          //-----------------------------------------------------------------------------
 916          // The function for oem code read spi ID (command 0xAB)
 917          //              Note : SPI ID always save to array SPIIDBuf[]
 918          //-----------------------------------------------------------------------------
 919          #pragma ot(7, SIZE)
 920          void Do_SPI_Read_ID_CmdAB(void)
 921          {
 922   1              DisableAllInterrupt();                  // Disable all interrupt 
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 16  

 923   1              LoadSPIFucnToRam(SPI_Read_ID_CmdAB);    // Load function to ram
 924   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 925   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 926   1              EnableAllInterrupt();               // Enable all interrupt 
 927   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 928   1      }
 929          
 930          //-----------------------------------------------------------------------------
 931          // The function for oem code erase spi
 932          //              Input : 1 EraseCmd --> Only support SPICmd_Erase4KByte, 
 933          //                                                              SPICmd_Erase32KByte, and SPICmd_Erase64KByte.
 934          //                              2 Addr2    --> A23 ~ A16
 935          //                              3 Addr1    --> A15 ~ A8
 936          //                              4 Addr0    --> A7  ~ A0
 937          //-----------------------------------------------------------------------------
 938          #pragma ot(7, SIZE)
 939          void Do_SPI_Erase(BYTE EraseCmd, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 940          {
 941   1              SPIAEraseCmd = EraseCmd;
 942   1              SPIAddrCycle[0] = Addr2;
 943   1              SPIAddrCycle[1] = Addr1;
 944   1              SPIAddrCycle[2] = Addr0;
 945   1                              
 946   1              DisableAllInterrupt();                  // Disable all interrupt 
 947   1              LoadSPIFucnToRam(SPI_Erase);    // Load function to ram
 948   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 949   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 950   1              EnableAllInterrupt();               // Enable all interrupt 
 951   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 952   1      }
 953          
 954          //-----------------------------------------------------------------------------
 955          // The function for oem code write spi 256 bytes
 956          //              Input : 1 DataPointer --> Pointe to external memory
 957          //                              2 Addr2    --> A23 ~ A16
 958          //                              3 Addr1    --> A15 ~ A8
 959          //                              4 Addr0    --> A7  ~ A0
 960          //-----------------------------------------------------------------------------
 961          #pragma ot(7, SIZE)
 962          void Do_SPI_Write_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 963          {
 964   1              SPIDataPointer = DataPointer;
 965   1              SPIAddrCycle[0] = Addr2;
 966   1              SPIAddrCycle[1] = Addr1;
 967   1              SPIAddrCycle[2] = Addr0;
 968   1                              
 969   1              DisableAllInterrupt();                          // Disable all interrupt 
 970   1              SPI_Write_256Bytes();               // Load function to ram
 971   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 972   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 973   1              EnableAllInterrupt();                           // Enable all interrupt 
 974   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 975   1      }
 976          
 977          //-----------------------------------------------------------------------------
 978          // The function for oem code read spi 256 bytes to external memory
 979          //              Input : 1 DataPointer --> Pointe to external memory
 980          //                              2 Addr2    --> A23 ~ A16
 981          //                              3 Addr1    --> A15 ~ A8
 982          //                              4 Addr0    --> A7  ~ A0
 983          //-----------------------------------------------------------------------------
 984          #pragma ot(7, SIZE)
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 17  

 985          void Do_SPI_Read_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 986          {
 987   1              SPIDataPointer = DataPointer;
 988   1              SPIAddrCycle[0] = Addr2;
 989   1              SPIAddrCycle[1] = Addr1;
 990   1              SPIAddrCycle[2] = Addr0;
 991   1                              
 992   1              DisableAllInterrupt();                          // Disable all interrupt 
 993   1              LoadSPIFucnToRam(SPI_Read_256Bytes);    // Load function to ram
 994   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 995   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 996   1              EnableAllInterrupt();                           // Enable all interrupt 
 997   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 998   1      }
 999          
1000          //-----------------------------------------------------------------------------
1001          // The function for oem code spi write enable
1002          //-----------------------------------------------------------------------------
1003          #pragma ot(7, SIZE)
1004          void Do_SPI_Write_Enable(void)
1005          {
1006   1              DisableAllInterrupt();                          // Disable all interrupt 
1007   1              LoadSPIFucnToRam(SPI_Write_Enable);     // Load function to ram
1008   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
1009   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
1010   1              EnableAllInterrupt();                           // Enable all interrupt 
1011   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
1012   1      }
1013          
1014          //-----------------------------------------------------------------------------
1015          // The function for oem code spi write disable
1016          //-----------------------------------------------------------------------------
1017          #pragma ot(7, SIZE)
1018          void Do_SPI_Write_Disable(void)
1019          {
1020   1              DisableAllInterrupt();                          // Disable all interrupt 
1021   1              LoadSPIFucnToRam(SPI_Write_Disable);    // Load function to ram
1022   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
1023   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
1024   1              EnableAllInterrupt();                           // Enable all interrupt 
1025   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
1026   1      }
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 18  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION RamCode (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 19
0000 22                RET     
             ; FUNCTION RamCode (END)

             ; FUNCTION FuncAt_0xFE00 (BEGIN)
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 00                NOP     
                                           ; SOURCE LINE # 27
0001 00                NOP     
                                           ; SOURCE LINE # 28
0002 00                NOP     
                                           ; SOURCE LINE # 29
0003 00                NOP     
                                           ; SOURCE LINE # 30
0004 00                NOP     
                                           ; SOURCE LINE # 31
0005 00                NOP     
                                           ; SOURCE LINE # 32
0006 00                NOP     
                                           ; SOURCE LINE # 33
0007 00                NOP     
                                           ; SOURCE LINE # 34
0008 020000      R     LJMP    FlashECCode
             ; FUNCTION FuncAt_0xFE00 (END)

             ; FUNCTION FlashECCode (BEGIN)
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#RamcodeCmd
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
0005 900000      E     MOV     DPTR,#RamcodeSend
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0009 900000      E     MOV     DPTR,#PM1DO
000C 7433              MOV     A,#033H
000E F0                MOVX    @DPTR,A
000F         ?C0003:
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
000F 900000      E     MOV     DPTR,#KBHISR
0012 E0                MOVX    A,@DPTR
0013 30E10A            JNB     ACC.1,?C0005
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0016 900000      E     MOV     DPTR,#KBHIDIR
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#RamcodeCmd
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
001E 80EF              SJMP    ?C0003
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 19  

                                           ; SOURCE LINE # 53
0020         ?C0005:
                                           ; SOURCE LINE # 54
0020 900000      E     MOV     DPTR,#PM1STS
0023 E0                MOVX    A,@DPTR
0024 30E1E8            JNB     ACC.1,?C0003
0027         ?C0006:
                                           ; SOURCE LINE # 55
0027 900000      E     MOV     DPTR,#PM1STS
002A E0                MOVX    A,@DPTR
002B 30E3E1            JNB     ACC.3,?C0003
002E         ?C0007:
                                           ; SOURCE LINE # 56
002E 900000      E     MOV     DPTR,#PM1DI
0031 E0                MOVX    A,@DPTR
0032 900000      E     MOV     DPTR,#RamcodeCmd
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 58
0036 900000      E     MOV     DPTR,#RamcodeSend
0039 E0                MOVX    A,@DPTR
003A B4010F            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
003D 900000      E     MOV     DPTR,#RamcodeCmd
0040 E0                MOVX    A,@DPTR
0041 900000      E     MOV     DPTR,#ECINDDR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#RamcodeSend
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
004A 80C3              SJMP    ?C0003
                                           ; SOURCE LINE # 63
004C         ?C0008:
                                           ; SOURCE LINE # 65
004C 900000      E     MOV     DPTR,#RamcodeCmd
004F E0                MOVX    A,@DPTR
0050 B4011C            CJNE    A,#01H,?C0009
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0053 900000      E     MOV     DPTR,#ECINDAR3
0056 744F              MOV     A,#04FH
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0059 900000      E     MOV     DPTR,#ECINDAR2
005C 74FF              MOV     A,#0FFH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
005F 900000      E     MOV     DPTR,#ECINDAR1
0062 14                DEC     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0064 E4                CLR     A
0065 900000      E     MOV     DPTR,#ECINDAR0
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
0069 900000      E     MOV     DPTR,#ECINDDR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
006D 80A0              SJMP    ?C0003
006F         ?C0009:
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 20  

                                           ; SOURCE LINE # 73
006F 900000      E     MOV     DPTR,#RamcodeCmd
0072 E0                MOVX    A,@DPTR
0073 B40208            CJNE    A,#02H,?C0011
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FD              MOV     A,#0FDH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
007C 8007              SJMP    ?C0175
007E         ?C0011:
                                           ; SOURCE LINE # 78
007E 900000      E     MOV     DPTR,#RamcodeCmd
0081 E0                MOVX    A,@DPTR
0082 B40308            CJNE    A,#03H,?C0013
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0085         ?C0175:
0085 900000      E     MOV     DPTR,#RamcodeSend
0088 7401              MOV     A,#01H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
008B 8082              SJMP    ?C0003
008D         ?C0013:
                                           ; SOURCE LINE # 82
008D 900000      E     MOV     DPTR,#RamcodeCmd
0090 E0                MOVX    A,@DPTR
0091 B4040B            CJNE    A,#04H,?C0015
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 85
0094 900000      E     MOV     DPTR,#ECINDDR
0097 E0                MOVX    A,@DPTR
0098 900000      E     MOV     DPTR,#PM1DO
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
009C 020000      R     LJMP    ?C0003
009F         ?C0015:
                                           ; SOURCE LINE # 87
009F 900000      E     MOV     DPTR,#RamcodeCmd
00A2 E0                MOVX    A,@DPTR
00A3 B4050E            CJNE    A,#05H,?C0017
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 7440              MOV     A,#040H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
00AC E4                CLR     A
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
00B1 020000      R     LJMP    ?C0003
00B4         ?C0017:
                                           ; SOURCE LINE # 92
00B4 900000      E     MOV     DPTR,#RamcodeCmd
00B7 E0                MOVX    A,@DPTR
00B8 B4FC02            CJNE    A,#0FCH,?C0019
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 21  

                                           ; SOURCE LINE # 96
00BB 8007              SJMP    ?C0176
                                           ; SOURCE LINE # 97
00BD         ?C0019:
                                           ; SOURCE LINE # 98
00BD 900000      E     MOV     DPTR,#RamcodeCmd
00C0 E0                MOVX    A,@DPTR
00C1 B4FD0E            CJNE    A,#0FDH,?C0021
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
00C4         ?C0176:
00C4 900000      E     MOV     DPTR,#WinFlashMark
00C7 7433              MOV     A,#033H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
00CA 900000      E     MOV     DPTR,#WinFlashMark2
00CD 7488              MOV     A,#088H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
00D0 8023              SJMP    ?C0004
                                           ; SOURCE LINE # 103
00D2         ?C0021:
                                           ; SOURCE LINE # 104
00D2 900000      E     MOV     DPTR,#RamcodeCmd
00D5 E0                MOVX    A,@DPTR
00D6 64FE              XRL     A,#0FEH
00D8 6003              JZ      $ + 5H
00DA 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
00DD 900000      E     MOV     DPTR,#BRAM+03FH
00E0 7455              MOV     A,#055H
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
00E3 900000      E     MOV     DPTR,#WinFlashMark
00E6 7453              MOV     A,#053H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
00E9 900000      E     MOV     DPTR,#WinFlashMark2
00EC 7435              MOV     A,#035H
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
00EF D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 110
00F1 D2D9              SETB    WDTEB
00F3         ?C0024:
                                           ; SOURCE LINE # 111
00F3 80FE              SJMP    ?C0024
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
00F5         ?C0004:
                                           ; SOURCE LINE # 116
00F5 020000      E     LJMP    main
             ; FUNCTION FlashECCode (END)

             ; FUNCTION FlashECCodeWinF (BEGIN)
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#RamcodeCmd
0004 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 22  

                                           ; SOURCE LINE # 122
0005 900000      E     MOV     DPTR,#RamcodeSend
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0009 900000      E     MOV     DPTR,#PM2DO
000C 7433              MOV     A,#033H
000E F0                MOVX    @DPTR,A
000F         ?C0027:
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
000F 900000      E     MOV     DPTR,#KBHISR
0012 E0                MOVX    A,@DPTR
0013 30E10A            JNB     ACC.1,?C0029
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0016 900000      E     MOV     DPTR,#KBHIDIR
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#RamcodeCmd
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
001E 80EF              SJMP    ?C0027
                                           ; SOURCE LINE # 131
0020         ?C0029:
                                           ; SOURCE LINE # 132
0020 900000      E     MOV     DPTR,#PM2STS
0023 E0                MOVX    A,@DPTR
0024 30E1E8            JNB     ACC.1,?C0027
0027         ?C0030:
                                           ; SOURCE LINE # 133
0027 900000      E     MOV     DPTR,#PM2STS
002A E0                MOVX    A,@DPTR
002B 30E3E1            JNB     ACC.3,?C0027
002E         ?C0031:
                                           ; SOURCE LINE # 134
002E 900000      E     MOV     DPTR,#PM2DI
0031 E0                MOVX    A,@DPTR
0032 900000      E     MOV     DPTR,#RamcodeCmd
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0036 900000      E     MOV     DPTR,#RamcodeSend
0039 E0                MOVX    A,@DPTR
003A B4010F            CJNE    A,#01H,?C0032
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
003D 900000      E     MOV     DPTR,#RamcodeCmd
0040 E0                MOVX    A,@DPTR
0041 900000      E     MOV     DPTR,#ECINDDR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#RamcodeSend
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
004A 80C3              SJMP    ?C0027
                                           ; SOURCE LINE # 141
004C         ?C0032:
                                           ; SOURCE LINE # 143
004C 900000      E     MOV     DPTR,#RamcodeCmd
004F E0                MOVX    A,@DPTR
0050 B4011C            CJNE    A,#01H,?C0033
                                           ; SOURCE LINE # 144
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 23  

                                           ; SOURCE LINE # 145
0053 900000      E     MOV     DPTR,#ECINDAR3
0056 744F              MOV     A,#04FH
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0059 900000      E     MOV     DPTR,#ECINDAR2
005C 74FF              MOV     A,#0FFH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
005F 900000      E     MOV     DPTR,#ECINDAR1
0062 14                DEC     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0064 E4                CLR     A
0065 900000      E     MOV     DPTR,#ECINDAR0
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0069 900000      E     MOV     DPTR,#ECINDDR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
006D 80A0              SJMP    ?C0027
006F         ?C0033:
                                           ; SOURCE LINE # 151
006F 900000      E     MOV     DPTR,#RamcodeCmd
0072 E0                MOVX    A,@DPTR
0073 B40208            CJNE    A,#02H,?C0035
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FD              MOV     A,#0FDH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
007C 8007              SJMP    ?C0177
007E         ?C0035:
                                           ; SOURCE LINE # 156
007E 900000      E     MOV     DPTR,#RamcodeCmd
0081 E0                MOVX    A,@DPTR
0082 B40308            CJNE    A,#03H,?C0037
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0085         ?C0177:
0085 900000      E     MOV     DPTR,#RamcodeSend
0088 7401              MOV     A,#01H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
008B 8082              SJMP    ?C0027
008D         ?C0037:
                                           ; SOURCE LINE # 160
008D 900000      E     MOV     DPTR,#RamcodeCmd
0090 E0                MOVX    A,@DPTR
0091 B4040B            CJNE    A,#04H,?C0039
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 163
0094 900000      E     MOV     DPTR,#ECINDDR
0097 E0                MOVX    A,@DPTR
0098 900000      E     MOV     DPTR,#PM2DO
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
009C 020000      R     LJMP    ?C0027
009F         ?C0039:
                                           ; SOURCE LINE # 165
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 24  

009F 900000      E     MOV     DPTR,#RamcodeCmd
00A2 E0                MOVX    A,@DPTR
00A3 B4050E            CJNE    A,#05H,?C0041
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 7440              MOV     A,#040H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
00AC E4                CLR     A
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
00B1 020000      R     LJMP    ?C0027
00B4         ?C0041:
                                           ; SOURCE LINE # 170
00B4 900000      E     MOV     DPTR,#RamcodeCmd
00B7 E0                MOVX    A,@DPTR
00B8 B4FC02            CJNE    A,#0FCH,?C0043
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
00BB 8007              SJMP    ?C0178
                                           ; SOURCE LINE # 175
00BD         ?C0043:
                                           ; SOURCE LINE # 176
00BD 900000      E     MOV     DPTR,#RamcodeCmd
00C0 E0                MOVX    A,@DPTR
00C1 B4FD0E            CJNE    A,#0FDH,?C0045
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
00C4         ?C0178:
00C4 900000      E     MOV     DPTR,#WinFlashMark
00C7 7433              MOV     A,#033H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
00CA 900000      E     MOV     DPTR,#WinFlashMark2
00CD 7488              MOV     A,#088H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
00D0 8023              SJMP    ?C0028
                                           ; SOURCE LINE # 181
00D2         ?C0045:
                                           ; SOURCE LINE # 182
00D2 900000      E     MOV     DPTR,#RamcodeCmd
00D5 E0                MOVX    A,@DPTR
00D6 64FE              XRL     A,#0FEH
00D8 6003              JZ      $ + 5H
00DA 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
00DD 900000      E     MOV     DPTR,#BRAM+03FH
00E0 7455              MOV     A,#055H
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
00E3 900000      E     MOV     DPTR,#WinFlashMark
00E6 7453              MOV     A,#053H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
00E9 900000      E     MOV     DPTR,#WinFlashMark2
00EC 7435              MOV     A,#035H
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 25  

00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
00EF D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 188
00F1 D2D9              SETB    WDTEB
00F3         ?C0048:
                                           ; SOURCE LINE # 189
00F3 80FE              SJMP    ?C0048
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
00F5         ?C0028:
                                           ; SOURCE LINE # 193
00F5 020000      E     LJMP    main
             ; FUNCTION FlashECCodeWinF (END)

             ; FUNCTION SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0028 E0                MOVX    A,@DPTR
0029 900000      E     MOV     DPTR,#SPIReadStatus
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
002D 900000      E     MOV     DPTR,#ECINDAR3
0030 7440              MOV     A,#040H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0033 E4                CLR     A
0034 900000      E     MOV     DPTR,#ECINDAR2
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
0038 22                RET     
             ; FUNCTION SPI_Read_Status (END)

C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 26  

             ; FUNCTION SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0052:
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0052
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
002F         ?C0053:
                                           ; SOURCE LINE # 239
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7406              MOV     A,#06H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0046 900000      E     MOV     DPTR,#SPIID
0049 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 27  

004A B4BF17            CJNE    A,#0BFH,?C0055
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
004D 900000      E     MOV     DPTR,#ECINDAR1
0050 74FE              MOV     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0053 900000      E     MOV     DPTR,#ECINDDR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0058 900000      E     MOV     DPTR,#ECINDAR1
005B 74FD              MOV     A,#0FDH
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
005E 900000      E     MOV     DPTR,#ECINDDR
0061 7450              MOV     A,#050H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
0064         ?C0055:
                                           ; SOURCE LINE # 252
0064 900000      E     MOV     DPTR,#ECINDAR1
0067 74FE              MOV     A,#0FEH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
006A 900000      E     MOV     DPTR,#ECINDDR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
006F 900000      E     MOV     DPTR,#ECINDAR1
0072 74FD              MOV     A,#0FDH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0075 900000      E     MOV     DPTR,#ECINDDR
0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
007B 900000      E     MOV     DPTR,#SPIWriteStatus
007E E0                MOVX    A,@DPTR
007F 900000      E     MOV     DPTR,#ECINDDR
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0083 900000      E     MOV     DPTR,#ECINDAR1
0086 74FE              MOV     A,#0FEH
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0089 900000      E     MOV     DPTR,#ECINDDR
008C 04                INC     A
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
008E 900000      E     MOV     DPTR,#ECINDAR1
0091 74FD              MOV     A,#0FDH
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
0094 900000      E     MOV     DPTR,#ECINDDR
0097 7405              MOV     A,#05H
0099 F0                MOVX    @DPTR,A
009A         ?C0056:
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
009A 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 28  

009D E0                MOVX    A,@DPTR
009E 20E0F9            JB      ACC.0,?C0056
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
00A1         ?C0057:
                                           ; SOURCE LINE # 270
00A1 900000      E     MOV     DPTR,#ECINDAR3
00A4 7440              MOV     A,#040H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
00A7 E4                CLR     A
00A8 900000      E     MOV     DPTR,#ECINDAR2
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
00AC 22                RET     
             ; FUNCTION SPI_Write_Status (END)

             ; FUNCTION SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0060:
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0060
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
002F         ?C0061:
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 29  

                                           ; SOURCE LINE # 296
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0040 900000      E     MOV     DPTR,#ECINDDR
0043 749F              MOV     A,#09FH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
0046 E4                CLR     A
0047 900000      E     MOV     DPTR,#SPIIndex
004A F0                MOVX    @DPTR,A
004B         ?C0063:
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
004B 900000      E     MOV     DPTR,#ECINDDR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 900000      E     MOV     DPTR,#SPIIndex
0053 E0                MOVX    A,@DPTR
0054 2400        E     ADD     A,#LOW SPIIDBuf
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH SPIIDBuf
005B F583              MOV     DPH,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
005F 900000      E     MOV     DPTR,#SPIIndex
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 E0                MOVX    A,@DPTR
0066 B404E2            CJNE    A,#04H,?C0063
0069         ?C0064:
                                           ; SOURCE LINE # 304
0069 900000      E     MOV     DPTR,#SPIIDBuf
006C E0                MOVX    A,@DPTR
006D 900000      E     MOV     DPTR,#SPIID
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0071 900000      E     MOV     DPTR,#ECINDAR1
0074 74FE              MOV     A,#0FEH
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
0077 900000      E     MOV     DPTR,#ECINDDR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
007C 900000      E     MOV     DPTR,#ECINDAR1
007F 74FD              MOV     A,#0FDH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
0082 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 30  

0085 7405              MOV     A,#05H
0087 F0                MOVX    @DPTR,A
0088         ?C0066:
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0088 900000      E     MOV     DPTR,#ECINDDR
008B E0                MOVX    A,@DPTR
008C 20E0F9            JB      ACC.0,?C0066
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
008F         ?C0067:
                                           ; SOURCE LINE # 318
008F 900000      E     MOV     DPTR,#ECINDAR3
0092 7440              MOV     A,#040H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
0095 E4                CLR     A
0096 900000      E     MOV     DPTR,#ECINDAR2
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
009A 22                RET     
             ; FUNCTION SPI_Read_ID (END)

             ; FUNCTION SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0070:
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0028 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 31  

002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0070
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
002F         ?C0071:
                                           ; SOURCE LINE # 344
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AB              MOV     A,#0ABH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
004A 900000      E     MOV     DPTR,#SPIIndex
004D F0                MOVX    @DPTR,A
004E         ?C0073:
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
004E 900000      E     MOV     DPTR,#ECINDDR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 900000      E     MOV     DPTR,#SPIIndex
0056 E0                MOVX    A,@DPTR
0057 2400        E     ADD     A,#LOW SPIIDBuf
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH SPIIDBuf
005E F583              MOV     DPH,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0062 900000      E     MOV     DPTR,#SPIIndex
0065 E0                MOVX    A,@DPTR
0066 04                INC     A
0067 F0                MOVX    @DPTR,A
0068 E0                MOVX    A,@DPTR
0069 B404E2            CJNE    A,#04H,?C0073
006C         ?C0074:
                                           ; SOURCE LINE # 356
006C 900000      E     MOV     DPTR,#SPIIDBuf
006F E0                MOVX    A,@DPTR
0070 900000      E     MOV     DPTR,#SPIID
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 32  

0074 900000      E     MOV     DPTR,#ECINDAR1
0077 74FE              MOV     A,#0FEH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
007A 900000      E     MOV     DPTR,#ECINDDR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
007F 900000      E     MOV     DPTR,#ECINDAR1
0082 74FD              MOV     A,#0FDH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
0085 900000      E     MOV     DPTR,#ECINDDR
0088 7405              MOV     A,#05H
008A F0                MOVX    @DPTR,A
008B         ?C0076:
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
008B 900000      E     MOV     DPTR,#ECINDDR
008E E0                MOVX    A,@DPTR
008F 20E0F9            JB      ACC.0,?C0076
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0092         ?C0077:
                                           ; SOURCE LINE # 370
0092 900000      E     MOV     DPTR,#ECINDAR3
0095 7440              MOV     A,#040H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0098 E4                CLR     A
0099 900000      E     MOV     DPTR,#ECINDAR2
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
009D 22                RET     
             ; FUNCTION SPI_Read_ID_CmdAB (END)

             ; FUNCTION SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 33  

                                           ; SOURCE LINE # 385
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0080:
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 5403              ANL     A,#03H
002E FF                MOV     R7,A
002F BF02F6            CJNE    R7,#02H,?C0080
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0032         ?C0081:
                                           ; SOURCE LINE # 395
0032 900000      E     MOV     DPTR,#ECINDAR1
0035 74FE              MOV     A,#0FEH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
0038 900000      E     MOV     DPTR,#ECINDDR
003B 04                INC     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
003D 900000      E     MOV     DPTR,#ECINDAR1
0040 74FD              MOV     A,#0FDH
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
0043 900000      E     MOV     DPTR,#SPIAEraseCmd
0046 E0                MOVX    A,@DPTR
0047 900000      E     MOV     DPTR,#ECINDDR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
004B E4                CLR     A
004C 900000      E     MOV     DPTR,#SPIIndex
004F F0                MOVX    @DPTR,A
0050         ?C0083:
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0050 900000      E     MOV     DPTR,#SPIIndex
0053 E0                MOVX    A,@DPTR
0054 2400        E     ADD     A,#LOW SPIAddrCycle
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH SPIAddrCycle
005B F583              MOV     DPH,A
005D E0                MOVX    A,@DPTR
005E 900000      E     MOV     DPTR,#ECINDDR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0062 900000      E     MOV     DPTR,#SPIIndex
0065 E0                MOVX    A,@DPTR
0066 04                INC     A
0067 F0                MOVX    @DPTR,A
0068 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 34  

0069 B403E4            CJNE    A,#03H,?C0083
006C         ?C0084:
                                           ; SOURCE LINE # 404
006C 900000      E     MOV     DPTR,#ECINDAR1
006F 74FE              MOV     A,#0FEH
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
0072 900000      E     MOV     DPTR,#ECINDDR
0075 04                INC     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0077 900000      E     MOV     DPTR,#ECINDAR1
007A 74FD              MOV     A,#0FDH
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
007D 900000      E     MOV     DPTR,#ECINDDR
0080 7405              MOV     A,#05H
0082 F0                MOVX    @DPTR,A
0083         ?C0086:
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
0083 900000      E     MOV     DPTR,#ECINDDR
0086 E0                MOVX    A,@DPTR
0087 20E0F9            JB      ACC.0,?C0086
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
008A         ?C0087:
                                           ; SOURCE LINE # 417
008A 900000      E     MOV     DPTR,#ECINDAR3
008D 7440              MOV     A,#040H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
0090 E4                CLR     A
0091 900000      E     MOV     DPTR,#ECINDAR2
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0095 22                RET     
             ; FUNCTION SPI_Erase (END)

             ; FUNCTION SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 35  

0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0090:
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0090
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
002F         ?C0091:
                                           ; SOURCE LINE # 442
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7406              MOV     A,#06H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
0046 900000      E     MOV     DPTR,#SPIID
0049 E0                MOVX    A,@DPTR
004A B4BF17            CJNE    A,#0BFH,?C0093
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
004D 900000      E     MOV     DPTR,#ECINDAR1
0050 74FE              MOV     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
0053 900000      E     MOV     DPTR,#ECINDDR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
0058 900000      E     MOV     DPTR,#ECINDAR1
005B 74FD              MOV     A,#0FDH
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
005E 900000      E     MOV     DPTR,#ECINDDR
0061 7450              MOV     A,#050H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
0064         ?C0093:
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 36  

                                           ; SOURCE LINE # 455
0064 900000      E     MOV     DPTR,#ECINDAR1
0067 74FE              MOV     A,#0FEH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
006A 900000      E     MOV     DPTR,#ECINDDR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
006F 900000      E     MOV     DPTR,#ECINDAR1
0072 74FD              MOV     A,#0FDH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
0075 900000      E     MOV     DPTR,#ECINDDR
0078 7405              MOV     A,#05H
007A F0                MOVX    @DPTR,A
007B         ?C0094:
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
007B 900000      E     MOV     DPTR,#ECINDDR
007E E0                MOVX    A,@DPTR
007F 5403              ANL     A,#03H
0081 FF                MOV     R7,A
0082 BF02F6            CJNE    R7,#02H,?C0094
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0085         ?C0095:
                                           ; SOURCE LINE # 467
0085 900000      E     MOV     DPTR,#ECINDAR3
0088 7440              MOV     A,#040H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
008B E4                CLR     A
008C 900000      E     MOV     DPTR,#ECINDAR2
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
0090 22                RET     
             ; FUNCTION SPI_Write_Enable (END)

             ; FUNCTION SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 37  

0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0098:
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0098
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
002F         ?C0099:
                                           ; SOURCE LINE # 492
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7404              MOV     A,#04H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0046 900000      E     MOV     DPTR,#ECINDAR1
0049 74FE              MOV     A,#0FEH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
004C 900000      E     MOV     DPTR,#ECINDDR
004F 04                INC     A
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
0051 900000      E     MOV     DPTR,#ECINDAR1
0054 74FD              MOV     A,#0FDH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
0057 900000      E     MOV     DPTR,#ECINDDR
005A 7405              MOV     A,#05H
005C F0                MOVX    @DPTR,A
005D         ?C0101:
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
005D 900000      E     MOV     DPTR,#ECINDDR
0060 E0                MOVX    A,@DPTR
0061 5403              ANL     A,#03H
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 38  

0063 70F8              JNZ     ?C0101
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
0065         ?C0102:
                                           ; SOURCE LINE # 509
0065 900000      E     MOV     DPTR,#ECINDAR3
0068 7440              MOV     A,#040H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
006B E4                CLR     A
006C 900000      E     MOV     DPTR,#ECINDAR2
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0070 22                RET     
             ; FUNCTION SPI_Write_Disable (END)

             ; FUNCTION Other_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 522
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0105:
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0105
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
002F         ?C0106:
                                           ; SOURCE LINE # 534
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 39  

002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7402              MOV     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 539
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0110:
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
007F 900000      E     MOV     DPTR,#SPIIndex
0082 E0                MOVX    A,@DPTR
0083 70DE              JNZ     ?C0110
                                           ; SOURCE LINE # 551
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 40  

0085 900000      E     MOV     DPTR,#ECINDAR1
0088 74FE              MOV     A,#0FEH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
008B 900000      E     MOV     DPTR,#ECINDDR
008E 04                INC     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0090 900000      E     MOV     DPTR,#ECINDAR1
0093 74FD              MOV     A,#0FDH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0096 900000      E     MOV     DPTR,#ECINDDR
0099 7405              MOV     A,#05H
009B F0                MOVX    @DPTR,A
009C         ?C0111:
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
009C 900000      E     MOV     DPTR,#ECINDDR
009F E0                MOVX    A,@DPTR
00A0 20E0F9            JB      ACC.0,?C0111
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
00A3         ?C0112:
                                           ; SOURCE LINE # 563
00A3 900000      E     MOV     DPTR,#ECINDAR3
00A6 7440              MOV     A,#040H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
00A9 E4                CLR     A
00AA 900000      E     MOV     DPTR,#ECINDAR2
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
00AE 22                RET     
             ; FUNCTION Other_SPI_Write_256Bytes (END)

             ; FUNCTION SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 577
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 41  

                                           ; SOURCE LINE # 578
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 579
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0115:
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0115
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
002F         ?C0116:
                                           ; SOURCE LINE # 588
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AD              MOV     A,#0ADH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0120:
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 42  

0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
007F 900000      E     MOV     DPTR,#SPIIndex
0082 E0                MOVX    A,@DPTR
0083 20E03B            JB      ACC.0,?C0118
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
0086 900000      E     MOV     DPTR,#ECINDAR1
0089 74FE              MOV     A,#0FEH
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
008C 900000      E     MOV     DPTR,#ECINDDR
008F 04                INC     A
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
0091 900000      E     MOV     DPTR,#ECINDAR1
0094 74FD              MOV     A,#0FDH
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
0097 900000      E     MOV     DPTR,#ECINDDR
009A 7405              MOV     A,#05H
009C F0                MOVX    @DPTR,A
009D         ?C0122:
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
009D 900000      E     MOV     DPTR,#ECINDDR
00A0 E0                MOVX    A,@DPTR
00A1 20E0F9            JB      ACC.0,?C0122
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
00A4         ?C0123:
                                           ; SOURCE LINE # 618
00A4 900000      E     MOV     DPTR,#SPIIndex
00A7 E0                MOVX    A,@DPTR
00A8 6017              JZ      ?C0118
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
00AA 900000      E     MOV     DPTR,#ECINDAR1
00AD 74FE              MOV     A,#0FEH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
00B0 900000      E     MOV     DPTR,#ECINDDR
00B3 04                INC     A
00B4 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 43  

                                           ; SOURCE LINE # 622
00B5 900000      E     MOV     DPTR,#ECINDAR1
00B8 74FD              MOV     A,#0FDH
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
00BB 900000      E     MOV     DPTR,#ECINDDR
00BE 74AD              MOV     A,#0ADH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 626
00C1         ?C0118:
00C1 900000      E     MOV     DPTR,#SPIIndex
00C4 E0                MOVX    A,@DPTR
00C5 709C              JNZ     ?C0120
                                           ; SOURCE LINE # 628
00C7 900000      E     MOV     DPTR,#ECINDAR1
00CA 74FE              MOV     A,#0FEH
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
00CD 900000      E     MOV     DPTR,#ECINDDR
00D0 04                INC     A
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
00D2 900000      E     MOV     DPTR,#ECINDAR1
00D5 74FD              MOV     A,#0FDH
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
00D8 900000      E     MOV     DPTR,#ECINDDR
00DB 7404              MOV     A,#04H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
00DE E4                CLR     A
00DF 900000      E     MOV     DPTR,#WNCKR
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 634
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 635
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
00E6 900000      E     MOV     DPTR,#ECINDAR3
00E9 7440              MOV     A,#040H
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
00EC E4                CLR     A
00ED 900000      E     MOV     DPTR,#ECINDAR2
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
00F1 22                RET     
             ; FUNCTION SST_SPI_Write_256Bytes (END)

             ; FUNCTION Old_SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 645
                                           ; SOURCE LINE # 646
                                           ; SOURCE LINE # 647
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
0006 900000      E     MOV     DPTR,#ECINDAR2
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 44  

0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 649
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 652
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0127:
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0127
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
002F         ?C0128:
                                           ; SOURCE LINE # 663
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 664
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 666
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AF              MOV     A,#0AFH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 45  

0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0132:
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 676
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
007F 900000      E     MOV     DPTR,#ECINDAR1
0082 74FE              MOV     A,#0FEH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
0085 900000      E     MOV     DPTR,#ECINDDR
0088 04                INC     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
008A 900000      E     MOV     DPTR,#ECINDAR1
008D 74FD              MOV     A,#0FDH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0090 900000      E     MOV     DPTR,#ECINDDR
0093 7405              MOV     A,#05H
0095 F0                MOVX    @DPTR,A
0096         ?C0133:
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
0096 900000      E     MOV     DPTR,#ECINDDR
0099 E0                MOVX    A,@DPTR
009A 20E0F9            JB      ACC.0,?C0133
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
009D         ?C0134:
                                           ; SOURCE LINE # 691
009D 900000      E     MOV     DPTR,#SPIIndex
00A0 E0                MOVX    A,@DPTR
00A1 6017              JZ      ?C0130
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 46  

                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
00A3 900000      E     MOV     DPTR,#ECINDAR1
00A6 74FE              MOV     A,#0FEH
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
00A9 900000      E     MOV     DPTR,#ECINDDR
00AC 04                INC     A
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 695
00AE 900000      E     MOV     DPTR,#ECINDAR1
00B1 74FD              MOV     A,#0FDH
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
00B4 900000      E     MOV     DPTR,#ECINDDR
00B7 74AF              MOV     A,#0AFH
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
00BA         ?C0130:
00BA 900000      E     MOV     DPTR,#SPIIndex
00BD E0                MOVX    A,@DPTR
00BE 70A3              JNZ     ?C0132
                                           ; SOURCE LINE # 700
00C0 900000      E     MOV     DPTR,#ECINDAR1
00C3 74FE              MOV     A,#0FEH
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 701
00C6 900000      E     MOV     DPTR,#ECINDDR
00C9 04                INC     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 702
00CB 900000      E     MOV     DPTR,#ECINDAR1
00CE 74FD              MOV     A,#0FDH
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
00D1 900000      E     MOV     DPTR,#ECINDDR
00D4 7404              MOV     A,#04H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
00D7 E4                CLR     A
00D8 900000      E     MOV     DPTR,#WNCKR
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 722
00DF 900000      E     MOV     DPTR,#ECINDAR3
00E2 7440              MOV     A,#040H
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
00E5 E4                CLR     A
00E6 900000      E     MOV     DPTR,#ECINDAR2
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
00EA 22                RET     
             ; FUNCTION Old_SST_SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Write_256Bytes (BEGIN)
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 47  

                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
0000 900000      E     MOV     DPTR,#SPIID
0003 E0                MOVX    A,@DPTR
0004 B4BF13            CJNE    A,#0BFH,?C0138
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
0007 900000      E     MOV     DPTR,#SSTDeviceID
000A E0                MOVX    A,@DPTR
000B B40106            CJNE    A,#01H,?C0139
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
000E 7E00        R     MOV     R6,#HIGH Old_SST_SPI_Write_256Bytes
0010 7F00        R     MOV     R7,#LOW Old_SST_SPI_Write_256Bytes
                                           ; SOURCE LINE # 736
0012 800A              SJMP    ?C0180
0014         ?C0139:
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
0014 7E00        R     MOV     R6,#HIGH SST_SPI_Write_256Bytes
0016 7F00        R     MOV     R7,#LOW SST_SPI_Write_256Bytes
0018         ?C0179:
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
0018 8004              SJMP    ?C0180
001A         ?C0138:
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
001A 7E00        R     MOV     R6,#HIGH Other_SPI_Write_256Bytes
001C 7F00        R     MOV     R7,#LOW Other_SPI_Write_256Bytes
001E         ?C0180:
001E 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 746
0021         ?C0142:
0021 22                RET     
             ; FUNCTION SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 754
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 755
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 756
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 48  

                                           ; SOURCE LINE # 760
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 761
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0143:
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0143
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
002F         ?C0144:
                                           ; SOURCE LINE # 770
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0040 900000      E     MOV     DPTR,#ECINDDR
0043 740B              MOV     A,#0BH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 777
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 778
005E E4                CLR     A
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0060 900000      E     MOV     DPTR,#SPIIndex
0063 F0                MOVX    @DPTR,A
0064         ?C0148:
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
0064 900000      E     MOV     DPTR,#ECINDDR
0067 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 49  

0068 FF                MOV     R7,A
0069 900000      E     MOV     DPTR,#SPIDataPointer
006C E0                MOVX    A,@DPTR
006D FC                MOV     R4,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 F582              MOV     DPL,A
0072 8C83              MOV     DPH,R4
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
0076 900000      E     MOV     DPTR,#SPIIndex
0079 E0                MOVX    A,@DPTR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
007C 90009C            MOV     DPTR,#09CH
007F E0                MOVX    A,@DPTR
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
0082 900000      E     MOV     DPTR,#SPIIndex
0085 E0                MOVX    A,@DPTR
0086 70DC              JNZ     ?C0148
                                           ; SOURCE LINE # 788
0088 900000      E     MOV     DPTR,#ECINDAR1
008B 74FE              MOV     A,#0FEH
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 789
008E 900000      E     MOV     DPTR,#ECINDDR
0091 04                INC     A
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 790
0093 900000      E     MOV     DPTR,#ECINDAR1
0096 74FD              MOV     A,#0FDH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0099 900000      E     MOV     DPTR,#ECINDDR
009C 7405              MOV     A,#05H
009E F0                MOVX    @DPTR,A
009F         ?C0149:
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
009F 900000      E     MOV     DPTR,#ECINDDR
00A2 E0                MOVX    A,@DPTR
00A3 20E0F9            JB      ACC.0,?C0149
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
00A6         ?C0150:
                                           ; SOURCE LINE # 800
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 7440              MOV     A,#040H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
00AC E4                CLR     A
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
00B1 22                RET     
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 50  

             ; FUNCTION SPI_Read_256Bytes (END)

             ; FUNCTION _LoadSPIFucnToRam (BEGIN)
                                           ; SOURCE LINE # 807
;---- Variable 'funcpoint' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
0000 7800        E     MOV     R0,#LOW Tmp_XPntr
0002 7606              MOV     @R0,#06H
0004 08                INC     R0
0005 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 810
0007 8E00        E     MOV     Tmp_code_pointer,R6
0009 8F00        E     MOV     Tmp_code_pointer+01H,R7
                                           ; SOURCE LINE # 812
000B E4                CLR     A
000C F500        E     MOV     ITempB01,A
000E         ?C0155:
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
000E 850082      E     MOV     DPL,Tmp_code_pointer+01H
0011 850083      E     MOV     DPH,Tmp_code_pointer
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FF                MOV     R7,A
0017 7800        E     MOV     R0,#LOW Tmp_XPntr
0019 E6                MOV     A,@R0
001A FC                MOV     R4,A
001B 08                INC     R0
001C E6                MOV     A,@R0
001D F582              MOV     DPL,A
001F 8C83              MOV     DPH,R4
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 816
0023 06                INC     @R0
0024 E6                MOV     A,@R0
0025 18                DEC     R0
0026 7001              JNZ     ?C0171
0028 06                INC     @R0
0029         ?C0171:
                                           ; SOURCE LINE # 817
0029 0500        E     INC     Tmp_code_pointer+01H
002B E500        E     MOV     A,Tmp_code_pointer+01H
002D 7002              JNZ     ?C0172
002F 0500        E     INC     Tmp_code_pointer
0031         ?C0172:
                                           ; SOURCE LINE # 818
0031 0500        E     INC     ITempB01
                                           ; SOURCE LINE # 819
0033 E500        E     MOV     A,ITempB01
0035 70D7              JNZ     ?C0155
                                           ; SOURCE LINE # 820
0037 22                RET     
             ; FUNCTION _LoadSPIFucnToRam (END)

             ; FUNCTION ITE_Flash_Utility (BEGIN)
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 828
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 829
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 51  

0003 7E00        R     MOV     R6,#HIGH FlashECCode
0005 7F00        R     MOV     R7,#LOW FlashECCode
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 830
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 831
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 832
0014 22                RET     
             ; FUNCTION ITE_Flash_Utility (END)

             ; FUNCTION ITE_Flash_Utility_WINF (BEGIN)
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
                                           ; SOURCE LINE # 843
0000 120000      E     LCALL   DisableInternalWDT
                                           ; SOURCE LINE # 846
0003 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 847
0006 7800        E     MOV     R0,#LOW Tmp_XPntr
0008 7607              MOV     @R0,#07H
000A 08                INC     R0
000B 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 848
000D 750000      R     MOV     Tmp_code_pointer,#HIGH FlashECCodeWinF
0010 750000      R     MOV     Tmp_code_pointer+01H,#LOW FlashECCodeWinF
                                           ; SOURCE LINE # 849
0013 E4                CLR     A
0014 F500        E     MOV     ITempB01,A
0016         ?C0160:
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
0016 850082      E     MOV     DPL,Tmp_code_pointer+01H
0019 850083      E     MOV     DPH,Tmp_code_pointer
001C E4                CLR     A
001D 93                MOVC    A,@A+DPTR
001E FF                MOV     R7,A
001F 7800        E     MOV     R0,#LOW Tmp_XPntr
0021 E6                MOV     A,@R0
0022 FC                MOV     R4,A
0023 08                INC     R0
0024 E6                MOV     A,@R0
0025 F582              MOV     DPL,A
0027 8C83              MOV     DPH,R4
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
002B 06                INC     @R0
002C E6                MOV     A,@R0
002D 18                DEC     R0
002E 7001              JNZ     ?C0173
0030 06                INC     @R0
0031         ?C0173:
                                           ; SOURCE LINE # 854
0031 0500        E     INC     Tmp_code_pointer+01H
0033 E500        E     MOV     A,Tmp_code_pointer+01H
0035 7002              JNZ     ?C0174
0037 0500        E     INC     Tmp_code_pointer
0039         ?C0174:
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 52  

                                           ; SOURCE LINE # 855
0039 0500        E     INC     ITempB01
                                           ; SOURCE LINE # 856
003B E500        E     MOV     A,ITempB01
003D 70D7              JNZ     ?C0160
                                           ; SOURCE LINE # 857
003F 900000      E     MOV     DPTR,#FBCFG
0042 E0                MOVX    A,@DPTR
0043 4480              ORL     A,#080H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
0046 00                NOP     
                                           ; SOURCE LINE # 859
0047 00                NOP     
                                           ; SOURCE LINE # 860
0048 00                NOP     
                                           ; SOURCE LINE # 861
0049 00                NOP     
                                           ; SOURCE LINE # 862
004A 00                NOP     
                                           ; SOURCE LINE # 863
004B 00                NOP     
                                           ; SOURCE LINE # 864
004C 00                NOP     
                                           ; SOURCE LINE # 865
004D 00                NOP     
                                           ; SOURCE LINE # 866
004E 120000      R     LCALL   FlashECCodeWinF
                                           ; SOURCE LINE # 867
0051 22                RET     
             ; FUNCTION ITE_Flash_Utility_WINF (END)

             ; FUNCTION _Do_SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 873
;---- Variable 'statusvalue' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 875
0000 900000      E     MOV     DPTR,#SPIWriteStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 877
0005 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 878
0008 7E00        R     MOV     R6,#HIGH SPI_Write_Status
000A 7F00        R     MOV     R7,#LOW SPI_Write_Status
000C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 879
000F 900000      E     MOV     DPTR,#FBCFG
0012 E0                MOVX    A,@DPTR
0013 4480              ORL     A,#080H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 880
0016 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 881
0019 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 882
001C 900000      E     MOV     DPTR,#FBCFG
001F E0                MOVX    A,@DPTR
0020 547F              ANL     A,#07FH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
0023 22                RET     
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 53  

             ; FUNCTION _Do_SPI_Write_Status (END)

             ; FUNCTION Do_SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 893
0003 7E00        R     MOV     R6,#HIGH SPI_Read_Status
0005 7F00        R     MOV     R7,#LOW SPI_Read_Status
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 894
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 895
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 896
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 897
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 898
001E 22                RET     
             ; FUNCTION Do_SPI_Read_Status (END)

             ; FUNCTION Do_SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 908
0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 909
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 910
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 911
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 912
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 913
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID (END)

             ; FUNCTION Do_SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 923
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 54  

0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID_CmdAB
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID_CmdAB
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 924
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 925
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 926
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 927
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 928
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID_CmdAB (END)

             ; FUNCTION _Do_SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 939
;---- Variable 'EraseCmd' assigned to Register 'R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
0000 900000      E     MOV     DPTR,#SPIAEraseCmd
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 942
0005 900000      E     MOV     DPTR,#SPIAddrCycle
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 943
000A A3                INC     DPTR
000B EB                MOV     A,R3
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
000D 900000      R     MOV     DPTR,#Addr0
0010 E0                MOVX    A,@DPTR
0011 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 946
0015 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 947
0018 7E00        R     MOV     R6,#HIGH SPI_Erase
001A 7F00        R     MOV     R7,#LOW SPI_Erase
001C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 948
001F 900000      E     MOV     DPTR,#FBCFG
0022 E0                MOVX    A,@DPTR
0023 4480              ORL     A,#080H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
0026 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 950
0029 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 951
002C 900000      E     MOV     DPTR,#FBCFG
002F E0                MOVX    A,@DPTR
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 55  

0030 547F              ANL     A,#07FH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
0033 22                RET     
             ; FUNCTION _Do_SPI_Erase (END)

             ; FUNCTION _Do_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 962
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 964
0000 900000      E     MOV     DPTR,#SPIDataPointer
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 965
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 966
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 969
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 970
001B 120000      R     LCALL   SPI_Write_256Bytes
                                           ; SOURCE LINE # 971
001E 900000      E     MOV     DPTR,#FBCFG
0021 E0                MOVX    A,@DPTR
0022 4480              ORL     A,#080H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 972
0025 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 973
0028 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 974
002B 900000      E     MOV     DPTR,#FBCFG
002E E0                MOVX    A,@DPTR
002F 547F              ANL     A,#07FH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 975
0032 22                RET     
             ; FUNCTION _Do_SPI_Write_256Bytes (END)

             ; FUNCTION _Do_SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 985
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
0000 900000      E     MOV     DPTR,#SPIDataPointer
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 56  

0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 988
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 989
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 990
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 992
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 993
001B 7E00        R     MOV     R6,#HIGH SPI_Read_256Bytes
001D 7F00        R     MOV     R7,#LOW SPI_Read_256Bytes
001F 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 994
0022 900000      E     MOV     DPTR,#FBCFG
0025 E0                MOVX    A,@DPTR
0026 4480              ORL     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 995
0029 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 996
002C 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 997
002F 900000      E     MOV     DPTR,#FBCFG
0032 E0                MOVX    A,@DPTR
0033 547F              ANL     A,#07FH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 998
0036 22                RET     
             ; FUNCTION _Do_SPI_Read_256Bytes (END)

             ; FUNCTION Do_SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 1007
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Enable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Enable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 1008
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1009
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 1010
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 1011
0017 900000      E     MOV     DPTR,#FBCFG
C51 COMPILER V8.12   CORE_FLASH                                                            09/14/2018 11:07:57 PAGE 57  

001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1012
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Enable (END)

             ; FUNCTION Do_SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 1021
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Disable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Disable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 1022
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 1024
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 1025
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Disable (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2831    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
