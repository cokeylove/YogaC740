C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OEM_CYPRESS
OBJECT MODULE PLACED IN Code\Oem\OEM_CYPRESS.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Oem\OEM_CYPRESS.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: OEM_CYPRESS.C
   3           *
   4           * Author : Parade Technologies inc.
   5           *
   6           * Note : These functions are reference code and LCFC setting code about PS8622.
   7           *        Please follow your project software specification to do some modification.
   8           *---------------------------------------------------------------------------
   9           */
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          #if SUPPORT_CYPRESS_PD_CCG4
  13          const tsI2cControlReg code conI2cControlReg[]=
  14          {       
  15              // bCtrl , bCtrl2   , bSlaveAddr,bStatus , bI2cdata
  16                  {&HOCTL_A, &HOCTL2_A, &TRASLA_A, &HOSTA_A, &HOBDB_A},
  17                  {&HOCTL_B, &HOCTL2_B, &TRASLA_B, &HOSTA_B, &HOBDB_B},
  18                  {&HOCTL_C, &HOCTL2_C, &TRASLA_C, &HOSTA_C, &HOBDB_C}
  19                  //{&HOCTL_D, &HOCTL2_D, &TRASLA_D, &HOSTA_D, &HOBDB_D},
  20          };
  21          
  22          //--------------------------------------------
  23          BYTE CheckI2CStatus(BYTE Channel)
  24          {
  25   1              BYTE bI2C_ERROR=TRUE;
  26   1              BYTE bI2C_status=0x00;
  27   1      
  28   1      
  29   1              TR1 = 0;                                            // disable timer1
  30   1          ET1 = 0;                                // Disable timer1 interrupt
  31   1          _nop_();
  32   1          _nop_();
  33   1          _nop_();
  34   1          _nop_();
  35   1          TH1 = Timer_26ms>>8;                    // Set timer1 counter 26ms
  36   1          TL1 = Timer_26ms;                       // Set timer1 counter 26ms
  37   1          TF1 = 0;                                // Clear overflow flag
  38   1          TR1 = 1;                                // Enable timer1
  39   1      
  40   1          while(!TF1)                             // Not time out
  41   1          {
  42   2                      bI2C_status = *conI2cControlReg[Channel].bStatus;
  43   2                      
  44   2                      if((bI2C_status& 0x7C ) != 0x00 )
  45   2                      {
  46   3                              // RamDebug(0xC0);      
  47   3                              // RamDebug(bI2C_status);
  48   3                              // RamDebug(HOCTL_A);
  49   3                              // RamDebug(HOCTL2_A);
  50   3                              // RamDebug(TRASLA_A);
  51   3                              
  52   3                              *conI2cControlReg[Channel].bCtrl |= 0x02;
  53   3                              _nop_();
  54   3                              *conI2cControlReg[Channel].bCtrl &= ~0x02;
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 2   

  55   3                              *conI2cControlReg[Channel].bCtrl2 &= 0xFD;                                      // Disable I2C_EN for stop
  56   3                              *conI2cControlReg[Channel].bStatus |= 0x80;                             // Clear byte done
  57   3                              break;
  58   3                      }
  59   2                      else if(( bI2C_status & 0x82 ) != 0x00 )
  60   2                      {       
  61   3                              // RamDebug(0xC1);
  62   3                              // RamDebug(bI2C_status);
  63   3                              bI2C_ERROR = FALSE;
  64   3                              break;
  65   3                      }
  66   2              }
  67   1      
  68   1              if(TF1)                                 // time-out
  69   1          {
  70   2              TR1 = 0;                                        // disable timer1
  71   2                  TF1 = 0;                                    // clear overflow flag
  72   2                  ET1 = 1;                                    // Enable timer1 interrupt
  73   2                      bI2C_ERROR = FALSE;
  74   2          }
  75   1      
  76   1              return bI2C_ERROR;
  77   1      }
  78          
  79          //================================================================
  80          // Name: bI2cMasterWrite
  81          // Input:       bChannel = 0-3
  82          //                      bSlaveAddress = Slave address
  83          //                      bDataLength = Max 256
  84          //                      *Var = Data buffer
  85          // Return: 0 = Fail, 1 = Correct Pass
  86          //===============================================================
  87          BYTE bI2cMasterWrite(BYTE bChannel, BYTE bSlaveAddress,BYTE bDataLength, BYTE Offset, XBYTE *Var)
  88          {
  89   1              BYTE bIndex, bFinishFlag;
  90   1      
  91   1              bFinishFlag = 1;
  92   1              bIndex = 0;
  93   1              *conI2cControlReg[bChannel].bCtrl2 = 0x03;                                                      // Enable SMBus and compatible I2C
  94   1              *conI2cControlReg[bChannel].bSlaveAddr = (bSlaveAddress&0xFE);          // Set slave address
  95   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                            // Clear error flag
  96   1              *conI2cControlReg[bChannel].bI2cdata = Offset;                                          // Set first byte
  97   1              *conI2cControlReg[bChannel].bCtrl = 0x5C;                                                       // Start send (None interrupt)
  98   1      
  99   1              do {
 100   2                      bDataLength--;
 101   2                  if (CheckI2CStatus( bChannel )) 
 102   2                      {
 103   3                  bFinishFlag = 0;
 104   3                              break;
 105   3                      }
 106   2                      else if (bDataLength) {         //*** Send data ***//
 107   3                              *conI2cControlReg[bChannel].bI2cdata = *(Var+bIndex);           // Next byte
 108   3                              *conI2cControlReg[bChannel].bStatus |= 0x80;                            // Clear byte done
 109   3                              bIndex++;
 110   3                              
 111   3                      }
 112   2              }
 113   1              while (bDataLength);
 114   1      
 115   1              *conI2cControlReg[bChannel].bCtrl2 &= 0xF5;                                             // Disable I2C_EN for stop
 116   1              *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 3   

 117   1              return bFinishFlag;
 118   1      }
 119          
 120          //======================================================
 121          // Name: bI2cMasterRead
 122          // Input:       bChannel = 0-3
 123          //                      bSlaveAddress = Slave address
 124          //                      bDataLength = Max 256
 125          //                      *Var = Data buffer
 126          // Return: 0 = Fail, 1 = Correct Pass
 127          //======================================================
 128          BYTE bI2cMasterRead(BYTE bChannel, BYTE bSlaveAddress, BYTE bDataLength, XBYTE *Var)
 129          {
 130   1              BYTE    bIndex, bFinishFlag;
 131   1      
 132   1              bFinishFlag = 1;
 133   1              bIndex = 0;
 134   1              *conI2cControlReg[bChannel].bCtrl2 = 0x03;                                                      // Enable SMBus and compatible I2C
 135   1              *conI2cControlReg[bChannel].bSlaveAddr = (bSlaveAddress|0x01);          // Set slave address
 136   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                            // Clear error flag
 137   1      
 138   1              if (bDataLength == 1) {
 139   2                      *conI2cControlReg[bChannel].bCtrl |= 0x20;                                              // Set last byte
 140   2              }
 141   1      
 142   1              *conI2cControlReg[bChannel].bCtrl = 0x5C;                                                       // Start send (None interrupt)
 143   1              do {
 144   2                      bDataLength--;
 145   2              if (CheckI2CStatus( bChannel )) 
 146   2                      {               
 147   3                              bFinishFlag = 0;
 148   3                              break;
 149   3                      }
 150   2      
 151   2                      *(Var+bIndex) = *conI2cControlReg[bChannel].bI2cdata;                   // Store data
 152   2                      bIndex++;
 153   2      
 154   2                      if (bDataLength == 1) {
 155   3                              *conI2cControlReg[bChannel].bCtrl |= 0x20;                                      // Set last byte
 156   3                      }
 157   2                      else if (bDataLength == 0) {
 158   3                              *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                             // Disable I2C_EN for stop
 159   3                      }
 160   2                      *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
 161   2              } while (bDataLength);
 162   1      
 163   1              return bFinishFlag;
 164   1      }
 165          
 166          //======================================================
 167          // Name: bI2cMasterWriteToRead
 168          // Input:       bChannel = 0-3
 169          //                      bSlaveAddress = Slave address
 170          //                      Offset = Offset
 171          //                      bDataLength = Max 256
 172          //                      *Var = Data buffer
 173          // Return: 0 = Fail, 1 = Correct Pass
 174          // Descript: Start - Slave address - Offset - Restart - Slave address - Data0 .. DataN - Stop
 175          //======================================================
 176          BYTE bI2cMasterWriteToRead(BYTE bChannel, BYTE bSlaveAddress, BYTE Offset,BYTE Offset1,BYTE bDataLength, X
             -BYTE *Var)
 177          {
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 4   

 178   1              BYTE    bIndex, bFinishFlag;
 179   1              //BYTE  i;
 180   1      
 181   1              bFinishFlag = 1;
 182   1              bIndex = 0;
 183   1              *conI2cControlReg[bChannel].bCtrl2 = 0x03;                                                      // Enable SMBus and compatible I2C
 184   1              *conI2cControlReg[bChannel].bSlaveAddr = (bSlaveAddress&0xFE);  // Set slave address
 185   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                            // Clear error flag
 186   1      
 187   1              //*** Write offset ***//
 188   1              *conI2cControlReg[bChannel].bI2cdata = Offset;                                  // Set first byte
 189   1              *conI2cControlReg[bChannel].bCtrl = 0x5C;                                               // Start send (None interrupt)
 190   1      
 191   1              if (CheckI2CStatus( bChannel )) 
 192   1              {
 193   2                      bFinishFlag = 0;
 194   2                      // RamDebug(0xB0);
 195   2                      return bFinishFlag;
 196   2              }
 197   1              
 198   1              //      *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
 199   1      
 200   1              //*** Write offset ***//
 201   1          *conI2cControlReg[bChannel].bI2cdata = Offset1;                                     // Set first byte
 202   1          *conI2cControlReg[bChannel].bStatus |= 0x80;                                        // Clear byte done
 203   1      //      *conI2cControlReg[bChannel].bCtrl = 0x5C;                                               // Start send (None interrupt)
 204   1              if (CheckI2CStatus( bChannel )) 
 205   1              {
 206   2                      // RamDebug(0xB1);
 207   2                      bFinishFlag = 0;
 208   2                      return bFinishFlag;
 209   2              }
 210   1              
 211   1              //*** Wait direction switch ***//
 212   1              *conI2cControlReg[bChannel].bCtrl2 |= 0x0C;                                             // Set I2C direction switch wait
 213   1              *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
 214   1              *conI2cControlReg[bChannel].bCtrl2 &= 0xFB;                                             // Release I2C switch wait
 215   1      /*
 216   1              if (CheckI2CStatus( bChannel )) 
 217   1              {
 218   1                      // RamDebug(0xB1);
 219   1                      bFinishFlag = 0;
 220   1                      return bFinishFlag;
 221   1              }
 222   1      */
 223   1              if (bDataLength == 1) {
 224   2                      *conI2cControlReg[bChannel].bCtrl |= 0x20;                                              // Set last byte
 225   2              }
 226   1      
 227   1              *conI2cControlReg[bChannel].bStatus |= 0x80;                                            // Clear byte done
 228   1              
 229   1              do {
 230   2                      bDataLength--;
 231   2              if (CheckI2CStatus( bChannel )) 
 232   2                      {               
 233   3                              bFinishFlag = 0;
 234   3                              break;
 235   3                      }
 236   2      
 237   2                      *(Var+bIndex) = *conI2cControlReg[bChannel].bI2cdata;                   // Store data
 238   2                      bIndex++;
 239   2      
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 5   

 240   2                      if (bDataLength == 1) {
 241   3                              *conI2cControlReg[bChannel].bCtrl |= 0x20;                                      // Set last byte
 242   3                      }
 243   2                      else if (bDataLength == 0) {
 244   3                              *conI2cControlReg[bChannel].bCtrl2 &= 0xF5;                             // Disable I2C_EN for stop
 245   3                      }
 246   2                      *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
 247   2              } while (bDataLength);
 248   1      
 249   1              
 250   1              // *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                                          // Disable I2C_EN for stop
 251   1              // *conI2cControlReg[bChannel].bStatus |= 0x80;                                 // Clear byte done
 252   1              return bFinishFlag;
 253   1      }
 254          #endif
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0023 (BEGIN)
0000         L?0036:
0000 E4                CLR     A
0001 F9                MOV     R1,A
0002 EA                MOV     A,R2
0003 75F00A            MOV     B,#0AH
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW conI2cControlReg+02H
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH conI2cControlReg+02H
000E F583              MOV     DPH,A
0010 E4                CLR     A
0011 93                MOVC    A,@A+DPTR
0012 FE                MOV     R6,A
0013 7401              MOV     A,#01H
0015 93                MOVC    A,@A+DPTR
0016 F582              MOV     DPL,A
0018 8E83              MOV     DPH,R6
001A 7403              MOV     A,#03H
001C F0                MOVX    @DPTR,A
001D ED                MOV     A,R5
001E 54FE              ANL     A,#0FEH
0020         L?0037:
0020 FF                MOV     R7,A
0021 EA                MOV     A,R2
0022 75F00A            MOV     B,#0AH
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW conI2cControlReg+04H
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH conI2cControlReg+04H
002D         L?0038:
002D F583              MOV     DPH,A
002F E4                CLR     A
0030 93                MOVC    A,@A+DPTR
0031 FC                MOV     R4,A
0032 7401              MOV     A,#01H
0034 93                MOVC    A,@A+DPTR
0035 F582              MOV     DPL,A
0037 8C83              MOV     DPH,R4
0039 EF                MOV     A,R7
003A         L?0039:
003A F0                MOVX    @DPTR,A
003B         L?0040:
003B EA                MOV     A,R2
003C 75F00A            MOV     B,#0AH
003F A4                MUL     AB
0040 2400        R     ADD     A,#LOW conI2cControlReg+06H
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        R     ADDC    A,#HIGH conI2cControlReg+06H
0047         L?0041:
0047 F583              MOV     DPH,A
0049 E4                CLR     A
004A 93                MOVC    A,@A+DPTR
004B FE                MOV     R6,A
004C 7401              MOV     A,#01H
004E 93                MOVC    A,@A+DPTR
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 7   

004F F582              MOV     DPL,A
0051 8E83              MOV     DPH,R6
0053 22                RET     
0054         L?0042:
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056         L?0043:
0056 EA                MOV     A,R2
0057 75F00A            MOV     B,#0AH
005A A4                MUL     AB
005B 2400        R     ADD     A,#LOW conI2cControlReg+08H
005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3400        R     ADDC    A,#HIGH conI2cControlReg+08H
0062         L?0044:
0062 F583              MOV     DPH,A
0064 E4                CLR     A
0065 93                MOVC    A,@A+DPTR
0066 FC                MOV     R4,A
0067 7401              MOV     A,#01H
0069 93                MOVC    A,@A+DPTR
006A F582              MOV     DPL,A
006C 8C83              MOV     DPH,R4
006E 22                RET     
006F         L?0045:
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
0071         L?0046:
0071 EA                MOV     A,R2
0072         L?0047:
0072 75F00A            MOV     B,#0AH
0075 A4                MUL     AB
0076 2400        R     ADD     A,#LOW conI2cControlReg
0078 F582              MOV     DPL,A
007A E4                CLR     A
007B 3400        R     ADDC    A,#HIGH conI2cControlReg
007D 22                RET     
007E         L?0048:
007E         L?0049:
007E EA                MOV     A,R2
007F         L?0050:
007F 75F00A            MOV     B,#0AH
0082 A4                MUL     AB
0083 2400        R     ADD     A,#LOW conI2cControlReg+02H
0085 F582              MOV     DPL,A
0087 E4                CLR     A
0088 3400        R     ADDC    A,#HIGH conI2cControlReg+02H
008A 22                RET     
008B         L?0051:
008B         L?0052:
008B EA                MOV     A,R2
008C 75F00A            MOV     B,#0AH
008F A4                MUL     AB
0090 2400        R     ADD     A,#LOW conI2cControlReg+08H
0092 F582              MOV     DPL,A
0094 E4                CLR     A
0095 3400        R     ADDC    A,#HIGH conI2cControlReg+08H
0097 22                RET     
0098         L?0053:
0098 EF                MOV     A,R7
0099         L?0054:
0099 75F00A            MOV     B,#0AH
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 8   

009C A4                MUL     AB
009D 2400        R     ADD     A,#LOW conI2cControlReg+06H
009F F582              MOV     DPL,A
00A1 E4                CLR     A
00A2 3400        R     ADDC    A,#HIGH conI2cControlReg+06H
00A4 22                RET     
00A5         L?0055:
00A5 1B                DEC     R3
00A6         L?0056:
00A6 CF                XCH     A,R7
00A7 EA                MOV     A,R2
00A8 CF                XCH     A,R7
00A9 120000      R     LCALL   _CheckI2CStatus
00AC EF                MOV     A,R7
00AD 22                RET     
00AE         L?0057:
00AE FF                MOV     R7,A
00AF E0                MOVX    A,@DPTR
00B0 FC                MOV     R4,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 29                ADD     A,R1
00B4 F582              MOV     DPL,A
00B6 E4                CLR     A
00B7 3C                ADDC    A,R4
00B8 F583              MOV     DPH,A
00BA EF                MOV     A,R7
00BB F0                MOVX    @DPTR,A
00BC 09                INC     R1
00BD 22                RET     
             ; FUNCTION Com0023 (END)

             ; FUNCTION _CheckI2CStatus (BEGIN)
                                           ; SOURCE LINE # 23
;---- Variable 'Channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
;---- Variable 'bI2C_ERROR' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 26
;---- Variable 'bI2C_status' assigned to Register 'R5' ----
0002 E4                CLR     A
                                           ; SOURCE LINE # 29
0003 C28E              CLR     TR1
                                           ; SOURCE LINE # 30
0005 C2AB              CLR     ET1
                                           ; SOURCE LINE # 31
0007 00                NOP     
                                           ; SOURCE LINE # 32
0008 00                NOP     
                                           ; SOURCE LINE # 33
0009 00                NOP     
                                           ; SOURCE LINE # 34
000A 00                NOP     
                                           ; SOURCE LINE # 35
000B 758DB2            MOV     TH1,#0B2H
                                           ; SOURCE LINE # 36
000E 758B19            MOV     TL1,#019H
                                           ; SOURCE LINE # 37
0011 C28F              CLR     TF1
                                           ; SOURCE LINE # 38
0013 D28E              SETB    TR1
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 9   

0015         ?C0001:
                                           ; SOURCE LINE # 40
0015 208F41            JB      TF1,?C0002
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
0018 120000      R     LCALL   L?0053
001B 120000      R     LCALL   L?0044
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
                                           ; SOURCE LINE # 44
0020 547C              ANL     A,#07CH
0022 602E              JZ      ?C0003
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 52
0024 EF                MOV     A,R7
0025 120000      R     LCALL   L?0047
0028 120000      R     LCALL   L?0044
002B E0                MOVX    A,@DPTR
002C 4402              ORL     A,#02H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
002F 00                NOP     
                                           ; SOURCE LINE # 54
0030 EF                MOV     A,R7
0031 120000      R     LCALL   L?0047
0034 120000      R     LCALL   L?0044
0037 E0                MOVX    A,@DPTR
0038 54FD              ANL     A,#0FDH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
003B EF                MOV     A,R7
003C 120000      R     LCALL   L?0050
003F 120000      R     LCALL   L?0044
0042 E0                MOVX    A,@DPTR
0043 54FD              ANL     A,#0FDH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
0046 120000      R     LCALL   L?0053
0049 120000      R     LCALL   L?0044
004C E0                MOVX    A,@DPTR
004D 4480              ORL     A,#080H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0050 8007              SJMP    ?C0002
                                           ; SOURCE LINE # 58
0052         ?C0003:
                                           ; SOURCE LINE # 59
0052 ED                MOV     A,R5
0053 5482              ANL     A,#082H
0055 60BE              JZ      ?C0001
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 63
0057 E4                CLR     A
0058 FE                MOV     R6,A
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0059         ?C0002:
                                           ; SOURCE LINE # 68
0059 308F08            JNB     TF1,?C0006
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 10  

005C C28E              CLR     TR1
                                           ; SOURCE LINE # 71
005E C28F              CLR     TF1
                                           ; SOURCE LINE # 72
0060 D2AB              SETB    ET1
                                           ; SOURCE LINE # 73
0062 E4                CLR     A
0063 FE                MOV     R6,A
                                           ; SOURCE LINE # 74
0064         ?C0006:
                                           ; SOURCE LINE # 76
0064 CF                XCH     A,R7
0065 EE                MOV     A,R6
0066 CF                XCH     A,R7
                                           ; SOURCE LINE # 77
0067         ?C0007:
0067 22                RET     
             ; FUNCTION _CheckI2CStatus (END)

             ; FUNCTION _bI2cMasterWrite (BEGIN)
                                           ; SOURCE LINE # 87
;---- Variable 'bChannel' assigned to Register 'R2' ----
0000 CA                XCH     A,R2
0001 EF                MOV     A,R7
0002 CA                XCH     A,R2
;---- Variable 'bDataLength' assigned to Register 'R3' ----
;---- Variable 'bSlaveAddress' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 91
0003 900000      R     MOV     DPTR,#bFinishFlag
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
;---- Variable 'bIndex' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0009 120000      R     LCALL   L?0036
000C E0                MOVX    A,@DPTR
000D 44FE              ORL     A,#0FEH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0010 900000      R     MOV     DPTR,#Offset
0013 120000      R     LCALL   L?0042
                                           ; SOURCE LINE # 97
0016 120000      R     LCALL   L?0045
0019 120000      R     LCALL   L?0041
001C 745C              MOV     A,#05CH
001E F0                MOVX    @DPTR,A
001F         ?C0010:
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
001F 120000      R     LCALL   L?0055
0022 6007              JZ      ?C0011
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0024 E4                CLR     A
0025 900000      R     MOV     DPTR,#bFinishFlag
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
0029 8022              SJMP    ?C0009
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 11  

                                           ; SOURCE LINE # 105
002B         ?C0011:
                                           ; SOURCE LINE # 106
002B EB                MOV     A,R3
002C 601C              JZ      ?C0008
                                           ; SOURCE LINE # 107
002E 900000      R     MOV     DPTR,#Var
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 29                ADD     A,R1
0036 F582              MOV     DPL,A
0038 E4                CLR     A
0039 3E                ADDC    A,R6
003A F583              MOV     DPH,A
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 120000      R     LCALL   L?0043
0041 EF                MOV     A,R7
                                           ; SOURCE LINE # 108
0042 120000      R     LCALL   L?0039
0045 E0                MOVX    A,@DPTR
0046 4480              ORL     A,#080H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0049 09                INC     R1
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
004A         ?C0008:
                                           ; SOURCE LINE # 113
004A EB                MOV     A,R3
004B 70D2              JNZ     ?C0010
004D         ?C0009:
                                           ; SOURCE LINE # 115
004D 120000      R     LCALL   L?0048
0050 120000      R     LCALL   L?0041
0053 E0                MOVX    A,@DPTR
0054 54F5              ANL     A,#0F5H
                                           ; SOURCE LINE # 116
0056 120000      R     LCALL   L?0039
0059 E0                MOVX    A,@DPTR
005A 4480              ORL     A,#080H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
005D 900000      R     MOV     DPTR,#bFinishFlag
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
                                           ; SOURCE LINE # 118
0062         ?C0014:
0062 22                RET     
             ; FUNCTION _bI2cMasterWrite (END)

             ; FUNCTION _bI2cMasterRead (BEGIN)
                                           ; SOURCE LINE # 128
;---- Variable 'bChannel' assigned to Register 'R2' ----
0000 CA                XCH     A,R2
0001 EF                MOV     A,R7
0002 CA                XCH     A,R2
;---- Variable 'bDataLength' assigned to Register 'R3' ----
;---- Variable 'bSlaveAddress' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 129
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 12  

                                           ; SOURCE LINE # 132
0003 900000      R     MOV     DPTR,#bFinishFlag
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
;---- Variable 'bIndex' assigned to Register 'R1' ----
0009 E4                CLR     A
000A F9                MOV     R1,A
                                           ; SOURCE LINE # 134
000B 120000      R     LCALL   L?0048
000E 120000      R     LCALL   L?0041
0011 7403              MOV     A,#03H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0014 ED                MOV     A,R5
0015 4401              ORL     A,#01H
                                           ; SOURCE LINE # 136
0017 120000      R     LCALL   L?0037
001A E0                MOVX    A,@DPTR
001B 44FE              ORL     A,#0FEH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
001E EB                MOV     A,R3
001F B4010A            CJNE    A,#01H,?C0015
                                           ; SOURCE LINE # 139
0022 120000      R     LCALL   L?0046
0025 120000      R     LCALL   L?0041
0028 E0                MOVX    A,@DPTR
0029 4420              ORL     A,#020H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
002C         ?C0015:
                                           ; SOURCE LINE # 142
002C 120000      R     LCALL   L?0046
002F 120000      R     LCALL   L?0041
0032 745C              MOV     A,#05CH
0034 F0                MOVX    @DPTR,A
0035         ?C0018:
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0035 120000      R     LCALL   L?0055
0038 6008              JZ      ?C0019
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
003A E4                CLR     A
003B 900000      R     MOV     DPTR,#bFinishFlag
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
003F 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 149
0042         ?C0019:
                                           ; SOURCE LINE # 151
0042 120000      R     LCALL   L?0051
0045 120000      R     LCALL   L?0041
0048 E0                MOVX    A,@DPTR
0049 900000      R     MOV     DPTR,#Var
                                           ; SOURCE LINE # 152
004C 120000      R     LCALL   L?0057
                                           ; SOURCE LINE # 154
004F EB                MOV     A,R3
0050 B4010C            CJNE    A,#01H,?C0020
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 13  

                                           ; SOURCE LINE # 155
0053 120000      R     LCALL   L?0046
0056 120000      R     LCALL   L?0041
0059 E0                MOVX    A,@DPTR
005A 4420              ORL     A,#020H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
005D 800D              SJMP    ?C0021
005F         ?C0020:
                                           ; SOURCE LINE # 157
005F EB                MOV     A,R3
0060 700A              JNZ     ?C0021
                                           ; SOURCE LINE # 158
0062 120000      R     LCALL   L?0049
0065 120000      R     LCALL   L?0041
0068 E0                MOVX    A,@DPTR
0069 54FD              ANL     A,#0FDH
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
006C         ?C0021:
                                           ; SOURCE LINE # 160
006C 120000      R     LCALL   L?0040
006F E0                MOVX    A,@DPTR
0070 4480              ORL     A,#080H
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0073 EB                MOV     A,R3
0074 70BF              JNZ     ?C0018
0076         ?C0017:
                                           ; SOURCE LINE # 163
0076 900000      R     MOV     DPTR,#bFinishFlag
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
                                           ; SOURCE LINE # 164
007B         ?C0023:
007B 22                RET     
             ; FUNCTION _bI2cMasterRead (END)

             ; FUNCTION _bI2cMasterWriteToRead (BEGIN)
                                           ; SOURCE LINE # 176
0000 900000      R     MOV     DPTR,#Offset
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
;---- Variable 'bChannel' assigned to Register 'R2' ----
0005 CA                XCH     A,R2
0006 EF                MOV     A,R7
0007 CA                XCH     A,R2
;---- Variable 'bSlaveAddress' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 181
;---- Variable 'bFinishFlag' assigned to Register 'R3' ----
0008 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 182
;---- Variable 'bIndex' assigned to Register 'R1' ----
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
000A 120000      R     LCALL   L?0036
000D E0                MOVX    A,@DPTR
000E 44FE              ORL     A,#0FEH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 14  

0011 900000      R     MOV     DPTR,#Offset
0014 120000      R     LCALL   L?0042
                                           ; SOURCE LINE # 189
0017 120000      R     LCALL   L?0045
001A 120000      R     LCALL   L?0041
001D 745C              MOV     A,#05CH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0020 120000      R     LCALL   L?0056
0023 6003              JZ      ?C0024
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0025 E4                CLR     A
                                           ; SOURCE LINE # 195
0026 FF                MOV     R7,A
0027 22                RET     
                                           ; SOURCE LINE # 196
0028         ?C0024:
                                           ; SOURCE LINE # 201
0028 900000      R     MOV     DPTR,#Offset1
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 202
0030 120000      R     LCALL   L?0038
0033 E0                MOVX    A,@DPTR
0034 4480              ORL     A,#080H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0037 120000      R     LCALL   L?0056
003A 6003              JZ      ?C0026
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 207
003C E4                CLR     A
                                           ; SOURCE LINE # 208
003D FF                MOV     R7,A
003E 22                RET     
                                           ; SOURCE LINE # 209
003F         ?C0026:
                                           ; SOURCE LINE # 212
003F 120000      R     LCALL   L?0049
0042 F583              MOV     DPH,A
0044 E4                CLR     A
0045 93                MOVC    A,@A+DPTR
0046 FE                MOV     R6,A
0047 7401              MOV     A,#01H
0049 93                MOVC    A,@A+DPTR
004A FF                MOV     R7,A
004B F582              MOV     DPL,A
004D 8E83              MOV     DPH,R6
004F E0                MOVX    A,@DPTR
0050 440C              ORL     A,#0CH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
0053 EA                MOV     A,R2
0054 120000      R     LCALL   L?0054
0057 120000      R     LCALL   L?0044
005A E0                MOVX    A,@DPTR
005B 4480              ORL     A,#080H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
005E 8F82              MOV     DPL,R7
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 15  

0060 8E83              MOV     DPH,R6
0062 E0                MOVX    A,@DPTR
0063 54FB              ANL     A,#0FBH
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
0066 900000      R     MOV     DPTR,#bDataLength
0069 E0                MOVX    A,@DPTR
006A B4010A            CJNE    A,#01H,?C0027
                                           ; SOURCE LINE # 224
006D 120000      R     LCALL   L?0046
0070 120000      R     LCALL   L?0041
0073 E0                MOVX    A,@DPTR
0074 4420              ORL     A,#020H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
0077         ?C0027:
                                           ; SOURCE LINE # 227
0077 120000      R     LCALL   L?0040
007A E0                MOVX    A,@DPTR
007B 4480              ORL     A,#080H
007D F0                MOVX    @DPTR,A
007E         ?C0030:
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
007E 900000      R     MOV     DPTR,#bDataLength
0081 E0                MOVX    A,@DPTR
0082 14                DEC     A
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
0084 120000      R     LCALL   L?0056
0087 6005              JZ      ?C0031
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0089 E4                CLR     A
008A FB                MOV     R3,A
                                           ; SOURCE LINE # 234
008B 020000      R     LJMP    ?C0029
                                           ; SOURCE LINE # 235
008E         ?C0031:
                                           ; SOURCE LINE # 237
008E 120000      R     LCALL   L?0052
0091 120000      R     LCALL   L?0041
0094 E0                MOVX    A,@DPTR
0095 900000      R     MOV     DPTR,#Var
                                           ; SOURCE LINE # 238
0098 120000      R     LCALL   L?0057
                                           ; SOURCE LINE # 240
009B 900000      R     MOV     DPTR,#bDataLength
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 B4010C            CJNE    A,#01H,?C0032
                                           ; SOURCE LINE # 241
00A3 120000      R     LCALL   L?0046
00A6 120000      R     LCALL   L?0044
00A9 E0                MOVX    A,@DPTR
00AA 4420              ORL     A,#020H
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
00AD 800D              SJMP    ?C0033
00AF         ?C0032:
                                           ; SOURCE LINE # 243
00AF EF                MOV     A,R7
C51 COMPILER V8.12   OEM_CYPRESS                                                           09/14/2018 11:08:43 PAGE 16  

00B0 700A              JNZ     ?C0033
                                           ; SOURCE LINE # 244
00B2 120000      R     LCALL   L?0049
00B5 120000      R     LCALL   L?0041
00B8 E0                MOVX    A,@DPTR
00B9 54F5              ANL     A,#0F5H
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
00BC         ?C0033:
                                           ; SOURCE LINE # 246
00BC 120000      R     LCALL   L?0040
00BF E0                MOVX    A,@DPTR
00C0 4480              ORL     A,#080H
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
00C3 900000      R     MOV     DPTR,#bDataLength
00C6 E0                MOVX    A,@DPTR
00C7 70B5              JNZ     ?C0030
00C9         ?C0029:
                                           ; SOURCE LINE # 252
00C9 CF                XCH     A,R7
00CA EB                MOV     A,R3
00CB CF                XCH     A,R7
                                           ; SOURCE LINE # 253
00CC         ?C0025:
00CC 22                RET     
             ; FUNCTION _bI2cMasterWriteToRead (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    722    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =   ----      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
