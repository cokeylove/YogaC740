C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OEM_MAILBOX
OBJECT MODULE PLACED IN Code\Oem\OEM_MailBox.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Oem\OEM_MailBox.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: OEM_MAILBOX.C
   3           *
   4           * Author : Dino
   5           *
   6           * Note : These functions are reference only.
   7           *        Please follow your project software specification to do some modification.
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          
  14          
  15          //----------------------------------------------------------------------------
  16          // The function of Mailbox handler
  17          //  Note :
  18          //----------------------------------------------------------------------------
  19          void Hook_MailBox(BYTE Cmd)
  20          {
  21   1              BYTE i;
  22   1      
  23   1              switch(Cmd)
  24   1              {
  25   2              case 0x40:
  26   2                      Cmd_40(MMIO_iDATA8C);
  27   2                      break;
  28   2              case 0x41:
  29   2                      if(MMIO_iDATA8C==0xA0) Cmd_41_A0(0xFE);
  30   2                      if(MMIO_iDATA8C==0xA1) Cmd_41_A1(0xFE);
  31   2                      if(MMIO_iDATA8C==0xA2) Cmd_41_A2(0xFE);
  32   2                      if(MMIO_iDATA8C==0xA3) Cmd_41_A3(0xFE);
  33   2                      break;
  34   2              case 0x42:
  35   2                      Cmd_42(MMIO_iDATA8C);
  36   2                      break;
  37   2              case 0x43:
  38   2                      Cmd_43(0xFE,MMIO_iDATA8C);
  39   2                      break;
  40   2              case 0x45:
  41   2                      Cmd_45(0xFE,MMIO_iDATA8C);
  42   2                      break;
  43   2              case 0x46:
  44   2                      Cmd_46(0xFE,MMIO_iDATA8C);
  45   2                      break;
  46   2              case 0x47:
  47   2                      Cmd_47(0xFE,MMIO_iDATA8C);
  48   2                      break;
  49   2                      break;
  50   2              case 0x49:
  51   2                      break;
  52   2              case 0x4B:
  53   2                      i = MMIO_iDATA8C; //Mos: What it is??
  54   2                      eEEPROMAddrsss  = MMIO_iDATA8D;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 2   

  55   2                      eEEPROMBank             = MMIO_iDATA8E;
  56   2                      eEEPROMData             = MMIO_iDATA8F;
  57   2              SET_MASK(LENOVOPMFW_Temp,EEPROM_Token);
  58   2                      Update_EEPROMMark();
  59   2              CLEAR_MASK(LENOVOPMFW_Temp,EEPROM_Token);
  60   2                      Data2PortDirect(0xFE, 0x00);   
  61   2                      break;
  62   2      
  63   2              case 0x4C:
  64   2                      i = MMIO_iDATA8C;
  65   2                      eEEPROMAddrsss = MMIO_iDATA8D;
  66   2                      eEEPROMBank = MMIO_iDATA8E;
  67   2                      Cmd_4E(0xFE,eEEPROMAddrsss);
  68   2                      break;
  69   2      
  70   2              case 0x4D:
  71   2                      eEEPROMAddrsss = MMIO_iDATA8C;
  72   2                      eEEPROMData     = MMIO_iDATA8D;
  73   2              SET_MASK(LENOVOPMFW_Temp,EEPROM_Token);
  74   2                      Update_EEPROMMark();
  75   2              CLEAR_MASK(LENOVOPMFW_Temp,EEPROM_Token);
  76   2                      Data2PortDirect(0xFE, 0x00);         
  77   2                      break;
  78   2              case 0x4E:
  79   2                      eEEPROMAddrsss = MMIO_iDATA8C;
  80   2                      Cmd_4E(0xFE,eEEPROMAddrsss);
  81   2                      break;
  82   2              case 0x4F: //reference from Hook_64Port
  83   2                      Erase_EEPROMAll();
  84   2                      break;
  85   2              case 0x51:
  86   2                      Cmd_51(0xFE);
  87   2                      break;
  88   2              case 0x52:
  89   2                      if(MMIO_iDATA8C==0xA0) Cmd_52_A0(0xFE);
  90   2                      if(MMIO_iDATA8C==0xA3) Cmd_52_A3(0xFE);
  91   2                      if(MMIO_iDATA8C==0xA4) Cmd_52_A4(0xFE);
  92   2                      if(MMIO_iDATA8C==0xA5) Cmd_52_A5(0xFE);
  93   2                      if(MMIO_iDATA8C==0xA6) Cmd_52_A6(0xFE); //LMLKBL0018:add.
  94   2                      if(MMIO_iDATA8C==0xA7) Cmd_52_A7(0xFE); //LMLKBL0018:add.
  95   2                      break;
  96   2              case 0x53:
  97   2                      break;
  98   2              case 0x56:
  99   2                      break;
 100   2              case 0x58:
 101   2                      Cmd_58(MMIO_iDATA8C);
 102   2                      break;
 103   2              case 0x59:
 104   2                      Cmd_59(0xFE,MMIO_iDATA8C,0);
 105   2                      break;
 106   2              case 0x5C:
 107   2                      Cmd_5C(0xFE);
 108   2                      break;
 109   2              case 0x5D:
 110   2                      Cmd_5D(MMIO_iDATA8C);
 111   2                      break;
 112   2              case 0x97:
 113   2                      Cmd_97(MMIO_iDATA8C);
 114   2                      break;
 115   2              case 0xB0:
 116   2                      Cmd_B0(0xFE,MMIO_iDATA8C);
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 3   

 117   2                      break;
 118   2              case 0xB4:
 119   2                      Cmd_B4();
 120   2                      break;
 121   2              case 0x77:
 122   2                      //CacheDma(1,FSCEHighLevel);
 123   2              DisableAllInterrupt();
 124   2                      Erase_Eflash_1K(0x01,0x20,0x00);
 125   2              EnableAllInterrupt();
 126   2                      break;
 127   2              case 0x88:
 128   2                      //CacheDma(3,FSCEHighLevel);
 129   2                      //Copy_Eflash_1K(0x00,0x00,0x00, 0x01,0x20,0x00);
 130   2                      break;
 131   2              default:
 132   2                      break;
 133   2              }
 134   1      }
 135          
 136          //-----------------------------------------------------------------------------
 137          //
 138          //-----------------------------------------------------------------------------
 139          //-----------------------------------------------------------------------------
 140          void H2RAMprocess(void)
 141          {
 142   1              if( (MMIO_CMD_Ctrl & MMIO_Start_flage)==0 ) return;
 143   1              if( (MMIO_iCMD < 0x40) || (MMIO_iCMD >0x60) ) return;
 144   1              Clear_RAM_Range(MMIO_rDATA[0],0x07);    // Clear H2RAM return data space.
 145   1              //(H2RAM_Table[MMIO_iCMD>>4])();
 146   1      
 147   1              MMIO_rDATA_index = 0;
 148   1              Hook_MailBox(MMIO_iCMD);
 149   1      
 150   1              MMIO_iCMD = 0x00;
 151   1      
 152   1              MMIO_CMD_Ctrl &= 0xFD; // Stop Start
 153   1      }
 154          
 155          
 156          void VPC_interface(void)
 157          {
 158   1              if(nVPC_CMD)
 159   1              {
 160   2                      if(nVPC_CMD != 0x38) //ANGELAS072:add
 161   2                      RamDebug(nVPC_CMD);
 162   2                      uReserve07.fbit.nVPCDriverIn = 1;
 163   2      
 164   2                      switch(nVPC_CMD)
 165   2                      {
 166   3                      case VPCcmdQuery:                                       //0x10 Query VPC
 167   3                              nVPC_DATA = uVPCeventSource;
 168   3                              uVPCeventSource = 0;                    //Clear it after PM driver read.
 169   3                              break;
 170   3      
 171   3                      case VPCcmdRdBrightnessMax:                     //0x11 Read Brightness Max
 172   3                              //if ( (SYS_STATUS & 0x07) == 0x04 )    // Win8
 173   3                              if (( (SYS_STATUS & 0x07) >= 0x04 )&&( (SYS_STATUS & 0x07) <= 0x06))    // Win8,win8.1  or win10 ANGELAS01
             -0: add win10 mode
 174   3                              { nVPC_DATA = WIN8_BRI_MAX_STEP;}       //nVPC_DATA = 0x15;
 175   3                              else
 176   3                              { nVPC_DATA = BRIGHT_MAX_STEP; }        //nVPC_DATA = 0x10;
 177   3                              break;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 4   

 178   3      
 179   3                      case VPCcmdRdBrightness:                        //0x12 Read Brightness
 180   3                              nVPC_DATA = nBrightValue;
 181   3                              break;
 182   3      
 183   3                      case VPCcmdWrBrightness:                        //0x13 Write Brightness
 184   3                              nBrightValue = nVPC_DATA;
 185   3                              break;
 186   3      
 187   3                      case VPCcmdRdWlanStatus:                        //0x14 Read WLAN (1: enable, 0: disable)
 188   3                              if( nKillSwitchGET )
 189   3                                      nVPC_DATA = nWirelessLanGET; // need save to EEPROM
 190   3                              else
 191   3                                      nVPC_DATA = 0;
 192   3                  ECSMI_SCIEvent(WLANBTFOROSD);//:Add sent Qevent 0x42 for WLAN&BT on/off under win7.
 193   3                              break;
 194   3      
 195   3                      case VPCcmdWrWlanStatus:                        //0x15 Write WLAN
 196   3                              if( nKillSwitchGET )
 197   3                              {
 198   4                                      if ( IS_MASK_SET(DEVICEMODULE,WIRELESS_EXIST) )
 199   4                                      {
 200   5                                              if( nVPC_DATA )
 201   5                                              {
 202   6                                                      SET_MASK(DEVICEMODULE,WIRELESS);// Enable WLAN.
 203   6                                                      WLAN_OFF_Cnt = 1;                               // Delay 0~100msec.
 204   6                                                      SET_MASK(pDevStus, pWireless);  // bit1: 1:Wlan Enable.
 205   6                                              }
 206   5                                              else
 207   5                                              {
 208   6                                                      CLR_MASK(DEVICEMODULE,WIRELESS);// Disable WLAN.
 209   6                                                      WLAN_OFF_Cnt = 1;                               // Delay 0~100msec.
 210   6                                                      CLR_MASK(pDevStus, pWireless);  // bit1: 0:Wlan Disable.
 211   6                                              }
 212   5                          ECSMI_SCIEvent(WLANBTFOROSD);//:Add sent Qevent 0x42 for WLAN&BT on/off under win7.
 213   5                                      }
 214   4                                      else
 215   4                                      {
 216   5                                              CLR_MASK(DEVICEMODULE,WIRELESS);// Disable WLAN.
 217   5                                              WLAN_OFF_Cnt = 1;                               // Delay 0~100msec.
 218   5                                              CLR_MASK(pDevStus, pWireless);  // bit1: 0:Wlan Disable.
 219   5                                      }
 220   4                              }
 221   3                              break;
 222   3      
 223   3                      case VPCcmdRdBluetoothStatus:           //0x16 Read Bluetooth
 224   3                              if( nKillSwitchGET )
 225   3                                      nVPC_DATA = nBlueToothGET;
 226   3                              else
 227   3                                      nVPC_DATA = 0;
 228   3                  ECSMI_SCIEvent(WLANBTFOROSD);//:Add sent Qevent 0x42 for WLAN&BT on/off under win7.
 229   3                  break;
 230   3      
 231   3                      case VPCcmdWrBluetoothStatus:           //0x17 Write Bluetooth
 232   3                              if( nKillSwitchGET )
 233   3                              {
 234   4                                      if ( IS_MASK_SET(DEVICEMODULE,BLUETOOTH_EXIST) )
 235   4                                      {
 236   5                                              if( nVPC_DATA )
 237   5                                              {
 238   6                                                      nBlueToothEN;
 239   6                                                      SET_MASK(pDevStus, pBluetooth); // bit2: 1:Bluetooth Enable.
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 5   

 240   6                                              }
 241   5                                              else
 242   5                                              {
 243   6                                                      nBlueToothDIS;
 244   6                                                      CLR_MASK(pDevStus, pBluetooth); // bit2: 0:Bluetooth Disable.
 245   6                                              }
 246   5                          ECSMI_SCIEvent(WLANBTFOROSD);//:Add sent Qevent 0x42 for WLAN&BT on/off under win7.
 247   5                                      }
 248   4                              }
 249   3                              break;
 250   3      
 251   3                      case VPCcmdRdInverterStatus:            //0x18 Read Inverter On/Off
 252   3                              if ( !Read_ENBKL_IN() )
 253   3                                      nVPC_DATA = 0;
 254   3                              else
 255   3                                      nVPC_DATA = 1;
 256   3                              break;
 257   3      
 258   3                      case VPCcmdRdNovoStatus:                        //0x19 Read Novo
 259   3                              nVPC_DATA = uNovoVPCCount;              //uNovoVPCCount count 2sec set uNovoVPCCount=1;
 260   3                              uNovoVPCCount = 0;
 261   3                              break;
 262   3      
 263   3                      case VPCcmdQuery2:                                      //0x1A Query2 VPC
 264   3                              nVPC_DATA = uVPCeventSource2;
 265   3                  uVPCeventSource2=0x00; 
 266   3                              break;
 267   3      
 268   3                      case VPCcmdRdTouchPadStatus:            //0x1B Read TouchPad
 269   3                      //      if(IS_MASK_SET(pDevStus, pENABLE_TP))//ANGELAG008: remove       // cmd 59 7A,7B.......
 270   3                                      if(IS_MASK_CLEAR(pDevStatus1, b7DisableTP)) //ANGELAG008: add 
 271   3                                      nVPC_DATA = 1;
 272   3                              else
 273   3                                      nVPC_DATA = 0;
 274   3                              break;
 275   3      
 276   3                      case VPCcmdWrTouchPadStatus:            // 0x1C Write TouchPad
 277   3                              // optimize ,add no tp driver mode
 278   3      
 279   3      //72JERRY056:s+Add enable/disable TP function by HW pin.
 280   3                              if(READ_EC_TP_ON())
 281   3                                      {
 282   4                                      EC_TP_ON_LOW();
 283   4                                      SET_MASK(pDevStatus1, b7DisableTP);
 284   4                                      }
 285   3                              else
 286   3                                      {
 287   4                                      EC_TP_ON_HI();
 288   4                                      CLEAR_MASK(pDevStatus1, b7DisableTP);
 289   4                                      }
 290   3                              uVPCeventSource = TouchPad;
 291   3                              uVPCeventSource2 = 0;
 292   3                              ECQEvent(SDV_VPC_notify);
 293   3      //72JERRY056:e+Add enable/disable TP function by HW pin.
 294   3                              //Add VPC control touchpad function.
 295   3                      /*      if(uReserve07.fbit.nTPDriverIn ==0) //ANGELAG008: remove start
 296   3                              {
 297   3                                      if (IS_MASK_SET(pDevStus, pENABLE_TP))
 298   3                                      {
 299   3      
 300   3                                              ECSend2Port(2, 0xF5);
 301   3                          TPCLK_OUTPUT;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 6   

 302   3                          TPCLK_LOW();
 303   3                                              TouchPadCount = 3;
 304   3                                              CLR_MASK(pDevStus, pENABLE_TP);
 305   3                                      }
 306   3                                      else
 307   3                                      {
 308   3                                              TPCLK_OUTPUT;
 309   3                                      TPCLK_HI();
 310   3                          TPCLK_ALT;
 311   3                                              ECSend2Port(2, 0xF4);
 312   3                                              TouchPadCount = 3;
 313   3                                              SET_MASK(pDevStus, pENABLE_TP);
 314   3                                      }
 315   3                                      //Add Sent Q_EVENT to VPC show TP OSD.
 316   3                              uVPCeventSource = TouchPad;
 317   3                              uVPCeventSource2 = 0;
 318   3                                      ECSMI_SCIEvent(SDV_VPC_notify);
 319   3                                      //Add Sent Q_EVENT to VPC show TP OSD.          
 320   3                              }
 321   3                              else
 322   3                              {
 323   3                                      e0_prefix_code(0x51,MAKE_EVENT);
 324   3                                      CPL_MASK(pDevStus, pENABLE_TP);
 325   3                                      SET_MASK(StatusKeeper, b5TP_Event);
 326   3                                      e0_prefix_code(0x51,BREAK_EVENT);
 327   3                              }*/ //ANGELAG008: remove end
 328   3                              //ANGELAG008: add start
 329   3                                                              /*if(IS_MASK_SET(pDevStatus1,b5TPDRIVER_STATUS))
 330   3                                      {
 331   3                                       if((nVPC_DATA==0x01)&&IS_MASK_CLEAR(pDevStatus1,b7DisableTP)) //Set Enable Command, bu
             -t now state is Enable
 332   3                                              break;
 333   3                                        if((nVPC_DATA==0x00)&&IS_MASK_SET(pDevStatus1,b7DisableTP))   //Set Disable Command, but now state i
             -s Disable
 334   3                                              break;  
 335   3      
 336   3                                        if(IS_MASK_SET(pDevStatus1,b7DisableTP))  //enable TP
 337   3                                    {
 338   3                                              ECSMI_SCIEvent(0x3E);
 339   3                                              SET_MASK(pDevStatus3,b6EnDisTPSend); 
 340   3                                              if(IS_MASK_SET(pDevStatus1,b7DisableTP))
 341   3                                              {
 342   3                                                 SET_MASK(pDevStatus3,b7TPStateFormer);
 343   3                                              }
 344   3                                              else
 345   3                                              {
 346   3                                                 CLEAR_MASK(pDevStatus3,b7TPStateFormer);
 347   3                                              }                               
 348   3                                       }
 349   3                                   else  //Disable TP
 350   3                                   {
 351   3                                               ECSMI_SCIEvent(0x3F);
 352   3                                               SET_MASK(pDevStatus3,b6EnDisTPSend); 
 353   3                                               if(IS_MASK_SET(pDevStatus1,b7DisableTP))
 354   3                                               {
 355   3                                                      SET_MASK(pDevStatus3,b7TPStateFormer);
 356   3                                               }
 357   3                                               else
 358   3                                               {
 359   3                                                      CLEAR_MASK(pDevStatus3,b7TPStateFormer);
 360   3                                               }                                       
 361   3                                   }  
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 7   

 362   3                                  }*///72JERRY043:Support PTP TP show OSD,there isn't driver notify EC TP status,EC keep flag to rom.
 363   3                              //ANGELAG008: add end
 364   3                              // Add VPC control touchpad function.
 365   3                              // optimize ,add no tp driver mode.
 366   3      //72JERRY043:s+Support PTP TP show OSD,there isn't driver notify EC TP status,EC keep flag to rom.
 367   3                              /*if(IS_MASK_SET(SYS_MISC1,ACPI_OS))
 368   3                       {
 369   3      
 370   3                              Buffer_Key(0x14); //"Ctrl" key
 371   3                              Buffer_Key(0xe0); //
 372   3                              Buffer_Key(0x1f); //"win" key
 373   3                              Buffer_Key(0x5F); //"F24" key
 374   3      
 375   3                                      Buffer_Key(0xF0);
 376   3                                      Buffer_Key(0x14);
 377   3                                      Buffer_Key(0xe0);
 378   3                                      Buffer_Key(0xf0);
 379   3                                      Buffer_Key(0x1f);
 380   3                                      Buffer_Key(0xF0);
 381   3                                      Buffer_Key(0x5F);
 382   3              
 383   3                       eEEPROMData=Read_Eflash_Byte(EEPROMA2,(EEPROMA1_B03|0x07),0xE2);
 384   3                               if(eEEPROMData==0xff)
 385   3                                      {
 386   3                                      pDevStatus1=0;
 387   3                                      }
 388   3                               else
 389   3                                      {
 390   3                                      pDevStatus1=eEEPROMData;
 391   3                                      }
 392   3                               
 393   3                              CPL_MASK(pDevStatus1, b7DisableTP);
 394   3      
 395   3                              eEEPROMBank= 0x07;
 396   3                      eEEPROMAddrsss = 0xE2;
 397   3                      eEEPROMData = pDevStatus1;
 398   3                      Update_EEPROMMark();
 399   3                              }
 400   3                              uVPCeventSource = TouchPad;
 401   3                              uVPCeventSource2 = 0;
 402   3                              ECSMI_SCIEvent(SDV_VPC_notify);*///72JERRY051:Remove 72JERRY043 solution for PTP TP enable/disable.
 403   3                              //72JERRY043:e+Support PTP TP show OSD,there isn't driver notify EC TP status,EC keep flag to rom.
 404   3                              break;
 405   3      
 406   3                      case VPCcmdRdCameraStatus:                      // 0x1D Read Camera
 407   3                              nVPC_DATA = nCameraPwrGET;              // need restore to EEPROM
 408   3                              break;
 409   3      
 410   3                      case VPCcmdWrCameraStatus:                      //0x1E Write Camera
 411   3                              if(nVPC_DATA)
 412   3                              { SET_MASK(pDevStus, pCamera); }        // Enable Camera Power.
 413   3                              else
 414   3                              { CLR_MASK(pDevStus, pCamera); }        // Disable Camera Power.
 415   3                              break;
 416   3      
 417   3                      case VPCcmdRd3GStatus:                          //0x1F Read 3G
 418   3                              if( nKillSwitchGET )
 419   3                                      nVPC_DATA = nWWAN3GLanGET;
 420   3                              else
 421   3                                      nVPC_DATA = 0;
 422   3                              break;
 423   3      
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 8   

 424   3                      case VPCcmdWr3GStatus:                          //0x20 Write 3G
 425   3                              /*
 426   3                              if(nKillSwitchGET)
 427   3                              {
 428   3                                      pDevStus.bit.p3GDevice = nVPC_DATA;
 429   3                                      if(p3GDeviceGET)
 430   3                                              SET_MASK(DEVICEMODULE,WWAN_3G);
 431   3                                      else
 432   3                                              CLR_MASK(DEVICEMODULE,WWAN_3G);
 433   3                              }
 434   3                              */
 435   3                              break;
 436   3      
 437   3                      case VPCcmdRdODDStatus:                         //0x21 Read ODD Notify status
 438   3                              if ( IS_MASK_SET(uODDPWRsaving, uODD_PWRon) )   // Check bit0: ODD power on.
 439   3                              {
 440   4                                      CLR_MASK(uODDPWRsaving, uODD_PWRon);            // Clear bit0: ODD power on.
 441   4                                      nVPC_DATA = 0x01;                       // User press eject btn
 442   4                              }
 443   3                              else if( IS_MASK_SET(uODDPWRsaving, uODD_PWRoff1) )
 444   3                              {
 445   4                                      CLR_MASK(uODDPWRsaving, uODD_PWRoff1);          // Clear bit0: ODD power off.
 446   4                                      nVPC_DATA = 0x02;                       // power off
 447   4                              }
 448   3                              else if( IS_MASK_SET(uODDPWRsaving, uODD_InitEnd) )
 449   3                              {
 450   4                                      CLR_MASK(uODDPWRsaving, uODD_InitEnd);          // Clear bit6: ODD init End.
 451   4                                      nVPC_DATA = 0x03;                       // initial completion
 452   4                              }
 453   3                              break;
 454   3      
 455   3                      case VPCcmdWrDustModeStatus:            //0x22 Write DustMode
 456   3                              #if Lenovo_FAN_Dust                             // Dust mode
 457   3                              if(nVPC_DATA)
 458   3                              {
 459   4                                      //putchar('w');putchar('R');
 460   4                                      SET_MASK(SMartNoise, b5DedustingMode);
 461   4                                      SET_MASK(THERMAL_STATUS, INITOK);       // Enable Dust mode.
 462   4                              }
 463   3                              else
 464   3                              {
 465   4                                      //putchar('w');putchar('S');
 466   4                                      //CLR_MASK(SMartNoise, b5DedustingMode);
 467   4                                      StartFanClean = 0;                                              // stop dust mode
 468   4                                      CLR_MASK(THERMAL_STATUS, INITOK);               // Disable Dust mode.
 469   4                                      FAN_PWM = FAN_PWM_Min;                                  // PWM minimum.
 470   4                                      //SET_MASK(SMartNoise, b2StopReason);   // Dust mode by Cancel.
 471   4                                      SMartNoise = 0x04;
 472   4                              }
 473   3                              #endif  // Lenovo_FAN_Dust
 474   3                              break;
 475   3      
 476   3                      case VPCcmdRdAllRFStatus:                       //0x23 Read All RF Status
 477   3                              nVPC_DATA = nKillSwitchGET;
 478   3                              break;
 479   3      
 480   3                      case VPCcmdWrAllRFStatus:                       //0x24 Write All RF Status
 481   3                              break;
 482   3      
 483   3                      case VPCcmdRdCameraUtilityStatus:       //0x25 Read Camera Utility Status
 484   3                              nVPC_DATA = 0;
 485   3                              break;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 9   

 486   3      
 487   3                      case VPCcmdWrCameraUtilityStatus:       //0x26 Write Camera Utility Status
 488   3                              break;
 489   3      
 490   3                      case VPCcmdSetSuperPerformance:         //0x28 Set SuperPerformance mode
 491   3                              if( nVPC_DATA)
 492   3                              {
 493   4                                      //printf("ssp");
 494   4                                      SET_MASK(uVGATurboFun, uEnableGPS);
 495   4                                      SET_MASK(EM7FUNCTION,LSPRUNNING);       // Enable Super performance mode.
 496   4                              }
 497   3                              else
 498   3                              {
 499   4                                      //printf("dsp");
 500   4                                      CLR_MASK(uVGATurboFun, uEnableGPS);
 501   4                                      CLR_MASK(EM7FUNCTION,LSPRUNNING);       // Disable Super performance mode.
 502   4                              }
 503   3                              break;
 504   3      
 505   3                      case VPCcmdRdGCPUstatus:                        //0x29 Read GCPU notify status
 506   3                              if(nSwitchstateGET)
 507   3                              { nVPC_DATA = 0; }
 508   3                              else
 509   3                              { nVPC_DATA = 1; }
 510   3                              break;
 511   3                      case VPCcmdYogaModeControl:                     //0x2A Yoga Mode Control
 512   3                      RamDebug(nVPC_DATA); //MartinH008:add
 513   3                                      switch(nVPC_DATA)
 514   3                      {                               
 515   4                                        case 0x01:
 516   4                             YogaModeStatus = H0x01NotebookMode;      
 517   4                                             break;   
 518   4                                        case 0x02:
 519   4                             YogaModeStatus = H0x02TabletMode;        
 520   4                                              break;
 521   4                                        case 0x03:
 522   4                             YogaModeStatus = H0x03StandMode;                 
 523   4                                             break;
 524   4                                        case 0x04:
 525   4                             YogaModeStatus = H0x04TendMode;
 526   4                                             break;                                                                           
 527   4                                        case 0x08:     //Disable KB & TP
 528   4                          //if(!Read_LID_SW_IN())  break;    //MARTINY029:Remove
 529   4      
 530   4                          //RamDebug1(0xF5);    
 531   4                                      //RamDebug1(pDevStatus1);
 532   4                              
 533   4                                              CLEAR_MASK(pDevStatus3,b5VPCEnDISTP);
 534   4                          SET_MASK(pDevStatus1,b6MODE_STATUS);
 535   4                          SET_MASK(pDevStatus1,b4LNVAPP_STATUS);
 536   4                          SET_MASK(pDevStatus1,b2DisableKB);
 537   4                          if(IS_MASK_CLEAR(pDevStatus1,b3Scancode_STATUS))
 538   4                          {
 539   5                              SET_MASK(pDevStatus1,b3Scancode_STATUS);
 540   5                          }
 541   4      
 542   4                                      if((IS_MASK_SET(pDevStatus1,b5TPDRIVER_STATUS))&&(IS_MASK_CLEAR(pDevStatus1,b7DisableTP))) 
 543   4                                      {
 544   5                                              ECQEvent(0x3F);           
 545   5                                                      SET_MASK(pDevStatus3,b6EnDisTPSend); 
 546   5                                                      if(IS_MASK_SET(pDevStatus1,b7DisableTP))
 547   5                                                      {
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 10  

 548   6                                                         SET_MASK(pDevStatus3,b7TPStateFormer);
 549   6                                                      }
 550   5                                                      else
 551   5                                                      {
 552   6                                                         CLEAR_MASK(pDevStatus3,b7TPStateFormer);
 553   6                                                      }  
 554   5      
 555   5                                                  SET_MASK(pDevStatus1,b2DisableKB);
 556   5                                                      //RamDebug1(0x61);
 557   5                                       }
 558   4                                              if  (IS_MASK_SET(SYS_MISC1, ACPI_OS)) //HEGANGS027:Add the function of YMC control the TP
 559   4                                              {
 560   5                                                      if(READ_EC_TP_ON())//HEGANGS033:Modify VPC notify when TP state is changed
 561   5                                                      {
 562   6                                                              EC_TP_ON_LOW();
 563   6                                                              SET_MASK(pDevStatus1, b7DisableTP);
 564   6                                                              uVPCeventSource = TouchPad;
 565   6                                                              uVPCeventSource2 = 0;
 566   6                                                              ECQEvent(SDV_VPC_notify);
 567   6                                                      }
 568   5                                              }
 569   4                                      
 570   4                                              
 571   4                                 SET_MASK(pDevStatus1,b2DisableKB);
 572   4                                 //RamDebug1(0xB2);
 573   4                                                         if(IS_MASK_SET(EM9_NEWFUN, b7_LShiftPress))  
 574   4                                 { 
 575   5                                    simple_code(0x12,BREAK_EVENT);
 576   5                                                                CLEAR_MASK(EM9_NEWFUN,b7_LShiftPress);
 577   5                                                         }
 578   4                                                         if(IS_MASK_SET(EM9_NEWFUN,b6_RShiftPress))
 579   4                                                         {
 580   5                                    simple_code(0x59,BREAK_EVENT);
 581   5                                                                CLEAR_MASK(EM9_NEWFUN, b6_RShiftPress);
 582   5                                                         }
 583   4                                                          if(IS_MASK_SET(EM9_NEWFUN, b5_LAltPress)) 
 584   4                                 { 
 585   5                                    simple_code(0x11,BREAK_EVENT);
 586   5                                                                CLEAR_MASK(EM9_NEWFUN,b5_LAltPress);
 587   5                                                         }
 588   4                                                         if(IS_MASK_SET(EM9_NEWFUN,b4_RAltPress))
 589   4                                                         {
 590   5                                    e0_prefix_code(0x11,BREAK_EVENT);
 591   5                                                                CLEAR_MASK(EM9_NEWFUN, b4_RAltPress);
 592   5                                                         }
 593   4                                                          if(IS_MASK_SET(EM9_NEWFUN, b3_LCtrlPress)) 
 594   4                                 { 
 595   5                                    simple_code(0x14,BREAK_EVENT);
 596   5                                                                CLEAR_MASK(EM9_NEWFUN,b3_LCtrlPress);
 597   5                                                         }
 598   4                                                         if(IS_MASK_SET(EM9_NEWFUN,b2_RCtrlPress))
 599   4                                                         {
 600   5                                    e0_prefix_code(0x14,BREAK_EVENT);
 601   5                                                                CLEAR_MASK(EM9_NEWFUN, b2_RCtrlPress);
 602   5                                                         }
 603   4                                           break;
 604   4                                         case  0x09:     //Enable KB & TP
 605   4                           //if(!Read_LID_SW_IN())   //MARTINY029:Remove
 606   4                                               //  break;                         //MARTINY029:Remove
 607   4      
 608   4                                           CLEAR_MASK(pDevStatus1,b6MODE_STATUS);
 609   4                                               if(IS_MASK_CLEAR(pDevStatus2,b1TransAP_CTRL))  //MARTINY029:Add
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 11  

 610   4                                               {
 611   5                                            if(!Read_LID_PAD())  
 612   5                                                  break; 
 613   5                                               } 
 614   4                         //RamDebug1(0xF4);
 615   4                                         //RamDebug1(pDevStatus1);
 616   4                                         CLEAR_MASK(pDevStatus3,b5VPCEnDISTP); 
 617   4      
 618   4                                         SET_MASK(pDevStatus1,b4LNVAPP_STATUS);
 619   4                                         CLEAR_MASK(pDevStatus1,b2DisableKB);
 620   4                                         if(IS_MASK_CLEAR(pDevStatus1,b3Scancode_STATUS))
 621   4                                         {
 622   5                                                         SET_MASK(pDevStatus1,b3Scancode_STATUS);
 623   5                                         }
 624   4      
 625   4                                      if((IS_MASK_SET(pDevStatus1,b5TPDRIVER_STATUS))&&(IS_MASK_SET(pDevStatus1,b7DisableTP))) 
 626   4                                      {
 627   5                                                 ECQEvent(0x3E);            
 628   5      
 629   5                                                 SET_MASK(pDevStatus3,b6EnDisTPSend); 
 630   5                                                 if(IS_MASK_SET(pDevStatus1,b7DisableTP))
 631   5                                                 {
 632   6                                                        SET_MASK(pDevStatus3,b7TPStateFormer);
 633   6                                                 }
 634   5                                                 else
 635   5                                                 {
 636   6                                                        CLEAR_MASK(pDevStatus3,b7TPStateFormer);
 637   6                                                 }  
 638   5      
 639   5                                             CLEAR_MASK(pDevStatus1,b2DisableKB);
 640   5                                             Enable_Any_Key_Irq();
 641   5                                                 //RamDebug1(0x51);   
 642   5                                      }
 643   4                                              if  (IS_MASK_SET(SYS_MISC1, ACPI_OS))//HEGANGS027:Add the function of YMC control the TP
 644   4                                              {
 645   5                                                      if(!READ_EC_TP_ON())
 646   5                                                      {
 647   6                                                              if(Read_LID_PAD())//HEGANGS040:Ignore the enable TP CMD if PAD_LID is closed
 648   6                                                              {
 649   7                                                                      EC_TP_ON_HI();
 650   7                                                                      CLEAR_MASK(pDevStatus1, b7DisableTP);
 651   7                                                                      uVPCeventSource = TouchPad;
 652   7                                                                      uVPCeventSource2 = 0;
 653   7                                                                      ECQEvent(SDV_VPC_notify);
 654   7                                                              }
 655   6                                                      }
 656   5                                              }
 657   4      
 658   4                          CLEAR_MASK(pDevStatus1,b2DisableKB);
 659   4                                      Enable_Any_Key_Irq();
 660   4                                              //RamDebug1(0xB4);
 661   4      
 662   4                                   break;
 663   4                                      
 664   4                                        case 0x0A:
 665   4                            SET_MASK(pDevStatus2,b1TransAP_CTRL);
 666   4                                            break;
 667   4                        case 0x0B:
 668   4                             CLEAR_MASK(pDevStatus2,b1TransAP_CTRL);
 669   4                                             break;
 670   4                                        default:
 671   4                                              break;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 12  

 672   4                                  }                                   
 673   3                                              
 674   3                                       break;
 675   3      
 676   3                      case VPCcmdRdDustModeStatus:            //0x2B Read Dust mode status
 677   3                              #if Lenovo_FAN_Dust                     // Dust mode
 678   3                              if ( IS_MASK_SET(SMartNoise, b1FanCleanStart) )
 679   3                              {
 680   4                                      //putchar('r');putchar('R');
 681   4                                      nVPC_DATA = 0x03;       //Dust Mode running & support Dust mode
 682   4                              }
 683   3                              else
 684   3                              {
 685   4                                      if ( IS_MASK_CLEAR(SMartNoise, b2StopReason) )
 686   4                                      {
 687   5                                              //putchar('r');putchar('S');
 688   5                                              nVPC_DATA = 0x05;       //Dust Mode stopped & support Dust mode
 689   5                                      }
 690   4                                      else
 691   4                                      {
 692   5                                              nVPC_DATA = 0x85;       //Dust Mode running & support Dust mode
 693   5                                      }
 694   4                              }
 695   3                                      //ANGELAG008:add start
 696   3                      #else
                                                 nVPC_DATA = 0x00;
                                              //ANGELAG008:add end
                                      #endif  // Lenovo_FAN_Dust
 700   3                              break;
 701   3      
 702   3                      case VPCcmdRdSuperPerformance:          //0x2D Read status of SuperPerformance mode on EM7
 703   3                              nVPC_DATA = EM7FUNCTION;
 704   3                              break;
 705   3      
 706   3                      case VPCcmdRdOnekeyStatus:                      //0x31 Read OneKey theater
 707   3                      //      nVPC_DATA = pOneKeyAPPStatus;   //Bit0: onekey recovery Bit1:theater Bit2: security Bit3:PwrSaving
 708   3                      //      pOneKeyAPPStatus = 0;
 709   3                              nVPC_DATA = 0x40;
 710   3                              break;
 711   3      
 712   3                      case VPCcmdRdGenenalstatus:                     //0x2F Read Genenal event status        //09110502 Isaac Start
 713   3                              //if( IS_MASK_SET(EM7FUNCTION,OVERTEMPATI) )                    // ATI graphic.
 714   3                              //{
 715   3                              //      nVPC_DATA = 0x08;                       //bit3
 716   3                              //      CLR_MASK(EM7FUNCTION,OVERTEMPATI);      // Disable Over Temp ATI.
 717   3                              //}
 718   3                              if ( IS_MASK_SET(LENOVOPMFW,BATTERY_MAIN_CAL) || IS_MASK_SET(LENOVOPMFW_Temp,BATTERY_CALIBRATION_OK) )  
             -// Battery Calibration
 719   3                              {
 720   4                                      CLR_MASK(LENOVOPMFW,BATTERY_MAIN_CAL);
 721   4                                      CLR_MASK(LENOVOPMFW,BATTERY_CAL_END);
 722   4                      CLR_MASK(LENOVOPMFW_Temp,BATTERY_CALIBRATION_OK);
 723   4                                      nVPC_DATA = 0x04;
 724   4                              }
 725   3                  if(IS_MASK_SET(EM9_NEWFUN,b0_FnPlus))
 726   3                  {
 727   4                      CLR_MASK(EM9_NEWFUN,b0_FnPlus);
 728   4                      nVPC_DATA = 0x10; 
 729   4                  }      
 730   3                  else if(IS_MASK_SET(EM9_NEWFUN,b1_FnMinus))
 731   3                  {
 732   4                      CLR_MASK(EM9_NEWFUN,b1_FnMinus);
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 13  

 733   4                      nVPC_DATA = 0x20; 
 734   4                  }                                                       
 735   3                              #if Support_CPU_Auto
                          if( IS_MASK_SET(LENOVOPMFW_Temp,Auto_Mode_Change))
                          {
                              CLEAR_MASK(LENOVOPMFW_Temp,Auto_Mode_Change);
                              if(IS_MASK_SET(LENOVOPMFW_Temp,Auto_Mode_Off))
                              {
                                      nVPC_DATA = 0x02;
                              }
                              else // Auto_Mode_OFF
                              {
                                      nVPC_DATA = 0x00;
                              }
                          }
                                      #endif  // Support_CPU_Auto
 749   3                              break;
 750   3      
 751   3                      case VPCcmdWrQuietStatus:                       //0x32 Write Quiet Status
 752   3                              break;
 753   3      
 754   3                      case VPCcmdWrBacklightStatus:           //0x33 Write LCD backlight Status inverter
 755   3                              if( Read_BKOFF() )
 756   3                              {
 757   4                                      if( !nVPC_DATA )        // Turn off backlight.
 758   4                                      {
 759   5                                              //printf("\nDb");
 760   5                                              SET_MASK(cCmd, b3BkOff);
 761   5                                              SET_MASK(OEMControl, b1BkOff);//ANGELAG005:add
 762   5                                      }
 763   4                              }
 764   3                              else
 765   3                              {
 766   4                                      if( nVPC_DATA == 0x01 ) // Turn on backlight.
 767   4                                      {
 768   5                                              //printf("\nEb");
 769   5                                              CLR_MASK(cCmd, b3BkOff);
 770   5                                              CLR_MASK(OEMControl, b1BkOff);//ANGELAG005:add
 771   5                                      }
 772   4                              }
 773   3                              break;
 774   3      
 775   3                      //Add VPC 0x38 command.
 776   3                      case VPCcmdRdBatteryACStatus:                   //0x38 Read Battery\Adapter Plug in\Plug out status 
 777   3                  nVPC_DATA = 0x00;
 778   3                  if(IS_MASK_SET(SYS_STATUS,AC_ADP))
 779   3                  {
 780   4                      SET_MASK(nVPC_DATA, BIT0);
 781   4                      CLEAR_MASK(nVPC_DATA, BIT1);
 782   4                  }   
 783   3                              else
 784   3                              {
 785   4                      SET_MASK(nVPC_DATA, BIT1);
 786   4                      CLEAR_MASK(nVPC_DATA, BIT0);
 787   4                  }   
 788   3                              if(IS_MASK_SET(SEL_STATE0,PRESENT_A))
 789   3                  {
 790   4                      SET_MASK(nVPC_DATA, BIT2);
 791   4                      CLEAR_MASK(nVPC_DATA, BIT3);
 792   4                  }   
 793   3                              else
 794   3                              {
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 14  

 795   4                      SET_MASK(nVPC_DATA, BIT3);
 796   4                      CLEAR_MASK(nVPC_DATA, BIT2);
 797   4                  }
 798   3                              
 799   3                              //Bit0: Adapter insert; Bit1: Adatper plugout ;
 800   3                              //Bit2: the main battery insert; Bit3: the main battery plugout;
 801   3                              //Bit4: the second battery insert  Bit5: the second battery plugout                     
 802   3                      break;
 803   3                      default:
 804   3                              break;
 805   3                      }
 806   2                      nVPC_CMD = 0x00;
 807   2              }
 808   1      }
 809          
 810          //ANGELAG008: add start
 811          void TPInfor_ToVPC(void)
 812          {
 813   1         if(SystemIsS0)
 814   1         {
 815   2            if(IS_MASK_SET(pDevStatus3,b6EnDisTPSend))
 816   2            {
 817   3               if((IS_MASK_SET(pDevStatus3,b7DisableTP))!=(IS_MASK_SET(pDevStatus1,b7DisableTP)))
 818   3               {
 819   4                  CLEAR_MASK(pDevStatus3,b6EnDisTPSend);
 820   4                              if(uReserve07.fbit.nVPCDriverIn==1)   // Check VPC driver
 821   4                              {
 822   5                                uVPCeventSource = TouchPad;
 823   5                                uVPCeventSource2 = 0;
 824   5                                ECQEvent(SDV_VPC_notify);
 825   5                              }                       
 826   4               }
 827   3            } 
 828   2         }  
 829   1      }
 830          //ANGELAG008: add end
 831          
 832          void ThermalMailBox(void)
 833          {
 834   1              if(EXT_NAMESPACE_BANK)
 835   1              {
 836   2              RamDebug(EXT_NAMESPACE_BANK);
 837   2              RamDebug(EXT_NAMESPACE_INDEX);
 838   2                      switch(EXT_NAMESPACE_BANK)
 839   2                      {
 840   3                      case 0x81:
 841   3                              if (EXT_NAMESPACE_INDEX==0x02)
 842   3                                      EXT_NAMESPACE_DATA = (FAN_PWM/2);
 843   3                              if (EXT_NAMESPACE_INDEX==0x04)
 844   3                                      EXT_NAMESPACE_DATA = nAtmFanSpeed;
 845   3                              else if (EXT_NAMESPACE_INDEX==0x07)
 846   3                                      EXT_NAMESPACE_DATA = FAN_Tab_OFF;
 847   3                              else if (EXT_NAMESPACE_INDEX==0x08)
 848   3                                      EXT_NAMESPACE_DATA = FAN_Tab_LOW;
 849   3                              else if (EXT_NAMESPACE_INDEX==0x09)
 850   3                                      EXT_NAMESPACE_DATA = FAN_Tab_HI;
 851   3                              else if (EXT_NAMESPACE_INDEX==0x0A)
 852   3                                      EXT_NAMESPACE_DATA = THR_Turo_Rem;
 853   3                              else if (EXT_NAMESPACE_INDEX==0x0B)
 854   3                                      EXT_NAMESPACE_DATA = THR_PRO_OFF;
 855   3                              else if (EXT_NAMESPACE_INDEX==0x0C)
 856   3                                      EXT_NAMESPACE_DATA = THR_Turo_OFF;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 15  

 857   3                              else if (EXT_NAMESPACE_INDEX==0x0D)
 858   3                                      EXT_NAMESPACE_DATA = THR_PRO_ON;
 859   3                              else if (EXT_NAMESPACE_INDEX==0x0E)
 860   3                                      EXT_NAMESPACE_DATA = VFAN_Tab_OFF;
 861   3                              else if (EXT_NAMESPACE_INDEX==0x0F)
 862   3                                      EXT_NAMESPACE_DATA = VFAN_Tab_LOW;
 863   3                              else if (EXT_NAMESPACE_INDEX==0x10)
 864   3                                      EXT_NAMESPACE_DATA = VFAN_Tab_HI;
 865   3                              else if (EXT_NAMESPACE_INDEX==0x11)
 866   3                                      EXT_NAMESPACE_DATA = VTHR_Turo_Rem;
 867   3                              else if (EXT_NAMESPACE_INDEX==0x12)
 868   3                                      EXT_NAMESPACE_DATA = VTHR_PRO_OFF;
 869   3                              else if (EXT_NAMESPACE_INDEX==0x13)
 870   3                                      EXT_NAMESPACE_DATA = VTHR_Turo_OFF;
 871   3                              else if (EXT_NAMESPACE_INDEX==0x14)
 872   3                                      EXT_NAMESPACE_DATA = VTHR_PRO_ON;
 873   3                              break;
 874   3      
 875   3                      case 0x82:
 876   3                              break;
 877   3      
 878   3                      case 0x84:
 879   3                              if (EXT_NAMESPACE_INDEX==0x00)
 880   3                                      EXT_NAMESPACE_DATA = 0;
 881   3                              else if (EXT_NAMESPACE_INDEX==0x01)
 882   3                                      EXT_NAMESPACE_DATA = nRamTemp;
 883   3                              else if (EXT_NAMESPACE_INDEX==0x02)
 884   3                                      EXT_NAMESPACE_DATA = nVramTemp;
 885   3                              else if (EXT_NAMESPACE_INDEX==0x03)
 886   3                                      EXT_NAMESPACE_DATA = nNBTemp;
 887   3                      }
 888   2              RamDebug(EXT_NAMESPACE_DATA);
 889   2                      EXT_NAMESPACE_INDEX = 0;
 890   2                      EXT_NAMESPACE_BANK = 0;
 891   2              }
 892   1      }
 893          //------------------------------------------------------------
 894          // Debug function
 895          //------------------------------------------------------------
 896          #define DebugRamAddr 0xA00   //ANGELAS064:change '0xF00' to '0xA00'
 897          #define DebugRamRange 0xFF
 898          
 899          void RamDebug(unsigned char dbgcode)
 900          {
 901   1              PORT_BYTE_PNTR ClearIndex;
 902   1              PORT_BYTE_PNTR byte_register_pntr;
 903   1          BYTE index;
 904   1              BYTE i;
 905   1      
 906   1          byte_register_pntr = DebugRamAddr+DebugRamRange;
 907   1          index = *byte_register_pntr;
 908   1          *byte_register_pntr +=1;
 909   1      
 910   1          if ( *byte_register_pntr == DebugRamRange )
 911   1              {
 912   2                      *byte_register_pntr = 0;
 913   2              ClearIndex= DebugRamAddr;
 914   2      
 915   2                      for (i=0x00;i<DebugRamRange;i++)
 916   2              {
 917   3                      *ClearIndex=0x00;
 918   3                      ClearIndex++;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 16  

 919   3              }
 920   2              }
 921   1      
 922   1              byte_register_pntr = DebugRamAddr + index;
 923   1          *byte_register_pntr = dbgcode;
 924   1      }
 925          
 926          
 927          //ANGELAS064:add start
 928          void ClearDiagRam(void)
 929          {
 930   1              BYTE *ClearIndex;
 931   1              WORD i;
 932   1          ClearIndex= (XBYTE *)DiagNameSpace;
 933   1              for (i=0x00;i<=0xFF;i++)
 934   1              {
 935   2                      *ClearIndex=0x00;
 936   2                      ClearIndex++;
 937   2              }
 938   1      
 939   1              //Rdbg_index=0;  
 940   1      }
 941          void DiagSMBusOperation(void)     
 942          {
 943   1              BYTE result;
 944   1              BYTE HOSTx_x_State;
 945   1                               
 946   1              if( SMB_PRTC_Diag!= 0x00 )
 947   1              {
 948   2                      SMB_STS_Diag = 0x00;
 949   2      
 950   2                      SMB_PRTC_Diag = SMB_PRTC_Diag&0x0F; 
 951   2              #if 0
                              if((vOSSMbusComd_table[(SMB_PRTC & 0x0F)])()) 
                              {
                                      SMB_STS = 0x80;
                              }
                              else 
                              {
                                      if( IS_MASK_SET(HOSTA_A,BIT0) ) { SMB_STS = 0x1A; }
                                      else if( IS_MASK_SET(HOSTA_A,BIT2) ) { SMB_STS = 0x17; }
                                      else if( IS_MASK_SET(HOSTA_A,BIT3) ) { SMB_STS = 0x07; }
                                      else if( IS_MASK_SET(HOSTA_A,BIT4) ) { SMB_STS = 0x19; }
                                      else if( IS_MASK_SET(HOSTA_A,BIT5) ) { SMB_STS = 0x10; }
                                      else if( IS_MASK_SET(HOSTA_A,BIT6) ) { SMB_STS = 0x18; }
                              }
                      #else
 966   2              
 967   2                      if(SMB_PRTC_Diag == 0x04)               //0x04-Send Byte
 968   2                      {
 969   3                              result = bSMBusSendByte(SMB_EC_Chennel_Diag, SMB_ADDR_Diag, SMB_CMD_Diag );
 970   3                      }
 971   2                      else if(SMB_PRTC_Diag == 0x05)          //0x05-Receive Byte
 972   2                      {
 973   3                              result = bSMBusReceiveByte(SMB_EC_Chennel_Diag, SMB_ADDR_Diag, &SMB_DATA_Diag);
 974   3                      }
 975   2                      else if(SMB_PRTC_Diag == 0x06)          //0x06-Write Byte
 976   2                      {
 977   3                              result = bRWSMBus(SMB_EC_Chennel_Diag, SMbusWB, SMB_ADDR_Diag, SMB_CMD_Diag, &SMB_DATA_Diag, SMBus_NoPE
             -C);
 978   3                      }
 979   2                      else if(SMB_PRTC_Diag == 0x07)          //0x07-Read Byte
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 17  

 980   2                      {
 981   3                              result = bRWSMBus(SMB_EC_Chennel_Diag, SMbusRB, SMB_ADDR_Diag, SMB_CMD_Diag, &SMB_DATA_Diag, SMBus_NoPE
             -C);
 982   3                      }
 983   2                      else if(SMB_PRTC_Diag == 0x08)          //0x08-Write Word
 984   2                      {
 985   3                              result = bRWSMBus(SMB_EC_Chennel_Diag, SMbusWW, SMB_ADDR_Diag, SMB_CMD_Diag, &SMB_DATA_Diag, SMBus_NoPE
             -C);
 986   3                      }
 987   2                      else if(SMB_PRTC_Diag == 0x09)          //0x09-Read Word
 988   2                      {
 989   3                              result =  bRWSMBus(SMB_EC_Chennel_Diag, SMbusRW, SMB_ADDR_Diag, SMB_CMD_Diag, &SMB_DATA_Diag, SMBus_NoP
             -EC);
 990   3                      }
 991   2                      else if(SMB_PRTC_Diag == 0x0A)          //0x0A-Write Block
 992   2                      {
 993   3                              result = bWSMBusBlock(SMB_EC_Chennel_Diag, SMbusWBK, SMB_ADDR_Diag, SMB_CMD_Diag, &SMB_DATA_Diag, SMB_B
             -CNT_Diag,SMBus_NoPEC);
 994   3                      }
 995   2                      else if(SMB_PRTC_Diag == 0x0B)          //0x0B-Read Block
 996   2                      {
 997   3                              result = bRSMBusBlock(SMB_EC_Chennel_Diag, SMbusRBK, SMB_ADDR_Diag, SMB_CMD_Diag, &SMB_DATA_Diag);
 998   3                      }
 999   2      
1000   2                      if(SMbusCh2 == SMB_EC_Chennel_Diag)
1001   2                      {
1002   3                          HOSTx_x_State = HOSTA_B;
1003   3                      }
1004   2                      else if(SMbusCh1 == SMB_EC_Chennel_Diag)
1005   2                      {
1006   3                              HOSTx_x_State = HOSTA_A;
1007   3                      }
1008   2                      else if(SMbusCh3== SMB_EC_Chennel_Diag)
1009   2                      {
1010   3                              HOSTx_x_State = HOSTA_C;
1011   3                      }
1012   2                                       
1013   2                      if(result)
1014   2                      {
1015   3                              SMB_STS_Diag = 0x80;
1016   3                      }
1017   2                      else
1018   2                      {
1019   3                              //SMB_STS = 0x5A;//W074>>>:Battery FW update channel use B.
1020   3                              if( IS_MASK_SET(HOSTx_x_State,BIT0) ) { SMB_STS_Diag = 0x1A; }
1021   3                              else if( IS_MASK_SET(HOSTx_x_State,BIT2) ) { SMB_STS_Diag = 0x17; }
1022   3                              else if( IS_MASK_SET(HOSTx_x_State,BIT3) ) { SMB_STS_Diag = 0x07; }
1023   3                              else if( IS_MASK_SET(HOSTx_x_State,BIT4) ) { SMB_STS_Diag = 0x19; }
1024   3                              else if( IS_MASK_SET(HOSTx_x_State,BIT5) ) { SMB_STS_Diag = 0x10; }
1025   3                              else if( IS_MASK_SET(HOSTx_x_State,BIT6) ) { SMB_STS_Diag = 0x18; }
1026   3                      }
1027   2                      //RamDebug(0x88);
1028   2                      //RamDebug(0xAA);
1029   2                      //RamDebug(result);
1030   2                      //RamDebug(HOSTx_x_State);
1031   2              #endif
1032   2                              
1033   2                      SMB_PRTC_Diag = 0x00;
1034   2              
1035   2                      //ECSMI_SCIEvent(ACPI_ACIN_SCI);        // toggle HOST
1036   2              }
1037   1      }
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 18  

1038          
1039          void Diag_interface(void)
1040          {
1041   1          BYTE *Tmp_XPntr;  
1042   1              if(nDiagInterface_CMD)
1043   1              {
1044   2                  RamDebug(0xDC);  
1045   2              RamDebug(nDiagInterface_CMD);           
1046   2                      RamDebug(nDiagInterface_ECRegH);   
1047   2                      RamDebug(nDiagInterface_ECRegL);  
1048   2      
1049   2                      switch(nDiagInterface_CMD)
1050   2                      {
1051   3                      case DiagReadECReg:                                     //0x11 Read EC Register
1052   3                              nDiagInterface_DATA = *((XBYTE *)((nDiagInterface_ECRegH<<0x08)+nDiagInterface_ECRegL));
1053   3                              RamDebug(nDiagInterface_DATA);  
1054   3                              //uVPCeventSource = 0;                  //Clear it after AP read.
1055   3                              break;
1056   3                      case DiagWriteECReg:                                    //0x12 Write EC Register
1057   3                              *((XBYTE *)((nDiagInterface_ECRegH<<0x08)+nDiagInterface_ECRegL))= nDiagInterface_DATA;
1058   3                              RamDebug(nDiagInterface_DATA);  
1059   3                              //uVPCeventSource = 0;                  //Clear it after AP read.
1060   3                              break;  
1061   3              case DiagReadECRAM:                             //0x13 Read EC RAM
1062   3                  nDiagInterface_DATA = *((XBYTE *)((nDiagInterface_ECRegH<<0x08)+nDiagInterface_ECRegL));
1063   3                              RamDebug(nDiagInterface_DATA);  
1064   3                      break;
1065   3              case DiagWriteECRAM:                                    //0x14 Write EC RAM
1066   3                      *((XBYTE *)((nDiagInterface_ECRegH<<0x08)+nDiagInterface_ECRegL)) = nDiagInterface_DATA;
1067   3                              RamDebug(nDiagInterface_DATA); 
1068   3                      break;
1069   3              case DiagReadECSpace:                           //0x80 Read EC Register
1070   3                      nDiagInterface_DATA =   *((XBYTE *)(NameSpace+nDiagInterface_ECRegL));
1071   3                              RamDebug(nDiagInterface_DATA);  
1072   3                      break;
1073   3              case DiagWriteECSpace:                                  //0x81 Write EC Register
1074   3                      *((XBYTE *)(NameSpace+nDiagInterface_ECRegL)) = nDiagInterface_DATA;
1075   3                              RamDebug(nDiagInterface_DATA);  
1076   3                      break;                            
1077   3      
1078   3              case DiagSMBusOperate:                                  //0x20 Write EC Register
1079   3                  if(0x00 == SMB_EC_Chennel_Diag)
1080   3                                       SMB_EC_Chennel_Diag = SMbusCh2;
1081   3                              else 
1082   3                                       SMB_EC_Chennel_Diag--;
1083   3                      DiagSMBusOperation();
1084   3                      break;
1085   3                                       
1086   3              case DiagSimulateFnKey:                                 //0x21 Simulate Function Key
1087   3                  if((nDiagInterface_DATA>0)&&(nDiagInterface_DATA<=12))
1088   3                              {
1089   4                                  FunctionKeyDebounce=(nDiagInterface_DATA<<0x04)+10; //ANGELAS084:add
1090   4                                  (HotKey_Fn_Fx[nDiagInterface_DATA-1])(0);   //ANGELAS084:add
1091   4                          }  
1092   3                      break;
1093   3                      //MEILING013:S+
1094   3                      case DiagSimulateQEvent:
1095   3                              ECQEvent(nDiagInterface_DATA);
1096   3                              break;
1097   3                      //MEILING013:E+
1098   3              case DiagReadTemp:                                      //0x26 Read temperature
1099   3                  if(0x01 == nDiagInterface_DATA)
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 19  

1100   3                              {
1101   4                                      nDiagInterface_DATA = nCpuTemp;
1102   4                          } 
1103   3                              else if(0x02 == nDiagInterface_DATA)
1104   3                              {
1105   4                                      nDiagInterface_DATA = VGA_TEMP;
1106   4                              }
1107   3                              else if(0x03 == nDiagInterface_DATA)
1108   3                              {
1109   4                                      //nDiagInterface_DATA = nVramTemp; //MEILING013:remove.
1110   4                                      nDiagInterface_DATA = EXTVGA_TEMP; //MEILING013:add.
1111   4                              }
1112   3                              else if(0x04 == nDiagInterface_DATA)
1113   3                              {
1114   4                                      //nDiagInterface_DATA = nNBTemp;  //MEILING013:remove.
1115   4                                      nDiagInterface_DATA = ThermistorCPU_TEMP; //MEILING013:add.
1116   4                              }
1117   3                              else if(0x05 == nDiagInterface_DATA)
1118   3                              {
1119   4                                      nDiagInterface_DATA = nRamTemp;
1120   4                              }
1121   3                              //MEILING013:S+
1122   3                              else if(0x06 == nDiagInterface_DATA)
1123   3                              {
1124   4                                      nDiagInterface_DATA = nVramTemp;
1125   4                              }
1126   3                              //MEILING013:E+
1127   3                      break;  
1128   3              case DiagReadFanSpeed:                                  //0x27 Read Fan Speed
1129   3                  if(0x01 == nDiagInterface_DATA)
1130   3                              {
1131   4                                  nDiagInterface_DATA = nAtmFanSpeed;
1132   4                          } 
1133   3                              else if(0x02 == nDiagInterface_DATA)
1134   3                              {
1135   4                                      //nDiagInterface_DATA = nAtmFan2Speed;
1136   4                                      nDiagInterface_DATA = 0x00; //MEILING013:add.
1137   4                              }
1138   3                              //MEILING013:S+
1139   3                              else if(0x03 == nDiagInterface_DATA)
1140   3                              {
1141   4                                      nDiagInterface_DATA = FAN_PWM;
1142   4                              }
1143   3                              else if(0x04 == nDiagInterface_DATA)
1144   3                              {
1145   4                                      //nDiagInterface_DATA = FAN2_PWM;
1146   4                                      nDiagInterface_DATA = 0x00;
1147   4                              }
1148   3                              //MEILING013:E+
1149   3                      break;  
1150   3              case DiagWriteFanSpeed:                                 //0x28 Write Fan Speed
1151   3                  if(nDiagInterface_DATA >= 0x80) //bi7 = 1: Fan2, //bit7 = 0: Fan1
1152   3                              {
1153   4                                  uReserve07.fbit.nFanManual = 1;//MEILING013:add.
1154   4                                  //DebugFan2RPMT = nDiagInterface_DATA -128;
1155   4                                  ManualFanPRM = nDiagInterface_DATA - 128; //MEILING013:add.
1156   4                          } 
1157   3                              else 
1158   3                              {
1159   4                                      //uReserve07.fbit.b7Fan2Manual = 1;//MEILING013:add.
1160   4                                      //DebugFan2RPMT = nDiagInterface_DATA;
1161   4                                      //ManualFan2PRM = nDiagInterface_DATA;  //MEILING013:add.
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 20  

1162   4                              }
1163   3                      break;  
1164   3                      case DiagReadThermalTable:                                      //0x29 Read Thermal Table
1165   3                  /*
1166   3                         if(IS_MASK_CLEAR(nDiagInterface_DATA,FanNum)&&IS_MASK_CLEAR(nDiagInterface_DATA,FanType
             -)) //Fan1 CPU
1167   3                              {
1168   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1169   3                                              nDiagInterface_DATA = *ThermalTalbe1CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn;
1170   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1171   3                                              nDiagInterface_DATA = *ThermalTalbe1CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff;
1172   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1173   3                                              nDiagInterface_DATA = *ThermalTalbe1CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM;
1174   3                            } 
1175   3                              else  if(IS_MASK_CLEAR(nDiagInterface_DATA,FanNum)&&IS_MASK_SET(nDiagInterface_DATA,FanType))  //Fan1 V
             -GA
1176   3                              {
1177   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1178   3                                              nDiagInterface_DATA = *ThermalTalbe1VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn;
1179   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1180   3                                              nDiagInterface_DATA = *ThermalTalbe1VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff;
1181   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1182   3                                              nDiagInterface_DATA = *ThermalTalbe1VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM;
1183   3                            } 
1184   3                         else  if(IS_MASK_SET(nDiagInterface_DATA,FanNum)&&IS_MASK_CLEAR(nDiagInterface_DATA,Fan
             -Type))  //Fan2 CPU
1185   3                              {
1186   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1187   3                                              nDiagInterface_DATA = *ThermalTalbe2CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn;
1188   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1189   3                                              nDiagInterface_DATA = *ThermalTalbe2CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff;
1190   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1191   3                                              nDiagInterface_DATA = *ThermalTalbe2CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM;
1192   3                             }
1193   3                              else  if(IS_MASK_SET(nDiagInterface_DATA,FanNum)&&IS_MASK_SET(nDiagInterface_DATA,FanType))  //Fan2 VGA
1194   3                              {
1195   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1196   3                                      nDiagInterface_DATA = *ThermalTalbe2VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn;
1197   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1198   3                                              nDiagInterface_DATA = *ThermalTalbe2VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff;
1199   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1200   3                                              nDiagInterface_DATA = *ThermalTalbe2VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM;
1201   3                             }
1202   3                              */
1203   3                      break;  
1204   3                      case DiagWriteThermalTable:                                     //0x2A Read Thermal Table
1205   3                  /*
1206   3                              if(IS_MASK_CLEAR(nDiagInterface_DATA,FanNum)&&IS_MASK_CLEAR(nDiagInterface_DATA,FanType))
             - //Fan1 CPU
1207   3                              {
1208   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1209   3                                              *ThermalTalbe1CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn = nDiagInterface_DATA_High;
1210   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1211   3                                              *ThermalTalbe1CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff = nDiagInterface_DATA_High;
1212   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1213   3                                              *ThermalTalbe1CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM = nDiagInterface_DATA_High;
1214   3                              } 
1215   3                              else  if(IS_MASK_CLEAR(nDiagInterface_DATA,FanNum)&&IS_MASK_SET(nDiagInterface_DATA,FanType))  //Fan1 V
             -GA
1216   3                              {
1217   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1218   3                                              *ThermalTalbe1VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn = nDiagInterface_DATA_High;
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 21  

1219   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1220   3                                              *ThermalTalbe1VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff = nDiagInterface_DATA_High;
1221   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1222   3                                              *ThermalTalbe1VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM = nDiagInterface_DATA_High;
1223   3                            } 
1224   3                              else  if(IS_MASK_SET(nDiagInterface_DATA,FanNum)&&IS_MASK_CLEAR(nDiagInterface_DATA,FanType))  //Fan2 C
             -PU
1225   3                              {
1226   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1227   3                                              *ThermalTalbe2CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn = nDiagInterface_DATA_High;
1228   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1229   3                                              *ThermalTalbe2CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff = nDiagInterface_DATA_High;
1230   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1231   3                                              *ThermalTalbe2CPUDiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM = nDiagInterface_DATA_High;
1232   3                             }
1233   3                              else  if(IS_MASK_SET(nDiagInterface_DATA,FanNum)&&IS_MASK_SET(nDiagInterface_DATA,FanType))  //Fan2 VGA
1234   3                              {
1235   3                                      if(0x00 == (nDiagInterface_DATA&0x03))
1236   3                                              *ThermalTalbe2VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOn = nDiagInterface_DATA_High;
1237   3                                      else if(0x01 == (nDiagInterface_DATA&0x03))
1238   3                                              *ThermalTalbe2VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].FanOff = nDiagInterface_DATA_High;
1239   3                                      else if(0x02 == (nDiagInterface_DATA&0x03))
1240   3                                              *ThermalTalbe2VGADiag[(nDiagInterface_DATA&0x1C)>>0x02].RPM = nDiagInterface_DATA_High;
1241   3                             }
1242   3                              */
1243   3                      break;
1244   3              case DiagRecoverThermalTable:                                   //0x2B: real thermal table control
1245   3                  //InitThermalTable1();
1246   3                              //InitThermalTable2();
1247   3                      break;                                                           
1248   3                  case ClearAllDiagRam:                                 //0xFF Clear All Diag RAM
1249   3                          ClearDiagRam();                              
1250   3                  break;
1251   3                      default:
1252   3                              break;  
1253   3                      }
1254   2              }
1255   1              nDiagInterface_CMD = 0x00;
1256   1      }
1257          //ANGELAS064:add end
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 22  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0184 (BEGIN)
0000         L?0389:
0000         L?0390:
0000 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      E     MOV     DPTR,#SMB_ADDR_Diag
0008 E0                MOVX    A,@DPTR
0009 FB                MOV     R3,A
000A 900000      E     MOV     DPTR,#SMB_CMD_Diag
000D E0                MOVX    A,@DPTR
000E 900000      E     MOV     DPTR,#?_bRWSMBus?BYTE+03H
0011         L?0391:
0011 F0                MOVX    @DPTR,A
0012 7C00        E     MOV     R4,#HIGH SMB_DATA_Diag
0014 A3                INC     DPTR
0015 7400        E     MOV     A,#HIGH SMB_DATA_Diag
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 7400        E     MOV     A,#LOW SMB_DATA_Diag
001B F0                MOVX    @DPTR,A
001C 22                RET     
001D         L?0392:
001D F0                MOVX    @DPTR,A
001E         L?0393:
001E 900000      E     MOV     DPTR,#uVPCeventSource
0021 7420              MOV     A,#020H
0023 F0                MOVX    @DPTR,A
0024 E4                CLR     A
0025 900000      E     MOV     DPTR,#uVPCeventSource2
0028 F0                MOVX    @DPTR,A
0029 7F44              MOV     R7,#044H
002B 22                RET     
002C         L?0394:
002C 900000      E     MOV     DPTR,#MMIO_iDATA8C
002F E0                MOVX    A,@DPTR
0030 900000      R     MOV     DPTR,#i
0033 F0                MOVX    @DPTR,A
0034 900000      E     MOV     DPTR,#MMIO_iDATA8D
0037 E0                MOVX    A,@DPTR
0038 900000      E     MOV     DPTR,#eEEPROMAddrsss
003B F0                MOVX    @DPTR,A
003C 900000      E     MOV     DPTR,#MMIO_iDATA8E
003F E0                MOVX    A,@DPTR
0040 900000      E     MOV     DPTR,#eEEPROMBank
0043 F0                MOVX    @DPTR,A
0044 22                RET     
0045         L?0395:
0045         L?0396:
0045 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A 900000      E     MOV     DPTR,#SMB_ADDR_Diag
004D E0                MOVX    A,@DPTR
004E 22                RET     
004F         L?0398:
004F E0                MOVX    A,@DPTR
0050 54FE              ANL     A,#0FEH
0052         L?0399:
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 23  

0052 F0                MOVX    @DPTR,A
0053 900000      E     MOV     DPTR,#WLAN_OFF_Cnt
0056 7401              MOV     A,#01H
0058 F0                MOVX    @DPTR,A
0059 900000      E     MOV     DPTR,#pDevStus
005C 22                RET     
005D         L?0400:
005D         L?0401:
005D 900000      E     MOV     DPTR,#MMIO_iDATA8C
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 7FFE              MOV     R7,#0FEH
0064 22                RET     
0065         L?0403:
0065 900000      E     MOV     DPTR,#GPDRJ
0068 E0                MOVX    A,@DPTR
0069 4408              ORL     A,#08H
006B F0                MOVX    @DPTR,A
006C 900000      E     MOV     DPTR,#pDevStatus1
006F E0                MOVX    A,@DPTR
0070 547F              ANL     A,#07FH
0072 22                RET     
0073         L?0404:
0073 900000      E     MOV     DPTR,#nDiagInterface_ECRegH
0076 E0                MOVX    A,@DPTR
0077 FE                MOV     R6,A
0078         L?0405:
0078 900000      E     MOV     DPTR,#nDiagInterface_ECRegL
007B E0                MOVX    A,@DPTR
007C 2400              ADD     A,#00H
007E FF                MOV     R7,A
007F 22                RET     
0080         L?0406:
0080 900000      E     MOV     DPTR,#pDevStatus3
0083 E0                MOVX    A,@DPTR
0084 54DF              ANL     A,#0DFH
0086 F0                MOVX    @DPTR,A
0087 900000      E     MOV     DPTR,#pDevStatus1
008A E0                MOVX    A,@DPTR
008B 22                RET     
008C         L?0407:
008C E0                MOVX    A,@DPTR
008D 54F7              ANL     A,#0F7H
008F F0                MOVX    @DPTR,A
0090 900000      E     MOV     DPTR,#pDevStatus1
0093 E0                MOVX    A,@DPTR
0094 4480              ORL     A,#080H
0096 22                RET     
0097         L?0409:
0097         L?0410:
0097 E0                MOVX    A,@DPTR
0098 900000      E     MOV     DPTR,#nVPC_DATA
009B F0                MOVX    @DPTR,A
009C E4                CLR     A
009D 22                RET     
             ; FUNCTION Com0184 (END)

             ; FUNCTION _Hook_MailBox (BEGIN)
                                           ; SOURCE LINE # 19
;---- Variable 'Cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 20
                                           ; SOURCE LINE # 23
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 24  

0000 EF                MOV     A,R7
0001 120000      E     LCALL   ?C?CCASE
0004 0000        R     DW      ?C0002
0006 40                DB      040H
0007 0000        R     DW      ?C0003
0009 41                DB      041H
000A 0000        R     DW      ?C0008
000C 42                DB      042H
000D 0000        R     DW      ?C0009
000F 43                DB      043H
0010 0000        R     DW      ?C0010
0012 45                DB      045H
0013 0000        R     DW      ?C0011
0015 46                DB      046H
0016 0000        R     DW      ?C0012
0018 47                DB      047H
0019 0000        R     DW      ?C0014
001B 4B                DB      04BH
001C 0000        R     DW      ?C0015
001E 4C                DB      04CH
001F 0000        R     DW      ?C0016
0021 4D                DB      04DH
0022 0000        R     DW      ?C0017
0024 4E                DB      04EH
0025 0000        R     DW      ?C0018
0027 4F                DB      04FH
0028 0000        R     DW      ?C0019
002A 51                DB      051H
002B 0000        R     DW      ?C0020
002D 52                DB      052H
002E 0000        R     DW      ?C0029
0030 58                DB      058H
0031 0000        R     DW      ?C0030
0033 59                DB      059H
0034 0000        R     DW      ?C0031
0036 5C                DB      05CH
0037 0000        R     DW      ?C0032
0039 5D                DB      05DH
003A 0000        R     DW      ?C0036
003C 77                DB      077H
003D 0000        R     DW      ?C0033
003F 97                DB      097H
0040 0000        R     DW      ?C0034
0042 B0                DB      0B0H
0043 0000        R     DW      ?C0035
0045 B4                DB      0B4H
0046 0000              DW      00H
0048 0000        R     DW      ?C0039
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
004A         ?C0002:
                                           ; SOURCE LINE # 26
004A 900000      E     MOV     DPTR,#MMIO_iDATA8C
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 020000      E     LJMP    _Cmd_40
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 28
0052         ?C0003:
                                           ; SOURCE LINE # 29
0052 900000      E     MOV     DPTR,#MMIO_iDATA8C
0055 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 25  

0056 B4A005            CJNE    A,#0A0H,?C0004
0059 7FFE              MOV     R7,#0FEH
005B 120000      E     LCALL   _Cmd_41_A0
005E         ?C0004:
                                           ; SOURCE LINE # 30
005E 900000      E     MOV     DPTR,#MMIO_iDATA8C
0061 E0                MOVX    A,@DPTR
0062 B4A105            CJNE    A,#0A1H,?C0005
0065 7FFE              MOV     R7,#0FEH
0067 120000      E     LCALL   _Cmd_41_A1
006A         ?C0005:
                                           ; SOURCE LINE # 31
006A 900000      E     MOV     DPTR,#MMIO_iDATA8C
006D E0                MOVX    A,@DPTR
006E B4A205            CJNE    A,#0A2H,?C0006
0071 7FFE              MOV     R7,#0FEH
0073 120000      E     LCALL   _Cmd_41_A2
0076         ?C0006:
                                           ; SOURCE LINE # 32
0076 900000      E     MOV     DPTR,#MMIO_iDATA8C
0079 E0                MOVX    A,@DPTR
007A 64A3              XRL     A,#0A3H
007C 6003              JZ      $ + 5H
007E 020000      R     LJMP    ?C0039
0081 7FFE              MOV     R7,#0FEH
0083 020000      E     LJMP    _Cmd_41_A3
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0086         ?C0008:
                                           ; SOURCE LINE # 35
0086 900000      E     MOV     DPTR,#MMIO_iDATA8C
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 020000      E     LJMP    _Cmd_42
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
008E         ?C0009:
                                           ; SOURCE LINE # 38
008E 120000      R     LCALL   L?0400
0091 020000      E     LJMP    _Cmd_43
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0094         ?C0010:
                                           ; SOURCE LINE # 41
0094 120000      R     LCALL   L?0400
0097 020000      E     LJMP    _Cmd_45
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
009A         ?C0011:
                                           ; SOURCE LINE # 44
009A 120000      R     LCALL   L?0401
009D 020000      E     LJMP    _Cmd_46
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
00A0         ?C0012:
                                           ; SOURCE LINE # 47
00A0 120000      R     LCALL   L?0401
00A3 020000      E     LJMP    _Cmd_47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 26  

                                           ; SOURCE LINE # 52
00A6         ?C0014:
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
00A6 120000      R     LCALL   L?0394
                                           ; SOURCE LINE # 56
00A9 900000      E     MOV     DPTR,#MMIO_iDATA8F
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
00AC 8013              SJMP    ?C0322
                                           ; SOURCE LINE # 63
00AE         ?C0015:
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
00AE 120000      R     LCALL   L?0394
                                           ; SOURCE LINE # 67
00B1 900000      E     MOV     DPTR,#eEEPROMAddrsss
                                           ; SOURCE LINE # 68
00B4 8030              SJMP    ?C0323
                                           ; SOURCE LINE # 70
00B6         ?C0016:
                                           ; SOURCE LINE # 71
00B6 900000      E     MOV     DPTR,#MMIO_iDATA8C
00B9 E0                MOVX    A,@DPTR
00BA 900000      E     MOV     DPTR,#eEEPROMAddrsss
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
00BE 900000      E     MOV     DPTR,#MMIO_iDATA8D
00C1         ?C0322:
00C1 E0                MOVX    A,@DPTR
00C2 900000      E     MOV     DPTR,#eEEPROMData
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
00C6 900000      E     MOV     DPTR,#LENOVOPMFW_Temp
00C9 E0                MOVX    A,@DPTR
00CA 4410              ORL     A,#010H
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
00CD 120000      E     LCALL   Update_EEPROMMark
                                           ; SOURCE LINE # 75
00D0 900000      E     MOV     DPTR,#LENOVOPMFW_Temp
00D3 E0                MOVX    A,@DPTR
00D4 54EF              ANL     A,#0EFH
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
00D7 E4                CLR     A
00D8 FD                MOV     R5,A
00D9 7FFE              MOV     R7,#0FEH
00DB 020000      E     LJMP    _Data2PortDirect
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
00DE         ?C0017:
                                           ; SOURCE LINE # 79
00DE 900000      E     MOV     DPTR,#MMIO_iDATA8C
00E1 E0                MOVX    A,@DPTR
00E2 900000      E     MOV     DPTR,#eEEPROMAddrsss
00E5 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 27  

                                           ; SOURCE LINE # 80
00E6         ?C0323:
00E6 E0                MOVX    A,@DPTR
00E7 FD                MOV     R5,A
00E8 7FFE              MOV     R7,#0FEH
00EA 020000      E     LJMP    _Cmd_4E
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
00ED         ?C0018:
                                           ; SOURCE LINE # 83
00ED 020000      E     LJMP    Erase_EEPROMAll
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
00F0         ?C0019:
                                           ; SOURCE LINE # 86
00F0 7FFE              MOV     R7,#0FEH
00F2 020000      E     LJMP    _Cmd_51
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
00F5         ?C0020:
                                           ; SOURCE LINE # 89
00F5 900000      E     MOV     DPTR,#MMIO_iDATA8C
00F8 E0                MOVX    A,@DPTR
00F9 B4A005            CJNE    A,#0A0H,?C0021
00FC 7FFE              MOV     R7,#0FEH
00FE 120000      E     LCALL   _Cmd_52_A0
0101         ?C0021:
                                           ; SOURCE LINE # 90
0101 900000      E     MOV     DPTR,#MMIO_iDATA8C
0104 E0                MOVX    A,@DPTR
0105 B4A305            CJNE    A,#0A3H,?C0022
0108 7FFE              MOV     R7,#0FEH
010A 120000      E     LCALL   _Cmd_52_A3
010D         ?C0022:
                                           ; SOURCE LINE # 91
010D 900000      E     MOV     DPTR,#MMIO_iDATA8C
0110 E0                MOVX    A,@DPTR
0111 B4A405            CJNE    A,#0A4H,?C0023
0114 7FFE              MOV     R7,#0FEH
0116 120000      E     LCALL   _Cmd_52_A4
0119         ?C0023:
                                           ; SOURCE LINE # 92
0119 900000      E     MOV     DPTR,#MMIO_iDATA8C
011C E0                MOVX    A,@DPTR
011D B4A505            CJNE    A,#0A5H,?C0024
0120 7FFE              MOV     R7,#0FEH
0122 120000      E     LCALL   _Cmd_52_A5
0125         ?C0024:
                                           ; SOURCE LINE # 93
0125 900000      E     MOV     DPTR,#MMIO_iDATA8C
0128 E0                MOVX    A,@DPTR
0129 B4A605            CJNE    A,#0A6H,?C0025
012C 7FFE              MOV     R7,#0FEH
012E 120000      E     LCALL   _Cmd_52_A6
0131         ?C0025:
                                           ; SOURCE LINE # 94
0131 900000      E     MOV     DPTR,#MMIO_iDATA8C
0134 E0                MOVX    A,@DPTR
0135 64A7              XRL     A,#0A7H
0137 7046              JNZ     ?C0039
0139 7FFE              MOV     R7,#0FEH
013B 020000      E     LJMP    _Cmd_52_A7
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 28  

                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
013E         ?C0029:
                                           ; SOURCE LINE # 101
013E 900000      E     MOV     DPTR,#MMIO_iDATA8C
0141 E0                MOVX    A,@DPTR
0142 FF                MOV     R7,A
0143 020000      E     LJMP    _Cmd_58
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0146         ?C0030:
                                           ; SOURCE LINE # 104
0146 900000      E     MOV     DPTR,#MMIO_iDATA8C
0149 E0                MOVX    A,@DPTR
014A FD                MOV     R5,A
014B E4                CLR     A
014C FB                MOV     R3,A
014D 7FFE              MOV     R7,#0FEH
014F 020000      E     LJMP    _Cmd_59
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0152         ?C0031:
                                           ; SOURCE LINE # 107
0152 7FFE              MOV     R7,#0FEH
0154 020000      E     LJMP    _Cmd_5C
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0157         ?C0032:
                                           ; SOURCE LINE # 110
0157 900000      E     MOV     DPTR,#MMIO_iDATA8C
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C 020000      E     LJMP    _Cmd_5D
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
015F         ?C0033:
                                           ; SOURCE LINE # 113
015F 900000      E     MOV     DPTR,#MMIO_iDATA8C
0162 E0                MOVX    A,@DPTR
0163 FF                MOV     R7,A
0164 020000      E     LJMP    _Cmd_97
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0167         ?C0034:
                                           ; SOURCE LINE # 116
0167 120000      R     LCALL   L?0401
016A 020000      E     LJMP    _Cmd_B0
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
016D         ?C0035:
                                           ; SOURCE LINE # 119
016D 020000      E     LJMP    Cmd_B4
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0170         ?C0036:
                                           ; SOURCE LINE # 123
0170 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 124
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 29  

0173 E4                CLR     A
0174 FB                MOV     R3,A
0175 7D20              MOV     R5,#020H
0177 7F01              MOV     R7,#01H
0179 120000      E     LCALL   _Erase_Eflash_1K
                                           ; SOURCE LINE # 125
017C 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
017F         ?C0039:
017F 22                RET     
             ; FUNCTION _Hook_MailBox (END)

             ; FUNCTION H2RAMprocess (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0000 900000      E     MOV     DPTR,#MMIO_CMD_Ctrl
0003 E0                MOVX    A,@DPTR
0004 30E136            JNB     ACC.1,?C0041
0007         ?C0040:
                                           ; SOURCE LINE # 143
0007 900000      E     MOV     DPTR,#MMIO_iCMD
000A E0                MOVX    A,@DPTR
000B C3                CLR     C
000C 9440              SUBB    A,#040H
000E 402D              JC      ?C0041
0010 E0                MOVX    A,@DPTR
0011 D3                SETB    C
0012 9460              SUBB    A,#060H
0014 5027              JNC     ?C0041
0016         ?C0042:
                                           ; SOURCE LINE # 144
0016 900000      E     MOV     DPTR,#MMIO_rDATA
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 7E00              MOV     R6,#00H
001D 7D07              MOV     R5,#07H
001F 7C00              MOV     R4,#00H
0021 120000      E     LCALL   _Clear_RAM_Range
                                           ; SOURCE LINE # 147
0024 E4                CLR     A
0025 900000      E     MOV     DPTR,#MMIO_rDATA_index
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0029 900000      E     MOV     DPTR,#MMIO_iCMD
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 120000      R     LCALL   _Hook_MailBox
                                           ; SOURCE LINE # 150
0031 E4                CLR     A
0032 900000      E     MOV     DPTR,#MMIO_iCMD
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0036 900000      E     MOV     DPTR,#MMIO_CMD_Ctrl
0039 E0                MOVX    A,@DPTR
003A 54FD              ANL     A,#0FDH
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 30  

003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
003D         ?C0041:
003D 22                RET     
             ; FUNCTION H2RAMprocess (END)

             ; FUNCTION VPC_interface (BEGIN)
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0000 900000      E     MOV     DPTR,#nVPC_CMD
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0181
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
0009 E0                MOVX    A,@DPTR
000A 6438              XRL     A,#038H
000C 6005              JZ      ?C0045
                                           ; SOURCE LINE # 161
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      R     LCALL   _RamDebug
0013         ?C0045:
                                           ; SOURCE LINE # 162
0013 900000      E     MOV     DPTR,#uReserve07
0016 E0                MOVX    A,@DPTR
0017 4420              ORL     A,#020H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
001A 900000      E     MOV     DPTR,#nVPC_CMD
001D E0                MOVX    A,@DPTR
001E 120000      E     LCALL   ?C?CCASE
0021 0000        R     DW      ?C0047
0023 10                DB      010H
0024 0000        R     DW      ?C0048
0026 11                DB      011H
0027 0000        R     DW      ?C0051
0029 12                DB      012H
002A 0000        R     DW      ?C0052
002C 13                DB      013H
002D 0000        R     DW      ?C0053
002F 14                DB      014H
0030 0000        R     DW      ?C0058
0032 15                DB      015H
0033 0000        R     DW      ?C0064
0035 16                DB      016H
0036 0000        R     DW      ?C0069
0038 17                DB      017H
0039 0000        R     DW      ?C0074
003B 18                DB      018H
003C 0000        R     DW      ?C0079
003E 19                DB      019H
003F 0000        R     DW      ?C0080
0041 1A                DB      01AH
0042 0000        R     DW      ?C0081
0044 1B                DB      01BH
0045 0000        R     DW      ?C0084
0047 1C                DB      01CH
0048 0000        R     DW      ?C0087
004A 1D                DB      01DH
004B 0000        R     DW      ?C0090
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 31  

004D 1E                DB      01EH
004E 0000        R     DW      ?C0093
0050 1F                DB      01FH
0051 0000        R     DW      ?C0099
0053 21                DB      021H
0054 0000        R     DW      ?C0105
0056 22                DB      022H
0057 0000        R     DW      ?C0108
0059 23                DB      023H
005A 0000        R     DW      ?C0112
005C 25                DB      025H
005D 0000        R     DW      ?C0114
005F 28                DB      028H
0060 0000        R     DW      ?C0117
0062 29                DB      029H
0063 0000        R     DW      ?C0120
0065 2A                DB      02AH
0066 0000        R     DW      ?C0156
0068 2B                DB      02BH
0069 0000        R     DW      ?C0161
006B 2D                DB      02DH
006C 0000        R     DW      ?C0163
006E 2F                DB      02FH
006F 0000        R     DW      ?C0162
0071 31                DB      031H
0072 0000        R     DW      ?C0170
0074 33                DB      033H
0075 0000        R     DW      ?C0175
0077 38                DB      038H
0078 0000              DW      00H
007A 0000        R     DW      ?C0046
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
007C         ?C0047:
                                           ; SOURCE LINE # 167
007C 900000      E     MOV     DPTR,#uVPCeventSource
                                           ; SOURCE LINE # 168
007F 120000      R     LCALL   L?0409
0082 900000      E     MOV     DPTR,#uVPCeventSource
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0086 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 171
0089         ?C0048:
                                           ; SOURCE LINE # 173
0089 900000      E     MOV     DPTR,#SYS_STATUS
008C E0                MOVX    A,@DPTR
008D 5407              ANL     A,#07H
008F C3                CLR     C
0090 9404              SUBB    A,#04H
0092 4011              JC      ?C0049
0094 E0                MOVX    A,@DPTR
0095 5407              ANL     A,#07H
0097 D3                SETB    C
0098 9406              SUBB    A,#06H
009A 5009              JNC     ?C0049
                                           ; SOURCE LINE # 174
009C 900000      E     MOV     DPTR,#nVPC_DATA
009F 7415              MOV     A,#015H
00A1 F0                MOVX    @DPTR,A
00A2 020000      R     LJMP    ?C0046
00A5         ?C0049:
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 32  

                                           ; SOURCE LINE # 176
00A5 900000      E     MOV     DPTR,#nVPC_DATA
00A8 740A              MOV     A,#0AH
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
00AB 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 179
00AE         ?C0051:
                                           ; SOURCE LINE # 180
00AE 900000      E     MOV     DPTR,#nBrightValue
                                           ; SOURCE LINE # 181
00B1 020000      R     LJMP    ?C0324
                                           ; SOURCE LINE # 183
00B4         ?C0052:
                                           ; SOURCE LINE # 184
00B4 900000      E     MOV     DPTR,#nVPC_DATA
00B7 E0                MOVX    A,@DPTR
00B8 900000      E     MOV     DPTR,#nBrightValue
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
00BC 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 187
00BF         ?C0053:
                                           ; SOURCE LINE # 188
00BF 900000      E     MOV     DPTR,#DEVICEMODULE
00C2 E0                MOVX    A,@DPTR
00C3 30E412            JNB     ACC.4,?C0054
                                           ; SOURCE LINE # 189
00C6 E0                MOVX    A,@DPTR
00C7 30E004            JNB     ACC.0,?C0055
00CA 7F01              MOV     R7,#01H
00CC 8002              SJMP    ?C0056
00CE         ?C0055:
00CE 7F00              MOV     R7,#00H
00D0         ?C0056:
00D0 900000      E     MOV     DPTR,#nVPC_DATA
00D3 EF                MOV     A,R7
00D4 F0                MOVX    @DPTR,A
00D5 020000      R     LJMP    ?C0328
00D8         ?C0054:
                                           ; SOURCE LINE # 191
00D8 E4                CLR     A
00D9 900000      E     MOV     DPTR,#nVPC_DATA
00DC F0                MOVX    @DPTR,A
00DD         ?C0057:
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
00DD 020000      R     LJMP    ?C0328
                                           ; SOURCE LINE # 195
00E0         ?C0058:
                                           ; SOURCE LINE # 196
00E0 900000      E     MOV     DPTR,#DEVICEMODULE
00E3 E0                MOVX    A,@DPTR
00E4 20E403            JB      ACC.4,$ + 6H
00E7 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
00EA E0                MOVX    A,@DPTR
00EB 30E21E            JNB     ACC.2,?C0060
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
00EE 900000      E     MOV     DPTR,#nVPC_DATA
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 33  

00F1 E0                MOVX    A,@DPTR
00F2 900000      E     MOV     DPTR,#DEVICEMODULE
00F5 600C              JZ      ?C0061
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
00F7 E0                MOVX    A,@DPTR
00F8 4401              ORL     A,#01H
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
00FA 120000      R     LCALL   L?0399
00FD E0                MOVX    A,@DPTR
00FE 4402              ORL     A,#02H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0101 8007              SJMP    ?C0062
0103         ?C0061:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
0103 120000      R     LCALL   L?0398
0106 E0                MOVX    A,@DPTR
0107 54FD              ANL     A,#0FDH
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
010A         ?C0062:
                                           ; SOURCE LINE # 212
010A         ?C0325:
                                           ; SOURCE LINE # 213
010A 805A              SJMP    ?C0328
010C         ?C0060:
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
010C 900000      E     MOV     DPTR,#DEVICEMODULE
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
010F 120000      R     LCALL   L?0398
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0112 020000      R     LJMP    ?C0348
                                           ; SOURCE LINE # 223
0115         ?C0064:
                                           ; SOURCE LINE # 224
0115 900000      E     MOV     DPTR,#DEVICEMODULE
0118 E0                MOVX    A,@DPTR
0119 30E411            JNB     ACC.4,?C0065
                                           ; SOURCE LINE # 225
011C E0                MOVX    A,@DPTR
011D 30E104            JNB     ACC.1,?C0066
0120 7F01              MOV     R7,#01H
0122 8002              SJMP    ?C0067
0124         ?C0066:
0124 7F00              MOV     R7,#00H
0126         ?C0067:
0126 900000      E     MOV     DPTR,#nVPC_DATA
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
012B 8005              SJMP    ?C0068
012D         ?C0065:
                                           ; SOURCE LINE # 227
012D E4                CLR     A
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 34  

012E 900000      E     MOV     DPTR,#nVPC_DATA
0131 F0                MOVX    @DPTR,A
0132         ?C0068:
                                           ; SOURCE LINE # 228
0132         ?C0326:
                                           ; SOURCE LINE # 229
0132 8032              SJMP    ?C0328
                                           ; SOURCE LINE # 231
0134         ?C0069:
                                           ; SOURCE LINE # 232
0134 900000      E     MOV     DPTR,#DEVICEMODULE
0137 E0                MOVX    A,@DPTR
0138 20E403            JB      ACC.4,$ + 6H
013B 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
013E E0                MOVX    A,@DPTR
013F 20E303            JB      ACC.3,$ + 6H
0142 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0145 900000      E     MOV     DPTR,#nVPC_DATA
0148 E0                MOVX    A,@DPTR
0149 900000      E     MOV     DPTR,#DEVICEMODULE
014C 600D              JZ      ?C0072
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
014E E0                MOVX    A,@DPTR
014F 4402              ORL     A,#02H
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0152 900000      E     MOV     DPTR,#pDevStus
0155 E0                MOVX    A,@DPTR
0156 4404              ORL     A,#04H
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0159 800B              SJMP    ?C0073
015B         ?C0072:
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
015B E0                MOVX    A,@DPTR
015C 54FD              ANL     A,#0FDH
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
015F 900000      E     MOV     DPTR,#pDevStus
0162 E0                MOVX    A,@DPTR
0163 54FB              ANL     A,#0FBH
0165 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
0166         ?C0073:
                                           ; SOURCE LINE # 246
0166         ?C0328:
0166 7F42              MOV     R7,#042H
0168 120000      E     LCALL   _ECSMI_SCIEvent
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
016B 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 251
016E         ?C0074:
                                           ; SOURCE LINE # 252
016E 900000      E     MOV     DPTR,#GPDRJ
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 35  

0171 E0                MOVX    A,@DPTR
0172 30E503            JNB     ACC.5,?C0076
0175 D3                SETB    C
0176 8001              SJMP    ?C0077
0178         ?C0076:
0178 C3                CLR     C
0179         ?C0077:
0179 4024              JC      ?C0330
                                           ; SOURCE LINE # 253
017B 020000      R     LJMP    ?C0341
                                           ; SOURCE LINE # 258
017E         ?C0079:
                                           ; SOURCE LINE # 259
017E 900000      E     MOV     DPTR,#uNovoVPCCount
                                           ; SOURCE LINE # 260
0181 120000      R     LCALL   L?0409
0184 900000      E     MOV     DPTR,#uNovoVPCCount
0187 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
0188 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 263
018B         ?C0080:
                                           ; SOURCE LINE # 264
018B 900000      E     MOV     DPTR,#uVPCeventSource2
                                           ; SOURCE LINE # 265
018E 120000      R     LCALL   L?0410
0191 900000      E     MOV     DPTR,#uVPCeventSource2
0194 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0195 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 268
0198         ?C0081:
                                           ; SOURCE LINE # 270
0198 900000      E     MOV     DPTR,#pDevStatus1
019B E0                MOVX    A,@DPTR
019C 20E703            JB      ACC.7,?C0082
                                           ; SOURCE LINE # 271
019F         ?C0330:
019F 020000      R     LJMP    ?C0331
01A2         ?C0082:
                                           ; SOURCE LINE # 273
01A2         ?C0329:
                                           ; SOURCE LINE # 274
01A2 020000      R     LJMP    ?C0341
                                           ; SOURCE LINE # 276
01A5         ?C0084:
                                           ; SOURCE LINE # 280
01A5 900000      E     MOV     DPTR,#GPDRJ
01A8 E0                MOVX    A,@DPTR
01A9 30E306            JNB     ACC.3,?C0085
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
01AC 120000      R     LCALL   L?0407
01AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
01B0 8004              SJMP    ?C0086
01B2         ?C0085:
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
01B2 120000      R     LCALL   L?0403
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 36  

01B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
01B6         ?C0086:
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
01B6 120000      R     LCALL   L?0393
01B9 120000      E     LCALL   _ECQEvent
                                           ; SOURCE LINE # 404
01BC 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 406
01BF         ?C0087:
                                           ; SOURCE LINE # 407
01BF 900000      E     MOV     DPTR,#LENOVODEVICE
01C2 E0                MOVX    A,@DPTR
01C3 30E405            JNB     ACC.4,?C0088
01C6 7F01              MOV     R7,#01H
01C8 020000      R     LJMP    ?C0334
01CB         ?C0088:
01CB 7F00              MOV     R7,#00H
01CD         ?C0089:
                                           ; SOURCE LINE # 408
01CD 020000      R     LJMP    ?C0334
                                           ; SOURCE LINE # 410
01D0         ?C0090:
                                           ; SOURCE LINE # 411
01D0 900000      E     MOV     DPTR,#nVPC_DATA
01D3 E0                MOVX    A,@DPTR
01D4 900000      E     MOV     DPTR,#pDevStus
01D7 6007              JZ      ?C0091
                                           ; SOURCE LINE # 412
01D9 E0                MOVX    A,@DPTR
01DA 4410              ORL     A,#010H
01DC F0                MOVX    @DPTR,A
01DD 020000      R     LJMP    ?C0046
01E0         ?C0091:
                                           ; SOURCE LINE # 414
01E0 E0                MOVX    A,@DPTR
01E1 54EF              ANL     A,#0EFH
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
01E4 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 417
01E7         ?C0093:
                                           ; SOURCE LINE # 418
01E7 900000      E     MOV     DPTR,#DEVICEMODULE
01EA E0                MOVX    A,@DPTR
01EB 30E40C            JNB     ACC.4,?C0094
                                           ; SOURCE LINE # 419
01EE E0                MOVX    A,@DPTR
01EF 30E604            JNB     ACC.6,?C0095
01F2 7F01              MOV     R7,#01H
01F4 8002              SJMP    ?C0096
01F6         ?C0095:
01F6 7F00              MOV     R7,#00H
01F8         ?C0096:
01F8         ?C0333:
01F8 8073              SJMP    ?C0334
01FA         ?C0094:
                                           ; SOURCE LINE # 421
01FA         ?C0332:
                                           ; SOURCE LINE # 422
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 37  

01FA 020000      R     LJMP    ?C0341
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 437
01FD         ?C0099:
                                           ; SOURCE LINE # 438
01FD 900000      E     MOV     DPTR,#uODDPWRsaving
0200 E0                MOVX    A,@DPTR
0201 30E007            JNB     ACC.0,?C0100
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
0204 E0                MOVX    A,@DPTR
0205 54FE              ANL     A,#0FEH
0207 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0208 020000      R     LJMP    ?C0336
020B         ?C0100:
                                           ; SOURCE LINE # 443
020B 900000      E     MOV     DPTR,#uODDPWRsaving
020E E0                MOVX    A,@DPTR
020F 30E20A            JNB     ACC.2,?C0102
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0212 E0                MOVX    A,@DPTR
0213 54FB              ANL     A,#0FBH
0215 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
0216 900000      E     MOV     DPTR,#nVPC_DATA
                                           ; SOURCE LINE # 447
0219 020000      R     LJMP    ?C0337
021C         ?C0102:
                                           ; SOURCE LINE # 448
021C 900000      E     MOV     DPTR,#uODDPWRsaving
021F E0                MOVX    A,@DPTR
0220 20E603            JB      ACC.6,$ + 6H
0223 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
0226 E0                MOVX    A,@DPTR
0227 54BF              ANL     A,#0BFH
0229 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
022A 020000      R     LJMP    ?C0338
                                           ; SOURCE LINE # 455
022D         ?C0105:
                                           ; SOURCE LINE # 457
022D 900000      E     MOV     DPTR,#nVPC_DATA
0230 E0                MOVX    A,@DPTR
0231 600C              JZ      ?C0106
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 460
0233 900000      E     MOV     DPTR,#SMartNoise
0236 E0                MOVX    A,@DPTR
0237 4420              ORL     A,#020H
0239 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
023A 900000      E     MOV     DPTR,#THERMAL_STATUS
                                           ; SOURCE LINE # 462
023D 8048              SJMP    ?C0339
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 38  

023F         ?C0106:
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 467
023F E4                CLR     A
0240 900000      E     MOV     DPTR,#StartFanClean
0243 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
0244 900000      E     MOV     DPTR,#THERMAL_STATUS
0247 E0                MOVX    A,@DPTR
0248 54F7              ANL     A,#0F7H
024A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
024B 900000      E     MOV     DPTR,#CTR2
024E E0                MOVX    A,@DPTR
024F FD                MOV     R5,A
0250 7F1D              MOV     R7,#01DH
0252 120000      E     LCALL   _Cal_PWM_Duty
0255 900000      E     MOV     DPTR,#DCR5
0258 EF                MOV     A,R7
0259 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
025A 900000      E     MOV     DPTR,#SMartNoise
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 474
025D 020000      R     LJMP    ?C0340
                                           ; SOURCE LINE # 476
0260         ?C0108:
                                           ; SOURCE LINE # 477
0260 900000      E     MOV     DPTR,#DEVICEMODULE
0263 E0                MOVX    A,@DPTR
0264 30E404            JNB     ACC.4,?C0109
0267 7F01              MOV     R7,#01H
0269 8002              SJMP    ?C0110
026B         ?C0109:
026B 7F00              MOV     R7,#00H
026D         ?C0110:
026D         ?C0334:
026D 900000      E     MOV     DPTR,#nVPC_DATA
0270 EF                MOV     A,R7
0271 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
0272 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 483
0275         ?C0112:
                                           ; SOURCE LINE # 484
0275         ?C0335:
                                           ; SOURCE LINE # 485
0275 8028              SJMP    ?C0341
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 490
0277         ?C0114:
                                           ; SOURCE LINE # 491
0277 900000      E     MOV     DPTR,#nVPC_DATA
027A E0                MOVX    A,@DPTR
027B 900000      E     MOV     DPTR,#uVGATurboFun
027E 600E              JZ      ?C0115
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 494
0280 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 39  

0281 4401              ORL     A,#01H
0283 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0284 900000      E     MOV     DPTR,#EM7FUNCTION
0287         ?C0339:
0287 E0                MOVX    A,@DPTR
0288 4408              ORL     A,#08H
028A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
028B 020000      R     LJMP    ?C0046
028E         ?C0115:
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 500
028E E0                MOVX    A,@DPTR
028F 54FE              ANL     A,#0FEH
0291 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
0292 900000      E     MOV     DPTR,#EM7FUNCTION
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
0295 020000      R     LJMP    ?C0342
                                           ; SOURCE LINE # 505
0298         ?C0117:
                                           ; SOURCE LINE # 506
0298 900000      E     MOV     DPTR,#SWITCHABLE
029B E0                MOVX    A,@DPTR
029C 30E304            JNB     ACC.3,?C0118
                                           ; SOURCE LINE # 507
029F         ?C0341:
029F E4                CLR     A
02A0 020000      R     LJMP    ?C0343
02A3         ?C0118:
                                           ; SOURCE LINE # 509
02A3         ?C0331:
02A3         ?C0336:
02A3 900000      E     MOV     DPTR,#nVPC_DATA
                                           ; SOURCE LINE # 510
02A6 802E              SJMP    ?C0344
                                           ; SOURCE LINE # 511
02A8         ?C0120:
                                           ; SOURCE LINE # 512
02A8 900000      E     MOV     DPTR,#nVPC_DATA
02AB E0                MOVX    A,@DPTR
02AC FF                MOV     R7,A
02AD 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 513
02B0 900000      E     MOV     DPTR,#nVPC_DATA
02B3 E0                MOVX    A,@DPTR
02B4 120000      E     LCALL   ?C?CCASE
02B7 0000        R     DW      ?C0122
02B9 01                DB      01H
02BA 0000        R     DW      ?C0123
02BC 02                DB      02H
02BD 0000        R     DW      ?C0124
02BF 03                DB      03H
02C0 0000        R     DW      ?C0125
02C2 04                DB      04H
02C3 0000        R     DW      ?C0126
02C5 08                DB      08H
02C6 0000        R     DW      ?C0139
02C8 09                DB      09H
02C9 0000        R     DW      ?C0153
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 40  

02CB 0A                DB      0AH
02CC 0000        R     DW      ?C0154
02CE 0B                DB      0BH
02CF 0000              DW      00H
02D1 0000        R     DW      ?C0046
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
02D3         ?C0122:
                                           ; SOURCE LINE # 516
02D3 900000      E     MOV     DPTR,#YogaModeStatus
02D6         ?C0344:
02D6 7401              MOV     A,#01H
02D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
02D9 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 518
02DC         ?C0123:
                                           ; SOURCE LINE # 519
02DC 900000      E     MOV     DPTR,#YogaModeStatus
02DF         ?C0337:
02DF 7402              MOV     A,#02H
02E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
02E2 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 521
02E5         ?C0124:
                                           ; SOURCE LINE # 522
02E5 900000      E     MOV     DPTR,#YogaModeStatus
                                           ; SOURCE LINE # 523
02E8 020000      R     LJMP    ?C0345
                                           ; SOURCE LINE # 524
02EB         ?C0125:
                                           ; SOURCE LINE # 525
02EB 900000      E     MOV     DPTR,#YogaModeStatus
02EE         ?C0340:
02EE 7404              MOV     A,#04H
02F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
02F1 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 527
02F4         ?C0126:
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
02F4 120000      R     LCALL   L?0406
02F7 4440              ORL     A,#040H
02F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
02FA E0                MOVX    A,@DPTR
02FB 4410              ORL     A,#010H
02FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
02FE E0                MOVX    A,@DPTR
02FF 4404              ORL     A,#04H
0301 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
0302 E0                MOVX    A,@DPTR
0303 20E304            JB      ACC.3,?C0127
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0306 E0                MOVX    A,@DPTR
0307 4408              ORL     A,#08H
0309 F0                MOVX    @DPTR,A
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 41  

                                           ; SOURCE LINE # 540
030A         ?C0127:
                                           ; SOURCE LINE # 542
030A 900000      E     MOV     DPTR,#pDevStatus1
030D E0                MOVX    A,@DPTR
030E 30E51D            JNB     ACC.5,?C0128
0311 E0                MOVX    A,@DPTR
0312 20E719            JB      ACC.7,?C0128
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
0315 7F3F              MOV     R7,#03FH
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
0317 120000      R     LCALL   L?0402
031A 30E706            JNB     ACC.7,?C0129
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
031D E0                MOVX    A,@DPTR
031E 4480              ORL     A,#080H
0320 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
0321 8004              SJMP    ?C0130
0323         ?C0129:
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
0323 E0                MOVX    A,@DPTR
0324 547F              ANL     A,#07FH
0326 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0327         ?C0130:
                                           ; SOURCE LINE # 555
0327 900000      E     MOV     DPTR,#pDevStatus1
032A E0                MOVX    A,@DPTR
032B 4404              ORL     A,#04H
032D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
032E         ?C0128:
                                           ; SOURCE LINE # 558
032E 900000      E     MOV     DPTR,#SYS_MISC1
0331 E0                MOVX    A,@DPTR
0332 30E710            JNB     ACC.7,?C0131
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
0335 900000      E     MOV     DPTR,#GPDRJ
0338 E0                MOVX    A,@DPTR
0339 30E309            JNB     ACC.3,?C0131
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
033C 120000      R     LCALL   L?0407
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
033F 120000      R     LCALL   L?0392
0342 120000      E     LCALL   _ECQEvent
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0345         ?C0131:
                                           ; SOURCE LINE # 571
0345 900000      E     MOV     DPTR,#pDevStatus1
0348 E0                MOVX    A,@DPTR
0349 4404              ORL     A,#04H
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 42  

034B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
034C 900000      E     MOV     DPTR,#EM9_NEWFUN
034F E0                MOVX    A,@DPTR
0350 30E708            JNB     ACC.7,?C0133
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0353 7F12              MOV     R7,#012H
                                           ; SOURCE LINE # 576
0355 120000      R     LCALL   L?0397
0358 547F              ANL     A,#07FH
035A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 577
035B         ?C0133:
                                           ; SOURCE LINE # 578
035B 900000      E     MOV     DPTR,#EM9_NEWFUN
035E E0                MOVX    A,@DPTR
035F 30E608            JNB     ACC.6,?C0134
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
0362 7F59              MOV     R7,#059H
                                           ; SOURCE LINE # 581
0364 120000      R     LCALL   L?0397
0367 54BF              ANL     A,#0BFH
0369 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
036A         ?C0134:
                                           ; SOURCE LINE # 583
036A 900000      E     MOV     DPTR,#EM9_NEWFUN
036D E0                MOVX    A,@DPTR
036E 30E508            JNB     ACC.5,?C0135
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
0371 7F11              MOV     R7,#011H
                                           ; SOURCE LINE # 586
0373 120000      R     LCALL   L?0411
0376 54DF              ANL     A,#0DFH
0378 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
0379         ?C0135:
                                           ; SOURCE LINE # 588
0379 900000      E     MOV     DPTR,#EM9_NEWFUN
037C E0                MOVX    A,@DPTR
037D 30E40E            JNB     ACC.4,?C0136
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
0380 7D01              MOV     R5,#01H
0382 7F11              MOV     R7,#011H
0384 120000      E     LCALL   _e0_prefix_code
                                           ; SOURCE LINE # 591
0387 900000      E     MOV     DPTR,#EM9_NEWFUN
038A E0                MOVX    A,@DPTR
038B 54EF              ANL     A,#0EFH
038D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
038E         ?C0136:
                                           ; SOURCE LINE # 593
038E 900000      E     MOV     DPTR,#EM9_NEWFUN
0391 E0                MOVX    A,@DPTR
0392 30E308            JNB     ACC.3,?C0137
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 43  

0395 7F14              MOV     R7,#014H
                                           ; SOURCE LINE # 596
0397 120000      R     LCALL   L?0411
039A 54F7              ANL     A,#0F7H
039C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
039D         ?C0137:
                                           ; SOURCE LINE # 598
039D 900000      E     MOV     DPTR,#EM9_NEWFUN
03A0 E0                MOVX    A,@DPTR
03A1 20E203            JB      ACC.2,$ + 6H
03A4 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
03A7 7D01              MOV     R5,#01H
03A9 7F14              MOV     R7,#014H
03AB 120000      E     LCALL   _e0_prefix_code
                                           ; SOURCE LINE # 601
03AE 900000      E     MOV     DPTR,#EM9_NEWFUN
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
03B1 020000      R     LJMP    ?C0346
                                           ; SOURCE LINE # 604
03B4         ?C0139:
                                           ; SOURCE LINE # 608
03B4 900000      E     MOV     DPTR,#pDevStatus1
03B7 E0                MOVX    A,@DPTR
03B8 54BF              ANL     A,#0BFH
03BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
03BB 900000      E     MOV     DPTR,#pDevStatus2
03BE E0                MOVX    A,@DPTR
03BF 20E110            JB      ACC.1,?C0140
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
03C2 900000      E     MOV     DPTR,#GPDRF
03C5 E0                MOVX    A,@DPTR
03C6 30E403            JNB     ACC.4,?C0142
03C9 D3                SETB    C
03CA 8001              SJMP    ?C0143
03CC         ?C0142:
03CC C3                CLR     C
03CD         ?C0143:
03CD 4003              JC      $ + 5H
03CF 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
03D2         ?C0140:
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 618
03D2 120000      R     LCALL   L?0406
03D5 4410              ORL     A,#010H
03D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
03D8 E0                MOVX    A,@DPTR
03D9 54FB              ANL     A,#0FBH
03DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
03DC E0                MOVX    A,@DPTR
03DD 20E304            JB      ACC.3,?C0144
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 44  

03E0 E0                MOVX    A,@DPTR
03E1 4408              ORL     A,#08H
03E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
03E4         ?C0144:
                                           ; SOURCE LINE # 625
03E4 900000      E     MOV     DPTR,#pDevStatus1
03E7 E0                MOVX    A,@DPTR
03E8 30E519            JNB     ACC.5,?C0145
03EB E0                MOVX    A,@DPTR
03EC 30E715            JNB     ACC.7,?C0145
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 627
03EF 7F3E              MOV     R7,#03EH
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
03F1 120000      R     LCALL   L?0402
03F4 30E706            JNB     ACC.7,?C0146
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
03F7 E0                MOVX    A,@DPTR
03F8 4480              ORL     A,#080H
03FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
03FB 8004              SJMP    ?C0147
03FD         ?C0146:
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
03FD E0                MOVX    A,@DPTR
03FE 547F              ANL     A,#07FH
0400 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
0401         ?C0147:
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
0401 120000      R     LCALL   L?0408
                                           ; SOURCE LINE # 642
0404         ?C0145:
                                           ; SOURCE LINE # 643
0404 900000      E     MOV     DPTR,#SYS_MISC1
0407 E0                MOVX    A,@DPTR
0408 30E71D            JNB     ACC.7,?C0148
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
040B 900000      E     MOV     DPTR,#GPDRJ
040E E0                MOVX    A,@DPTR
040F 30E303            JNB     ACC.3,?C0150
0412 D3                SETB    C
0413 8001              SJMP    ?C0151
0415         ?C0150:
0415 C3                CLR     C
0416         ?C0151:
0416 4010              JC      ?C0148
                                           ; SOURCE LINE # 646
                                           ; SOURCE LINE # 647
0418 900000      E     MOV     DPTR,#GPDRF
041B E0                MOVX    A,@DPTR
041C 30E409            JNB     ACC.4,?C0148
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
                                           ; SOURCE LINE # 650
041F 120000      R     LCALL   L?0403
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 45  

                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0422 120000      R     LCALL   L?0392
0425 120000      E     LCALL   _ECQEvent
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0428         ?C0148:
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
0428 120000      R     LCALL   L?0408
                                           ; SOURCE LINE # 662
042B 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 664
042E         ?C0153:
                                           ; SOURCE LINE # 665
042E 900000      E     MOV     DPTR,#pDevStatus2
                                           ; SOURCE LINE # 666
0431 020000      R     LJMP    ?C0347
                                           ; SOURCE LINE # 667
0434         ?C0154:
                                           ; SOURCE LINE # 668
0434 900000      E     MOV     DPTR,#pDevStatus2
0437         ?C0327:
                                           ; SOURCE LINE # 669
0437 020000      R     LJMP    ?C0348
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 676
043A         ?C0156:
                                           ; SOURCE LINE # 678
043A 900000      E     MOV     DPTR,#SMartNoise
043D E0                MOVX    A,@DPTR
043E 30E109            JNB     ACC.1,?C0157
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 681
0441         ?C0338:
0441 900000      E     MOV     DPTR,#nVPC_DATA
0444         ?C0345:
0444 7403              MOV     A,#03H
0446 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0447 020000      R     LJMP    ?C0046
044A         ?C0157:
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
044A 900000      E     MOV     DPTR,#SMartNoise
044D E0                MOVX    A,@DPTR
044E 900000      E     MOV     DPTR,#nVPC_DATA
0451 20E206            JB      ACC.2,?C0159
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 688
0454 7405              MOV     A,#05H
0456 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
0457 020000      R     LJMP    ?C0046
045A         ?C0159:
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 46  

045A 7485              MOV     A,#085H
045C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 700
045D 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 702
0460         ?C0161:
                                           ; SOURCE LINE # 703
0460 900000      E     MOV     DPTR,#EM7FUNCTION
0463         ?C0324:
0463 E0                MOVX    A,@DPTR
0464         ?C0343:
0464 900000      E     MOV     DPTR,#nVPC_DATA
0467 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
0468 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 706
046B         ?C0162:
                                           ; SOURCE LINE # 709
046B 900000      E     MOV     DPTR,#nVPC_DATA
046E 7440              MOV     A,#040H
0470 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
0471 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 712
0474         ?C0163:
                                           ; SOURCE LINE # 718
0474 900000      E     MOV     DPTR,#LENOVOPMFW
0477 E0                MOVX    A,@DPTR
0478 20E207            JB      ACC.2,?C0165
047B 900000      E     MOV     DPTR,#LENOVOPMFW_Temp
047E E0                MOVX    A,@DPTR
047F 30E118            JNB     ACC.1,?C0164
0482         ?C0165:
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
0482 900000      E     MOV     DPTR,#LENOVOPMFW
0485 E0                MOVX    A,@DPTR
0486 54FB              ANL     A,#0FBH
0488 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
0489 E0                MOVX    A,@DPTR
048A 54FE              ANL     A,#0FEH
048C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 722
048D 900000      E     MOV     DPTR,#LENOVOPMFW_Temp
0490 E0                MOVX    A,@DPTR
0491 54FD              ANL     A,#0FDH
0493 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
0494 900000      E     MOV     DPTR,#nVPC_DATA
0497 7404              MOV     A,#04H
0499 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
049A         ?C0164:
                                           ; SOURCE LINE # 725
049A 900000      E     MOV     DPTR,#EM9_NEWFUN
049D E0                MOVX    A,@DPTR
049E 30E00D            JNB     ACC.0,?C0166
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 47  

04A1 E0                MOVX    A,@DPTR
04A2 54FE              ANL     A,#0FEH
04A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
04A5 900000      E     MOV     DPTR,#nVPC_DATA
04A8 7410              MOV     A,#010H
04AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
04AB 020000      R     LJMP    ?C0046
04AE         ?C0166:
                                           ; SOURCE LINE # 730
04AE 900000      E     MOV     DPTR,#EM9_NEWFUN
04B1 E0                MOVX    A,@DPTR
04B2 20E103            JB      ACC.1,$ + 6H
04B5 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
04B8 E0                MOVX    A,@DPTR
04B9 54FD              ANL     A,#0FDH
04BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
04BC 900000      E     MOV     DPTR,#nVPC_DATA
04BF 7420              MOV     A,#020H
04C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 749
04C2 8072              SJMP    ?C0046
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 754
04C4         ?C0170:
                                           ; SOURCE LINE # 755
04C4 900000      E     MOV     DPTR,#GPDRG
04C7 E0                MOVX    A,@DPTR
04C8 30E016            JNB     ACC.0,?C0171
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
04CB 900000      E     MOV     DPTR,#nVPC_DATA
04CE E0                MOVX    A,@DPTR
04CF 7065              JNZ     ?C0046
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 760
04D1 900000      E     MOV     DPTR,#cCmd
04D4 E0                MOVX    A,@DPTR
04D5 4408              ORL     A,#08H
04D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 761
04D8 900000      E     MOV     DPTR,#OEMControl
04DB         ?C0347:
04DB E0                MOVX    A,@DPTR
04DC 4402              ORL     A,#02H
04DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
04DF 8055              SJMP    ?C0046
04E1         ?C0171:
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
04E1 900000      E     MOV     DPTR,#nVPC_DATA
04E4 E0                MOVX    A,@DPTR
04E5 6401              XRL     A,#01H
04E7 704D              JNZ     ?C0046
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 48  

                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 769
04E9 900000      E     MOV     DPTR,#cCmd
04EC E0                MOVX    A,@DPTR
04ED 54F7              ANL     A,#0F7H
04EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
04F0 900000      E     MOV     DPTR,#OEMControl
04F3         ?C0348:
04F3 E0                MOVX    A,@DPTR
04F4 54FD              ANL     A,#0FDH
04F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
04F7 803D              SJMP    ?C0046
                                           ; SOURCE LINE # 776
04F9         ?C0175:
                                           ; SOURCE LINE # 777
04F9 E4                CLR     A
04FA 900000      E     MOV     DPTR,#nVPC_DATA
04FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 778
04FE 900000      E     MOV     DPTR,#SYS_STATUS
0501 E0                MOVX    A,@DPTR
0502 900000      E     MOV     DPTR,#nVPC_DATA
0505 30E70A            JNB     ACC.7,?C0176
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
0508 E0                MOVX    A,@DPTR
0509 4401              ORL     A,#01H
050B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
050C E0                MOVX    A,@DPTR
050D 54FD              ANL     A,#0FDH
050F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
0510 8008              SJMP    ?C0177
0512         ?C0176:
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
0512 E0                MOVX    A,@DPTR
0513 4402              ORL     A,#02H
0515 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
0516 E0                MOVX    A,@DPTR
0517 54FE              ANL     A,#0FEH
0519 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 787
051A         ?C0177:
                                           ; SOURCE LINE # 788
051A 900000      E     MOV     DPTR,#SEL_STATE0
051D E0                MOVX    A,@DPTR
051E 900000      E     MOV     DPTR,#nVPC_DATA
0521 30E00A            JNB     ACC.0,?C0178
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
0524 E0                MOVX    A,@DPTR
0525 4404              ORL     A,#04H
0527 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0528         ?C0342:
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 49  

0528 E0                MOVX    A,@DPTR
0529 54F7              ANL     A,#0F7H
052B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 792
052C 8008              SJMP    ?C0046
052E         ?C0178:
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
052E E0                MOVX    A,@DPTR
052F 4408              ORL     A,#08H
0531 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 796
0532         ?C0346:
0532 E0                MOVX    A,@DPTR
0533 54FB              ANL     A,#0FBH
0535 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
0536         ?C0046:
                                           ; SOURCE LINE # 806
0536 E4                CLR     A
0537 900000      E     MOV     DPTR,#nVPC_CMD
053A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 808
053B         ?C0181:
053B 22                RET     
053C         L?0397:
053C 7D01              MOV     R5,#01H
053E 120000      E     LCALL   _simple_code
0541 900000      E     MOV     DPTR,#EM9_NEWFUN
0544 E0                MOVX    A,@DPTR
0545 22                RET     
0546         L?0402:
0546 120000      E     LCALL   _ECQEvent
0549 900000      E     MOV     DPTR,#pDevStatus3
054C E0                MOVX    A,@DPTR
054D 4440              ORL     A,#040H
054F F0                MOVX    @DPTR,A
0550 900000      E     MOV     DPTR,#pDevStatus1
0553 E0                MOVX    A,@DPTR
0554 900000      E     MOV     DPTR,#pDevStatus3
0557 22                RET     
0558         L?0408:
0558 900000      E     MOV     DPTR,#pDevStatus1
055B E0                MOVX    A,@DPTR
055C 54FB              ANL     A,#0FBH
055E F0                MOVX    @DPTR,A
055F 120000      E     LCALL   Enable_Any_Key_Irq
0562 22                RET     
0563         L?0411:
0563 7D01              MOV     R5,#01H
0565 120000      E     LCALL   _simple_code
0568 900000      E     MOV     DPTR,#EM9_NEWFUN
056B E0                MOVX    A,@DPTR
056C 22                RET     
             ; FUNCTION VPC_interface (END)

             ; FUNCTION TPInfor_ToVPC (BEGIN)
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 50  

                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
0000 900000      E     MOV     DPTR,#SysPowState
0003 E0                MOVX    A,@DPTR
0004 6410              XRL     A,#010H
0006 703B              JNZ     ?C0190
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
0008 900000      E     MOV     DPTR,#pDevStatus3
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 30E633            JNB     ACC.6,?C0190
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
0010 900000      E     MOV     DPTR,#pDevStatus1
0013 E0                MOVX    A,@DPTR
0014 30E704            JNB     ACC.7,?C0185
0017 7E01              MOV     R6,#01H
0019 8002              SJMP    ?C0186
001B         ?C0185:
001B 7E00              MOV     R6,#00H
001D         ?C0186:
001D EF                MOV     A,R7
001E 30E704            JNB     ACC.7,?C0187
0021 7F01              MOV     R7,#01H
0023 8002              SJMP    ?C0188
0025         ?C0187:
0025 7F00              MOV     R7,#00H
0027         ?C0188:
0027 EF                MOV     A,R7
0028 6E                XRL     A,R6
0029 6018              JZ      ?C0190
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
002B 900000      E     MOV     DPTR,#pDevStatus3
002E E0                MOVX    A,@DPTR
002F 54BF              ANL     A,#0BFH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
0032 900000      E     MOV     DPTR,#uReserve07
0035 E0                MOVX    A,@DPTR
0036 C4                SWAP    A
0037 13                RRC     A
0038 5407              ANL     A,#07H
003A 30E006            JNB     ACC.0,?C0190
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
                                           ; SOURCE LINE # 824
003D 120000      R     LCALL   L?0393
0040 120000      E     LCALL   _ECQEvent
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
0043         ?C0190:
0043 22                RET     
             ; FUNCTION TPInfor_ToVPC (END)

             ; FUNCTION ThermalMailBox (BEGIN)
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 51  

                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 834
0000 900000      E     MOV     DPTR,#EXT_NAMESPACE_BANK
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0233
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 837
000E 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 838
0016 900000      E     MOV     DPTR,#EXT_NAMESPACE_BANK
0019 E0                MOVX    A,@DPTR
001A 247C              ADD     A,#07CH
001C 7003              JNZ     $ + 5H
001E 020000      R     LJMP    ?C0225
0021 2403              ADD     A,#03H
0023 6003              JZ      $ + 5H
0025 020000      R     LJMP    ?C0192
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
0028         ?C0193:
                                           ; SOURCE LINE # 841
0028 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
002B E0                MOVX    A,@DPTR
002C B4020A            CJNE    A,#02H,?C0194
                                           ; SOURCE LINE # 842
002F 900000      E     MOV     DPTR,#DCR5
0032 E0                MOVX    A,@DPTR
0033 C3                CLR     C
0034 13                RRC     A
0035 900000      E     MOV     DPTR,#EXT_NAMESPACE_DATA
0038 F0                MOVX    @DPTR,A
0039         ?C0194:
                                           ; SOURCE LINE # 843
0039 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
003C E0                MOVX    A,@DPTR
003D B40406            CJNE    A,#04H,?C0195
                                           ; SOURCE LINE # 844
0040 900000      E     MOV     DPTR,#nAtmFanSpeed
0043 020000      R     LJMP    ?C0363
0046         ?C0195:
                                           ; SOURCE LINE # 845
0046 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0049 E0                MOVX    A,@DPTR
004A B40706            CJNE    A,#07H,?C0197
                                           ; SOURCE LINE # 846
004D 900000      E     MOV     DPTR,#FAN_Tab_OFF
0050         ?C0349:
0050 020000      R     LJMP    ?C0363
0053         ?C0197:
                                           ; SOURCE LINE # 847
0053 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0056 E0                MOVX    A,@DPTR
0057 B40806            CJNE    A,#08H,?C0199
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 52  

                                           ; SOURCE LINE # 848
005A 900000      E     MOV     DPTR,#FAN_Tab_LOW
005D         ?C0350:
005D 020000      R     LJMP    ?C0363
0060         ?C0199:
                                           ; SOURCE LINE # 849
0060 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0063 E0                MOVX    A,@DPTR
0064 B40906            CJNE    A,#09H,?C0201
                                           ; SOURCE LINE # 850
0067 900000      E     MOV     DPTR,#FAN_Tab_HI
006A         ?C0351:
006A 020000      R     LJMP    ?C0363
006D         ?C0201:
                                           ; SOURCE LINE # 851
006D 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0070 E0                MOVX    A,@DPTR
0071 B40A06            CJNE    A,#0AH,?C0203
                                           ; SOURCE LINE # 852
0074 900000      E     MOV     DPTR,#THR_Turo_Rem
0077         ?C0352:
0077 020000      R     LJMP    ?C0363
007A         ?C0203:
                                           ; SOURCE LINE # 853
007A 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
007D E0                MOVX    A,@DPTR
007E B40B06            CJNE    A,#0BH,?C0205
                                           ; SOURCE LINE # 854
0081 900000      E     MOV     DPTR,#THR_PRO_OFF
0084         ?C0353:
0084 020000      R     LJMP    ?C0363
0087         ?C0205:
                                           ; SOURCE LINE # 855
0087 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
008A E0                MOVX    A,@DPTR
008B B40C05            CJNE    A,#0CH,?C0207
                                           ; SOURCE LINE # 856
008E 900000      E     MOV     DPTR,#THR_Turo_OFF
0091         ?C0354:
0091 8073              SJMP    ?C0363
0093         ?C0207:
                                           ; SOURCE LINE # 857
0093 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0096 E0                MOVX    A,@DPTR
0097 B40D05            CJNE    A,#0DH,?C0209
                                           ; SOURCE LINE # 858
009A 900000      E     MOV     DPTR,#THR_PRO_ON
009D         ?C0355:
009D 8067              SJMP    ?C0363
009F         ?C0209:
                                           ; SOURCE LINE # 859
009F 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00A2 E0                MOVX    A,@DPTR
00A3 B40E05            CJNE    A,#0EH,?C0211
                                           ; SOURCE LINE # 860
00A6 900000      E     MOV     DPTR,#VFAN_Tab_OFF
00A9         ?C0356:
00A9 805B              SJMP    ?C0363
00AB         ?C0211:
                                           ; SOURCE LINE # 861
00AB 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00AE E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 53  

00AF B40F05            CJNE    A,#0FH,?C0213
                                           ; SOURCE LINE # 862
00B2 900000      E     MOV     DPTR,#VFAN_Tab_LOW
00B5         ?C0357:
00B5 804F              SJMP    ?C0363
00B7         ?C0213:
                                           ; SOURCE LINE # 863
00B7 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00BA E0                MOVX    A,@DPTR
00BB B41005            CJNE    A,#010H,?C0215
                                           ; SOURCE LINE # 864
00BE 900000      E     MOV     DPTR,#VFAN_Tab_HI
00C1         ?C0358:
00C1 8043              SJMP    ?C0363
00C3         ?C0215:
                                           ; SOURCE LINE # 865
00C3 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00C6 E0                MOVX    A,@DPTR
00C7 B41105            CJNE    A,#011H,?C0217
                                           ; SOURCE LINE # 866
00CA 900000      E     MOV     DPTR,#VTHR_Turo_Rem
00CD         ?C0359:
00CD 8037              SJMP    ?C0363
00CF         ?C0217:
                                           ; SOURCE LINE # 867
00CF 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00D2 E0                MOVX    A,@DPTR
00D3 B41205            CJNE    A,#012H,?C0219
                                           ; SOURCE LINE # 868
00D6 900000      E     MOV     DPTR,#VTHR_PRO_OFF
00D9         ?C0360:
00D9 802B              SJMP    ?C0363
00DB         ?C0219:
                                           ; SOURCE LINE # 869
00DB 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00DE E0                MOVX    A,@DPTR
00DF B41305            CJNE    A,#013H,?C0221
                                           ; SOURCE LINE # 870
00E2 900000      E     MOV     DPTR,#VTHR_Turo_OFF
00E5         ?C0361:
00E5 801F              SJMP    ?C0363
00E7         ?C0221:
                                           ; SOURCE LINE # 871
00E7 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00EA E0                MOVX    A,@DPTR
00EB 6414              XRL     A,#014H
00ED 7036              JNZ     ?C0192
                                           ; SOURCE LINE # 872
00EF 900000      E     MOV     DPTR,#VTHR_PRO_ON
00F2         ?C0362:
                                           ; SOURCE LINE # 873
00F2 8012              SJMP    ?C0363
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 878
00F4         ?C0225:
                                           ; SOURCE LINE # 879
00F4 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00F7 E0                MOVX    A,@DPTR
00F8 7002              JNZ     ?C0226
                                           ; SOURCE LINE # 880
00FA 8025              SJMP    ?C0366
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 54  

00FC         ?C0226:
                                           ; SOURCE LINE # 881
00FC 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
00FF E0                MOVX    A,@DPTR
0100 B40106            CJNE    A,#01H,?C0228
                                           ; SOURCE LINE # 882
0103 900000      E     MOV     DPTR,#nRamTemp
0106         ?C0363:
0106 E0                MOVX    A,@DPTR
0107         ?C0364:
0107 8018              SJMP    ?C0366
0109         ?C0228:
                                           ; SOURCE LINE # 883
0109 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
010C E0                MOVX    A,@DPTR
010D B40206            CJNE    A,#02H,?C0230
                                           ; SOURCE LINE # 884
0110 900000      E     MOV     DPTR,#nVramTemp
0113 E0                MOVX    A,@DPTR
0114         ?C0365:
0114 800B              SJMP    ?C0366
0116         ?C0230:
                                           ; SOURCE LINE # 885
0116 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0119 E0                MOVX    A,@DPTR
011A B40308            CJNE    A,#03H,?C0192
                                           ; SOURCE LINE # 886
011D 900000      E     MOV     DPTR,#nNBTemp
0120 E0                MOVX    A,@DPTR
0121         ?C0366:
0121 900000      E     MOV     DPTR,#EXT_NAMESPACE_DATA
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 887
0125         ?C0192:
                                           ; SOURCE LINE # 888
0125 900000      E     MOV     DPTR,#EXT_NAMESPACE_DATA
0128 E0                MOVX    A,@DPTR
0129 FF                MOV     R7,A
012A 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 889
012D E4                CLR     A
012E 900000      E     MOV     DPTR,#EXT_NAMESPACE_INDEX
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 890
0132 900000      E     MOV     DPTR,#EXT_NAMESPACE_BANK
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
0136         ?C0233:
0136 22                RET     
             ; FUNCTION ThermalMailBox (END)

             ; FUNCTION _RamDebug (BEGIN)
                                           ; SOURCE LINE # 899
;---- Variable 'dbgcode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 906
;---- Variable 'byte_register_pntr' assigned to Register 'R4/R5' ----
0000 7DFF              MOV     R5,#0FFH
0002 7C0A              MOV     R4,#0AH
                                           ; SOURCE LINE # 907
0004 8D82              MOV     DPL,R5
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 55  

0006 8C83              MOV     DPH,R4
0008 E0                MOVX    A,@DPTR
;---- Variable 'index' assigned to Register 'R1' ----
0009 F9                MOV     R1,A
                                           ; SOURCE LINE # 908
000A E0                MOVX    A,@DPTR
000B 04                INC     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 910
000D E0                MOVX    A,@DPTR
000E B4FF27            CJNE    A,#0FFH,?C0234
                                           ; SOURCE LINE # 911
                                           ; SOURCE LINE # 912
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 913
0013 900000      R     MOV     DPTR,#ClearIndex
0016 740A              MOV     A,#0AH
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 915
;---- Variable 'i' assigned to Register 'R6' ----
001C FE                MOV     R6,A
001D         ?C0235:
                                           ; SOURCE LINE # 916
                                           ; SOURCE LINE # 917
001D 900000      R     MOV     DPTR,#ClearIndex
0020 E0                MOVX    A,@DPTR
0021 FA                MOV     R2,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 F582              MOV     DPL,A
0026 8A83              MOV     DPH,R2
0028 E4                CLR     A
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
002A 900000      R     MOV     DPTR,#ClearIndex
002D 75F001            MOV     B,#01H
0030 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 919
0033 0E                INC     R6
0034 EE                MOV     A,R6
0035 B4FFE5            CJNE    A,#0FFH,?C0235
                                           ; SOURCE LINE # 920
0038         ?C0234:
                                           ; SOURCE LINE # 922
0038 CE                XCH     A,R6
0039 E9                MOV     A,R1
003A CE                XCH     A,R6
003B E9                MOV     A,R1
003C 2400              ADD     A,#00H
003E FD                MOV     R5,A
003F E4                CLR     A
0040 340A              ADDC    A,#0AH
                                           ; SOURCE LINE # 923
0042 8D82              MOV     DPL,R5
0044 F583              MOV     DPH,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 924
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 56  

0048 22                RET     
             ; FUNCTION _RamDebug (END)

             ; FUNCTION ClearDiagRam (BEGIN)
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 932
0000 7B01              MOV     R3,#01H
0002 7A0F              MOV     R2,#0FH
0004 7900              MOV     R1,#00H
;---- Variable 'ClearIndex' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 933
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#i
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
000D         ?C0239:
                                           ; SOURCE LINE # 934
                                           ; SOURCE LINE # 935
000D E4                CLR     A
000E 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 936
0011 04                INC     A
0012 29                ADD     A,R1
0013 F9                MOV     R1,A
0014 E4                CLR     A
0015 3A                ADDC    A,R2
0016 FA                MOV     R2,A
                                           ; SOURCE LINE # 937
0017 900000      R     MOV     DPTR,#i
001A E4                CLR     A
001B 75F001            MOV     B,#01H
001E 120000      E     LCALL   ?C?IILDX
0021 900000      R     MOV     DPTR,#i
0024 E0                MOVX    A,@DPTR
0025 B401E5            CJNE    A,#01H,?C0239
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A B400E0            CJNE    A,#00H,?C0239
                                           ; SOURCE LINE # 940
002D         ?C0242:
002D 22                RET     
             ; FUNCTION ClearDiagRam (END)

             ; FUNCTION DiagSMBusOperation (BEGIN)
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 946
0000 900000      E     MOV     DPTR,#SMB_PRTC_Diag
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0277
                                           ; SOURCE LINE # 947
                                           ; SOURCE LINE # 948
0009 E4                CLR     A
000A 900000      E     MOV     DPTR,#SMB_STS_Diag
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
000E 900000      E     MOV     DPTR,#SMB_PRTC_Diag
0011 E0                MOVX    A,@DPTR
0012 540F              ANL     A,#0FH
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 57  

0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
0015 E0                MOVX    A,@DPTR
0016 B4040F            CJNE    A,#04H,?C0244
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 969
0019 120000      R     LCALL   L?0395
001C FD                MOV     R5,A
001D 900000      E     MOV     DPTR,#SMB_CMD_Diag
0020 E0                MOVX    A,@DPTR
0021 FB                MOV     R3,A
0022 120000      E     LCALL   _bSMBusSendByte
                                           ; SOURCE LINE # 970
0025 020000      R     LJMP    ?C0373
0028         ?C0244:
                                           ; SOURCE LINE # 971
0028 900000      E     MOV     DPTR,#SMB_PRTC_Diag
002B E0                MOVX    A,@DPTR
002C B4050E            CJNE    A,#05H,?C0246
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
002F 120000      R     LCALL   L?0395
0032 FD                MOV     R5,A
0033 7A00        E     MOV     R2,#HIGH SMB_DATA_Diag
0035 7B00        E     MOV     R3,#LOW SMB_DATA_Diag
0037 120000      E     LCALL   _bSMBusReceiveByte
003A         ?C0367:
                                           ; SOURCE LINE # 974
003A 020000      R     LJMP    ?C0373
003D         ?C0246:
                                           ; SOURCE LINE # 975
003D 900000      E     MOV     DPTR,#SMB_PRTC_Diag
0040 E0                MOVX    A,@DPTR
0041 6406              XRL     A,#06H
0043 700E              JNZ     ?C0248
                                           ; SOURCE LINE # 976
                                           ; SOURCE LINE # 977
0045 120000      R     LCALL   L?0389
0048 E4                CLR     A
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
004B 7D88              MOV     R5,#088H
004D 120000      E     LCALL   _bRWSMBus
0050         ?C0368:
                                           ; SOURCE LINE # 978
0050 020000      R     LJMP    ?C0373
0053         ?C0248:
                                           ; SOURCE LINE # 979
0053 900000      E     MOV     DPTR,#SMB_PRTC_Diag
0056 E0                MOVX    A,@DPTR
0057 6407              XRL     A,#07H
0059 700E              JNZ     ?C0250
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
005B 120000      R     LCALL   L?0389
005E E4                CLR     A
005F A3                INC     DPTR
0060 F0                MOVX    @DPTR,A
0061 7D08              MOV     R5,#08H
0063 120000      E     LCALL   _bRWSMBus
0066         ?C0369:
                                           ; SOURCE LINE # 982
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 58  

0066 020000      R     LJMP    ?C0373
0069         ?C0250:
                                           ; SOURCE LINE # 983
0069 900000      E     MOV     DPTR,#SMB_PRTC_Diag
006C E0                MOVX    A,@DPTR
006D 6408              XRL     A,#08H
006F 700E              JNZ     ?C0252
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
0071 120000      R     LCALL   L?0390
0074 E4                CLR     A
0075 A3                INC     DPTR
0076 F0                MOVX    @DPTR,A
0077 7D8C              MOV     R5,#08CH
0079 120000      E     LCALL   _bRWSMBus
007C         ?C0370:
                                           ; SOURCE LINE # 986
007C 020000      R     LJMP    ?C0373
007F         ?C0252:
                                           ; SOURCE LINE # 987
007F 900000      E     MOV     DPTR,#SMB_PRTC_Diag
0082 E0                MOVX    A,@DPTR
0083 6409              XRL     A,#09H
0085 700D              JNZ     ?C0254
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 989
0087 120000      R     LCALL   L?0390
008A E4                CLR     A
008B A3                INC     DPTR
008C F0                MOVX    @DPTR,A
008D 7D0C              MOV     R5,#0CH
008F 120000      E     LCALL   _bRWSMBus
0092         ?C0371:
                                           ; SOURCE LINE # 990
0092 8042              SJMP    ?C0373
0094         ?C0254:
                                           ; SOURCE LINE # 991
0094 900000      E     MOV     DPTR,#SMB_PRTC_Diag
0097 E0                MOVX    A,@DPTR
0098 640A              XRL     A,#0AH
009A 7020              JNZ     ?C0256
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
009C 120000      R     LCALL   L?0396
009F FB                MOV     R3,A
00A0 900000      E     MOV     DPTR,#SMB_CMD_Diag
00A3 E0                MOVX    A,@DPTR
00A4 900000      E     MOV     DPTR,#?_bWSMBusBlock?BYTE+03H
00A7 120000      R     LCALL   L?0391
00AA 900000      E     MOV     DPTR,#SMB_BCNT_Diag
00AD E0                MOVX    A,@DPTR
00AE 900000      E     MOV     DPTR,#?_bWSMBusBlock?BYTE+06H
00B1 F0                MOVX    @DPTR,A
00B2 E4                CLR     A
00B3 A3                INC     DPTR
00B4 F0                MOVX    @DPTR,A
00B5 7D94              MOV     R5,#094H
00B7 120000      E     LCALL   _bWSMBusBlock
00BA         ?C0372:
                                           ; SOURCE LINE # 994
00BA 801A              SJMP    ?C0373
00BC         ?C0256:
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 59  

                                           ; SOURCE LINE # 995
00BC 900000      E     MOV     DPTR,#SMB_PRTC_Diag
00BF E0                MOVX    A,@DPTR
00C0 B40B18            CJNE    A,#0BH,?C0245
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 997
00C3 120000      R     LCALL   L?0396
00C6 FB                MOV     R3,A
00C7 900000      E     MOV     DPTR,#SMB_CMD_Diag
00CA E0                MOVX    A,@DPTR
00CB 900000      E     MOV     DPTR,#?_bRSMBusBlock?BYTE+03H
00CE 120000      R     LCALL   L?0391
00D1 7D14              MOV     R5,#014H
00D3 120000      E     LCALL   _bRSMBusBlock
00D6         ?C0373:
00D6 900000      R     MOV     DPTR,#result
00D9 EF                MOV     A,R7
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 998
00DB         ?C0245:
                                           ; SOURCE LINE # 1000
00DB 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
00DE E0                MOVX    A,@DPTR
00DF B40105            CJNE    A,#01H,?C0259
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
00E2 900000      E     MOV     DPTR,#HOSTA_B
                                           ; SOURCE LINE # 1003
00E5 8015              SJMP    ?C0375
00E7         ?C0259:
                                           ; SOURCE LINE # 1004
00E7 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
00EA E0                MOVX    A,@DPTR
00EB 7005              JNZ     ?C0261
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
00ED 900000      E     MOV     DPTR,#HOSTA_A
00F0         ?C0374:
                                           ; SOURCE LINE # 1007
00F0 800A              SJMP    ?C0375
00F2         ?C0261:
                                           ; SOURCE LINE # 1008
00F2 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
00F5 E0                MOVX    A,@DPTR
00F6 B40208            CJNE    A,#02H,?C0260
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1010
00F9 900000      E     MOV     DPTR,#HOSTA_C
00FC         ?C0375:
00FC E0                MOVX    A,@DPTR
00FD 900000      R     MOV     DPTR,#HOSTx_x_State
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
0101         ?C0260:
                                           ; SOURCE LINE # 1013
0101 900000      R     MOV     DPTR,#result
0104 E0                MOVX    A,@DPTR
0105 6008              JZ      ?C0264
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0107 900000      E     MOV     DPTR,#SMB_STS_Diag
010A 7480              MOV     A,#080H
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 60  

010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1016
010D 804A              SJMP    ?C0265
010F         ?C0264:
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1020
010F 900000      R     MOV     DPTR,#HOSTx_x_State
0112 E0                MOVX    A,@DPTR
0113 FF                MOV     R7,A
0114 30E008            JNB     ACC.0,?C0266
0117 900000      E     MOV     DPTR,#SMB_STS_Diag
011A 741A              MOV     A,#01AH
011C F0                MOVX    @DPTR,A
011D 803A              SJMP    ?C0265
011F         ?C0266:
                                           ; SOURCE LINE # 1021
011F EF                MOV     A,R7
0120 30E208            JNB     ACC.2,?C0268
0123 900000      E     MOV     DPTR,#SMB_STS_Diag
0126 7417              MOV     A,#017H
0128 F0                MOVX    @DPTR,A
0129 802E              SJMP    ?C0265
012B         ?C0268:
                                           ; SOURCE LINE # 1022
012B EF                MOV     A,R7
012C 30E308            JNB     ACC.3,?C0270
012F 900000      E     MOV     DPTR,#SMB_STS_Diag
0132 7407              MOV     A,#07H
0134 F0                MOVX    @DPTR,A
0135 8022              SJMP    ?C0265
0137         ?C0270:
                                           ; SOURCE LINE # 1023
0137 EF                MOV     A,R7
0138 30E408            JNB     ACC.4,?C0272
013B 900000      E     MOV     DPTR,#SMB_STS_Diag
013E 7419              MOV     A,#019H
0140 F0                MOVX    @DPTR,A
0141 8016              SJMP    ?C0265
0143         ?C0272:
                                           ; SOURCE LINE # 1024
0143 EF                MOV     A,R7
0144 30E508            JNB     ACC.5,?C0274
0147 900000      E     MOV     DPTR,#SMB_STS_Diag
014A 7410              MOV     A,#010H
014C F0                MOVX    @DPTR,A
014D 800A              SJMP    ?C0265
014F         ?C0274:
                                           ; SOURCE LINE # 1025
014F EF                MOV     A,R7
0150 30E606            JNB     ACC.6,?C0265
0153 900000      E     MOV     DPTR,#SMB_STS_Diag
0156 7418              MOV     A,#018H
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
0159         ?C0265:
                                           ; SOURCE LINE # 1033
0159 E4                CLR     A
015A 900000      E     MOV     DPTR,#SMB_PRTC_Diag
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
015E         ?C0277:
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 61  

015E 22                RET     
             ; FUNCTION DiagSMBusOperation (END)

             ; FUNCTION Diag_interface (BEGIN)
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
                                           ; SOURCE LINE # 1042
0000 900000      E     MOV     DPTR,#nDiagInterface_CMD
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
0009 7FDC              MOV     R7,#0DCH
000B 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 1045
000E 900000      E     MOV     DPTR,#nDiagInterface_CMD
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 1046
0016 900000      E     MOV     DPTR,#nDiagInterface_ECRegH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 1047
001E 900000      E     MOV     DPTR,#nDiagInterface_ECRegL
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 1049
0026 900000      E     MOV     DPTR,#nDiagInterface_CMD
0029 E0                MOVX    A,@DPTR
002A 120000      E     LCALL   ?C?CCASE
002D 0000        R     DW      ?C0280
002F 11                DB      011H
0030 0000        R     DW      ?C0281
0032 12                DB      012H
0033 0000        R     DW      ?C0282
0035 13                DB      013H
0036 0000        R     DW      ?C0281
0038 14                DB      014H
0039 0000        R     DW      ?C0286
003B 20                DB      020H
003C 0000        R     DW      ?C0289
003E 21                DB      021H
003F 0000        R     DW      ?C0291
0041 22                DB      022H
0042 0000        R     DW      ?C0292
0044 26                DB      026H
0045 0000        R     DW      ?C0304
0047 27                DB      027H
0048 0000        R     DW      ?C0312
004A 28                DB      028H
004B 0000        R     DW      ?C0284
004D 80                DB      080H
004E 0000        R     DW      ?C0285
0050 81                DB      081H
0051 0000        R     DW      ?C0318
0053 FF                DB      0FFH
0054 0000              DW      00H
0056 0000        R     DW      ?C0278
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 62  

                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
0058         ?C0280:
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1055
0058 8002              SJMP    ?C0376
                                           ; SOURCE LINE # 1056
005A         ?C0281:
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1060
005A 8009              SJMP    ?C0377
                                           ; SOURCE LINE # 1061
005C         ?C0282:
                                           ; SOURCE LINE # 1062
005C         ?C0376:
005C 7C00              MOV     R4,#00H
005E 120000      R     LCALL   L?0404
0061 EC                MOV     A,R4
0062 3E                ADDC    A,R6
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
0063 8019              SJMP    ?C0378
                                           ; SOURCE LINE # 1065
0065         ?C0377:
0065 900000      E     MOV     DPTR,#nDiagInterface_DATA
0068 E0                MOVX    A,@DPTR
0069 FD                MOV     R5,A
006A 7A00              MOV     R2,#00H
006C 120000      R     LCALL   L?0404
006F EA                MOV     A,R2
0070 3E                ADDC    A,R6
0071 8F82              MOV     DPL,R7
0073 F583              MOV     DPH,A
0075 ED                MOV     A,R5
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
0076 8025              SJMP    ?C0379
                                           ; SOURCE LINE # 1069
0078         ?C0284:
                                           ; SOURCE LINE # 1070
0078 120000      R     LCALL   L?0405
007B E4                CLR     A
007C 3404              ADDC    A,#04H
007E         ?C0378:
007E 8F82              MOV     DPL,R7
0080 F583              MOV     DPH,A
0082 E0                MOVX    A,@DPTR
0083 900000      E     MOV     DPTR,#nDiagInterface_DATA
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
0087 8018              SJMP    ?C0380
                                           ; SOURCE LINE # 1073
0089         ?C0285:
                                           ; SOURCE LINE # 1074
0089 900000      E     MOV     DPTR,#nDiagInterface_DATA
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E 900000      E     MOV     DPTR,#nDiagInterface_ECRegL
0091 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 63  

0092 2400              ADD     A,#00H
0094 FD                MOV     R5,A
0095 E4                CLR     A
0096 3404              ADDC    A,#04H
0098 8D82              MOV     DPL,R5
009A F583              MOV     DPH,A
009C EF                MOV     A,R7
009D         ?C0379:
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
009E 900000      E     MOV     DPTR,#nDiagInterface_DATA
00A1         ?C0380:
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 120000      R     LCALL   _RamDebug
                                           ; SOURCE LINE # 1076
00A6 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1078
00A9         ?C0286:
                                           ; SOURCE LINE # 1079
00A9 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
00AC E0                MOVX    A,@DPTR
00AD 7004              JNZ     ?C0287
                                           ; SOURCE LINE # 1080
00AF 04                INC     A
00B0 F0                MOVX    @DPTR,A
00B1 8006              SJMP    ?C0288
00B3         ?C0287:
                                           ; SOURCE LINE # 1082
00B3 900000      E     MOV     DPTR,#SMB_EC_Chennel_Diag
00B6 E0                MOVX    A,@DPTR
00B7 14                DEC     A
00B8 F0                MOVX    @DPTR,A
00B9         ?C0288:
                                           ; SOURCE LINE # 1083
00B9 120000      R     LCALL   DiagSMBusOperation
                                           ; SOURCE LINE # 1084
00BC 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1086
00BF         ?C0289:
                                           ; SOURCE LINE # 1087
00BF 900000      E     MOV     DPTR,#nDiagInterface_DATA
00C2 E0                MOVX    A,@DPTR
00C3 D3                SETB    C
00C4 9400              SUBB    A,#00H
00C6 5003              JNC     $ + 5H
00C8 020000      R     LJMP    ?C0278
00CB E0                MOVX    A,@DPTR
00CC D3                SETB    C
00CD 940C              SUBB    A,#0CH
00CF 4003              JC      $ + 5H
00D1 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1088
                                           ; SOURCE LINE # 1089
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
00D6 C4                SWAP    A
00D7 54F0              ANL     A,#0F0H
00D9 240A              ADD     A,#0AH
00DB 900000      E     MOV     DPTR,#FunctionKeyDebounce
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1090
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 64  

00DF 900000      E     MOV     DPTR,#nDiagInterface_DATA
00E2 E0                MOVX    A,@DPTR
00E3 75F003            MOV     B,#03H
00E6 900000      E     MOV     DPTR,#HotKey_Fn_Fx-03H
00E9 120000      E     LCALL   ?C?OFFXADD
00EC 120000      E     LCALL   ?C?PLDCODE
00EF 8982              MOV     DPL,R1
00F1 8A83              MOV     DPH,R2
00F3 E4                CLR     A
00F4 FF                MOV     R7,A
00F5 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
00F8 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1094
00FB         ?C0291:
                                           ; SOURCE LINE # 1095
00FB 900000      E     MOV     DPTR,#nDiagInterface_DATA
00FE E0                MOVX    A,@DPTR
00FF FF                MOV     R7,A
0100 120000      E     LCALL   _ECQEvent
                                           ; SOURCE LINE # 1096
0103 020000      R     LJMP    ?C0278
                                           ; SOURCE LINE # 1098
0106         ?C0292:
                                           ; SOURCE LINE # 1099
0106 900000      E     MOV     DPTR,#nDiagInterface_DATA
0109 E0                MOVX    A,@DPTR
010A B40105            CJNE    A,#01H,?C0293
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
010D 900000      E     MOV     DPTR,#nCpuTemp
                                           ; SOURCE LINE # 1102
0110 805E              SJMP    ?C0387
0112         ?C0293:
                                           ; SOURCE LINE # 1103
0112 900000      E     MOV     DPTR,#nDiagInterface_DATA
0115 E0                MOVX    A,@DPTR
0116 B40205            CJNE    A,#02H,?C0295
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
0119 900000      E     MOV     DPTR,#VGA_TEMP
011C         ?C0381:
                                           ; SOURCE LINE # 1106
011C 8052              SJMP    ?C0387
011E         ?C0295:
                                           ; SOURCE LINE # 1107
011E 900000      E     MOV     DPTR,#nDiagInterface_DATA
0121 E0                MOVX    A,@DPTR
0122 B40305            CJNE    A,#03H,?C0297
                                           ; SOURCE LINE # 1108
                                           ; SOURCE LINE # 1110
0125 900000      E     MOV     DPTR,#EXTVGA_TEMP
0128         ?C0382:
                                           ; SOURCE LINE # 1111
0128 8046              SJMP    ?C0387
012A         ?C0297:
                                           ; SOURCE LINE # 1112
012A 900000      E     MOV     DPTR,#nDiagInterface_DATA
012D E0                MOVX    A,@DPTR
012E B40405            CJNE    A,#04H,?C0299
                                           ; SOURCE LINE # 1113
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 65  

                                           ; SOURCE LINE # 1115
0131 900000      E     MOV     DPTR,#ThermistorCPU_TEMP
0134         ?C0383:
                                           ; SOURCE LINE # 1116
0134 803A              SJMP    ?C0387
0136         ?C0299:
                                           ; SOURCE LINE # 1117
0136 900000      E     MOV     DPTR,#nDiagInterface_DATA
0139 E0                MOVX    A,@DPTR
013A B40505            CJNE    A,#05H,?C0301
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
013D 900000      E     MOV     DPTR,#nRamTemp
0140         ?C0384:
                                           ; SOURCE LINE # 1120
0140 802E              SJMP    ?C0387
0142         ?C0301:
                                           ; SOURCE LINE # 1122
0142 900000      E     MOV     DPTR,#nDiagInterface_DATA
0145 E0                MOVX    A,@DPTR
0146 6406              XRL     A,#06H
0148 7057              JNZ     ?C0278
                                           ; SOURCE LINE # 1123
                                           ; SOURCE LINE # 1124
014A 900000      E     MOV     DPTR,#nVramTemp
014D         ?C0385:
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1127
014D 8021              SJMP    ?C0387
                                           ; SOURCE LINE # 1128
014F         ?C0304:
                                           ; SOURCE LINE # 1129
014F 900000      E     MOV     DPTR,#nDiagInterface_DATA
0152 E0                MOVX    A,@DPTR
0153 B40105            CJNE    A,#01H,?C0305
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
0156 900000      E     MOV     DPTR,#nAtmFanSpeed
0159         ?C0386:
                                           ; SOURCE LINE # 1132
0159 8015              SJMP    ?C0387
015B         ?C0305:
                                           ; SOURCE LINE # 1133
015B 900000      E     MOV     DPTR,#nDiagInterface_DATA
015E E0                MOVX    A,@DPTR
015F B40204            CJNE    A,#02H,?C0307
                                           ; SOURCE LINE # 1134
                                           ; SOURCE LINE # 1136
0162 E4                CLR     A
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1137
0164 803B              SJMP    ?C0278
0166         ?C0307:
                                           ; SOURCE LINE # 1139
0166 900000      E     MOV     DPTR,#nDiagInterface_DATA
0169 E0                MOVX    A,@DPTR
016A B4030A            CJNE    A,#03H,?C0309
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
016D 900000      E     MOV     DPTR,#DCR5
0170         ?C0387:
0170 E0                MOVX    A,@DPTR
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 66  

0171 900000      E     MOV     DPTR,#nDiagInterface_DATA
0174 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
0175 802A              SJMP    ?C0278
0177         ?C0309:
                                           ; SOURCE LINE # 1143
0177 900000      E     MOV     DPTR,#nDiagInterface_DATA
017A E0                MOVX    A,@DPTR
017B B40423            CJNE    A,#04H,?C0278
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1146
017E E4                CLR     A
017F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1149
0180 801F              SJMP    ?C0278
                                           ; SOURCE LINE # 1150
0182         ?C0312:
                                           ; SOURCE LINE # 1151
0182 900000      E     MOV     DPTR,#nDiagInterface_DATA
0185 E0                MOVX    A,@DPTR
0186 C3                CLR     C
0187 9480              SUBB    A,#080H
0189 4016              JC      ?C0278
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
018B 900000      E     MOV     DPTR,#uReserve07
018E E0                MOVX    A,@DPTR
018F 4440              ORL     A,#040H
0191 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1155
0192 900000      E     MOV     DPTR,#nDiagInterface_DATA
0195 E0                MOVX    A,@DPTR
0196 2480              ADD     A,#080H
0198 900000      E     MOV     DPTR,#ManualFanPRM
019B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
019C 8003              SJMP    ?C0278
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1243
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1247
                                           ; SOURCE LINE # 1248
019E         ?C0318:
                                           ; SOURCE LINE # 1249
019E 120000      R     LCALL   ClearDiagRam
                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
01A1         ?C0278:
                                           ; SOURCE LINE # 1255
01A1 E4                CLR     A
01A2 900000      E     MOV     DPTR,#nDiagInterface_CMD
01A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
C51 COMPILER V8.12   OEM_MAILBOX                                                           09/14/2018 11:08:26 PAGE 67  

01A6 22                RET     
             ; FUNCTION Diag_interface (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3265    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
